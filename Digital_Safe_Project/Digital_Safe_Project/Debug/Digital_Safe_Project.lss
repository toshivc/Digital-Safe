
Digital_Safe_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bd6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000bd6  00000c6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800078  00800078  00000c82  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c82  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000cb4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000edf  00000000  00000000  00000e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009eb  00000000  00000000  00001d2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d03  00000000  00000000  0000271a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000384  00000000  00000000  00003420  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b9  00000000  00000000  000037a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000659  00000000  00000000  00003d5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  000043b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	e9 01       	movw	r28, r18
  56:	eb 01       	movw	r28, r22
  58:	ed 01       	movw	r28, r26
  5a:	ef 01       	movw	r28, r30
  5c:	f1 01       	movw	r30, r2
  5e:	f3 01       	movw	r30, r6
  60:	f5 01       	movw	r30, r10
  62:	f7 01       	movw	r30, r14
  64:	f9 01       	movw	r30, r18
  66:	fb 01       	movw	r30, r22
  68:	ff 01       	movw	r30, r30
  6a:	01 02       	muls	r16, r17
  6c:	03 02       	muls	r16, r19
  6e:	05 02       	muls	r16, r21
  70:	07 02       	muls	r16, r23
  72:	07 02       	muls	r16, r23
  74:	fd 01       	movw	r30, r26

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf e5       	ldi	r28, 0x5F	; 95
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
  82:	10 e0       	ldi	r17, 0x00	; 0
  84:	a0 e6       	ldi	r26, 0x60	; 96
  86:	b0 e0       	ldi	r27, 0x00	; 0
  88:	e6 ed       	ldi	r30, 0xD6	; 214
  8a:	fb e0       	ldi	r31, 0x0B	; 11
  8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
  8e:	05 90       	lpm	r0, Z+
  90:	0d 92       	st	X+, r0
  92:	a8 37       	cpi	r26, 0x78	; 120
  94:	b1 07       	cpc	r27, r17
  96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
  98:	20 e0       	ldi	r18, 0x00	; 0
  9a:	a8 e7       	ldi	r26, 0x78	; 120
  9c:	b0 e0       	ldi	r27, 0x00	; 0
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	ab 37       	cpi	r26, 0x7B	; 123
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 e7 04 	call	0x9ce	; 0x9ce <main>
  ac:	0c 94 e9 05 	jmp	0xbd2	; 0xbd2 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <delay_ms>:
*/

//****************************************************************************************
//Timer with minimum time of 0.001 seconds ie 1ms, max time of 65sec
void delay_ms(uint16_t delayTime)
{
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	00 d0       	rcall	.+0      	; 0xba <delay_ms+0x6>
  ba:	00 d0       	rcall	.+0      	; 0xbc <delay_ms+0x8>
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
  c0:	9c 83       	std	Y+4, r25	; 0x04
  c2:	8b 83       	std	Y+3, r24	; 0x03
	//12MHz divided by 1024 is 11.718KHz, or clock time of 85.3micro seconds
	//multiplied by 12 gives 0.001024 seconds
	
	TCNT0 = 0x00;		//reset timer to 0
  c4:	82 e5       	ldi	r24, 0x52	; 82
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	fc 01       	movw	r30, r24
  ca:	10 82       	st	Z, r1
	OCR0 = 12;			//set compare register 
  cc:	8c e5       	ldi	r24, 0x5C	; 92
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	2c e0       	ldi	r18, 0x0C	; 12
  d2:	fc 01       	movw	r30, r24
  d4:	20 83       	st	Z, r18
	TIFR = (1<<OCF0);	//reset compare flag
  d6:	88 e5       	ldi	r24, 0x58	; 88
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	22 e0       	ldi	r18, 0x02	; 2
  dc:	fc 01       	movw	r30, r24
  de:	20 83       	st	Z, r18
	
	uint16_t overflowCounter = 0;
  e0:	1a 82       	std	Y+2, r1	; 0x02
  e2:	19 82       	std	Y+1, r1	; 0x01
	
	while (1)
	{
		while((TIFR & (1<<OCF0))==0); //while OCF0, overflow flag is 0
  e4:	00 00       	nop
  e6:	88 e5       	ldi	r24, 0x58	; 88
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	fc 01       	movw	r30, r24
  ec:	80 81       	ld	r24, Z
  ee:	88 2f       	mov	r24, r24
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	82 70       	andi	r24, 0x02	; 2
  f4:	99 27       	eor	r25, r25
  f6:	89 2b       	or	r24, r25
  f8:	b1 f3       	breq	.-20     	; 0xe6 <delay_ms+0x32>
		TCNT0 = 0x00;		//reset timer to 0
  fa:	82 e5       	ldi	r24, 0x52	; 82
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	fc 01       	movw	r30, r24
 100:	10 82       	st	Z, r1
		TIFR = (1<<OCF0); //reset compare flag
 102:	88 e5       	ldi	r24, 0x58	; 88
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	22 e0       	ldi	r18, 0x02	; 2
 108:	fc 01       	movw	r30, r24
 10a:	20 83       	st	Z, r18
		overflowCounter++;
 10c:	89 81       	ldd	r24, Y+1	; 0x01
 10e:	9a 81       	ldd	r25, Y+2	; 0x02
 110:	01 96       	adiw	r24, 0x01	; 1
 112:	9a 83       	std	Y+2, r25	; 0x02
 114:	89 83       	std	Y+1, r24	; 0x01
		if (overflowCounter >= delayTime)
 116:	29 81       	ldd	r18, Y+1	; 0x01
 118:	3a 81       	ldd	r19, Y+2	; 0x02
 11a:	8b 81       	ldd	r24, Y+3	; 0x03
 11c:	9c 81       	ldd	r25, Y+4	; 0x04
 11e:	28 17       	cp	r18, r24
 120:	39 07       	cpc	r19, r25
 122:	08 f4       	brcc	.+2      	; 0x126 <delay_ms+0x72>
		{
			return;
		}
	}	
 124:	df cf       	rjmp	.-66     	; 0xe4 <delay_ms+0x30>
		TCNT0 = 0x00;		//reset timer to 0
		TIFR = (1<<OCF0); //reset compare flag
		overflowCounter++;
		if (overflowCounter >= delayTime)
		{
			return;
 126:	00 00       	nop
		}
	}	
}
 128:	0f 90       	pop	r0
 12a:	0f 90       	pop	r0
 12c:	0f 90       	pop	r0
 12e:	0f 90       	pop	r0
 130:	df 91       	pop	r29
 132:	cf 91       	pop	r28
 134:	08 95       	ret

00000136 <delay_sec>:
//****************************************************************************************

//****************************************************************************************
//Timer with minimum time of 1 second, max time of 71583mins
void delay_sec(uint32_t delayTime)
{
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	00 d0       	rcall	.+0      	; 0x13c <delay_sec+0x6>
 13c:	00 d0       	rcall	.+0      	; 0x13e <delay_sec+0x8>
 13e:	00 d0       	rcall	.+0      	; 0x140 <delay_sec+0xa>
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62
 144:	6b 83       	std	Y+3, r22	; 0x03
 146:	7c 83       	std	Y+4, r23	; 0x04
 148:	8d 83       	std	Y+5, r24	; 0x05
 14a:	9e 83       	std	Y+6, r25	; 0x06
	delayTime = delayTime * 1000;
 14c:	2b 81       	ldd	r18, Y+3	; 0x03
 14e:	3c 81       	ldd	r19, Y+4	; 0x04
 150:	4d 81       	ldd	r20, Y+5	; 0x05
 152:	5e 81       	ldd	r21, Y+6	; 0x06
 154:	88 ee       	ldi	r24, 0xE8	; 232
 156:	93 e0       	ldi	r25, 0x03	; 3
 158:	dc 01       	movw	r26, r24
 15a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__muluhisi3>
 15e:	dc 01       	movw	r26, r24
 160:	cb 01       	movw	r24, r22
 162:	8b 83       	std	Y+3, r24	; 0x03
 164:	9c 83       	std	Y+4, r25	; 0x04
 166:	ad 83       	std	Y+5, r26	; 0x05
 168:	be 83       	std	Y+6, r27	; 0x06
	//12MHz divided by 1024 is 11.718KHz, or clock time of 85.3micro seconds
	//multiplied by 12 gives 0.001024 seconds
	
	TCNT0 = 0x00;		//reset timer to 0
 16a:	82 e5       	ldi	r24, 0x52	; 82
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	fc 01       	movw	r30, r24
 170:	10 82       	st	Z, r1
	OCR0 = 12;			//set compare register 
 172:	8c e5       	ldi	r24, 0x5C	; 92
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	2c e0       	ldi	r18, 0x0C	; 12
 178:	fc 01       	movw	r30, r24
 17a:	20 83       	st	Z, r18
	TIFR = (1<<OCF0);	//reset compare flag
 17c:	88 e5       	ldi	r24, 0x58	; 88
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	22 e0       	ldi	r18, 0x02	; 2
 182:	fc 01       	movw	r30, r24
 184:	20 83       	st	Z, r18
	
	uint16_t overflowCounter = 0;
 186:	1a 82       	std	Y+2, r1	; 0x02
 188:	19 82       	std	Y+1, r1	; 0x01
	
	while (1)
	{
		while((TIFR & (1<<OCF0))==0); //while OCF0, overflow flag is 0
 18a:	00 00       	nop
 18c:	88 e5       	ldi	r24, 0x58	; 88
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	fc 01       	movw	r30, r24
 192:	80 81       	ld	r24, Z
 194:	88 2f       	mov	r24, r24
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	82 70       	andi	r24, 0x02	; 2
 19a:	99 27       	eor	r25, r25
 19c:	89 2b       	or	r24, r25
 19e:	b1 f3       	breq	.-20     	; 0x18c <delay_sec+0x56>
		TCNT0 = 0x00;		//reset timer to 0
 1a0:	82 e5       	ldi	r24, 0x52	; 82
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	fc 01       	movw	r30, r24
 1a6:	10 82       	st	Z, r1
		TIFR = (1<<OCF0); //reset compare flag
 1a8:	88 e5       	ldi	r24, 0x58	; 88
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	22 e0       	ldi	r18, 0x02	; 2
 1ae:	fc 01       	movw	r30, r24
 1b0:	20 83       	st	Z, r18
		overflowCounter++;
 1b2:	89 81       	ldd	r24, Y+1	; 0x01
 1b4:	9a 81       	ldd	r25, Y+2	; 0x02
 1b6:	01 96       	adiw	r24, 0x01	; 1
 1b8:	9a 83       	std	Y+2, r25	; 0x02
 1ba:	89 83       	std	Y+1, r24	; 0x01
		if (overflowCounter >= delayTime)
 1bc:	89 81       	ldd	r24, Y+1	; 0x01
 1be:	9a 81       	ldd	r25, Y+2	; 0x02
 1c0:	9c 01       	movw	r18, r24
 1c2:	40 e0       	ldi	r20, 0x00	; 0
 1c4:	50 e0       	ldi	r21, 0x00	; 0
 1c6:	8b 81       	ldd	r24, Y+3	; 0x03
 1c8:	9c 81       	ldd	r25, Y+4	; 0x04
 1ca:	ad 81       	ldd	r26, Y+5	; 0x05
 1cc:	be 81       	ldd	r27, Y+6	; 0x06
 1ce:	28 17       	cp	r18, r24
 1d0:	39 07       	cpc	r19, r25
 1d2:	4a 07       	cpc	r20, r26
 1d4:	5b 07       	cpc	r21, r27
 1d6:	08 f4       	brcc	.+2      	; 0x1da <delay_sec+0xa4>
		{
			return;
		}
	}	
 1d8:	d8 cf       	rjmp	.-80     	; 0x18a <delay_sec+0x54>
		TCNT0 = 0x00;		//reset timer to 0
		TIFR = (1<<OCF0); //reset compare flag
		overflowCounter++;
		if (overflowCounter >= delayTime)
		{
			return;
 1da:	00 00       	nop
		}
	}	
}
 1dc:	26 96       	adiw	r28, 0x06	; 6
 1de:	0f b6       	in	r0, 0x3f	; 63
 1e0:	f8 94       	cli
 1e2:	de bf       	out	0x3e, r29	; 62
 1e4:	0f be       	out	0x3f, r0	; 63
 1e6:	cd bf       	out	0x3d, r28	; 61
 1e8:	df 91       	pop	r29
 1ea:	cf 91       	pop	r28
 1ec:	08 95       	ret

000001ee <displayUnlock>:
		PORTB = 0xFF;
		delay_ms(100);
		PORTB = 0x00;
		delay_ms(100);
	}
}
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	00 d0       	rcall	.+0      	; 0x1f4 <displayUnlock+0x6>
 1f4:	00 d0       	rcall	.+0      	; 0x1f6 <displayUnlock+0x8>
 1f6:	cd b7       	in	r28, 0x3d	; 61
 1f8:	de b7       	in	r29, 0x3e	; 62
 1fa:	1a 82       	std	Y+2, r1	; 0x02
 1fc:	19 82       	std	Y+1, r1	; 0x01
 1fe:	1b c0       	rjmp	.+54     	; 0x236 <displayUnlock+0x48>
 200:	88 e3       	ldi	r24, 0x38	; 56
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	29 81       	ldd	r18, Y+1	; 0x01
 206:	3a 81       	ldd	r19, Y+2	; 0x02
 208:	22 0f       	add	r18, r18
 20a:	33 1f       	adc	r19, r19
 20c:	a9 01       	movw	r20, r18
 20e:	4f 5f       	subi	r20, 0xFF	; 255
 210:	5f 4f       	sbci	r21, 0xFF	; 255
 212:	21 e0       	ldi	r18, 0x01	; 1
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	02 c0       	rjmp	.+4      	; 0x21c <displayUnlock+0x2e>
 218:	22 0f       	add	r18, r18
 21a:	33 1f       	adc	r19, r19
 21c:	4a 95       	dec	r20
 21e:	e2 f7       	brpl	.-8      	; 0x218 <displayUnlock+0x2a>
 220:	fc 01       	movw	r30, r24
 222:	20 83       	st	Z, r18
 224:	84 e6       	ldi	r24, 0x64	; 100
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
 22c:	89 81       	ldd	r24, Y+1	; 0x01
 22e:	9a 81       	ldd	r25, Y+2	; 0x02
 230:	01 96       	adiw	r24, 0x01	; 1
 232:	9a 83       	std	Y+2, r25	; 0x02
 234:	89 83       	std	Y+1, r24	; 0x01
 236:	89 81       	ldd	r24, Y+1	; 0x01
 238:	9a 81       	ldd	r25, Y+2	; 0x02
 23a:	04 97       	sbiw	r24, 0x04	; 4
 23c:	0c f3       	brlt	.-62     	; 0x200 <displayUnlock+0x12>
 23e:	1c 82       	std	Y+4, r1	; 0x04
 240:	1b 82       	std	Y+3, r1	; 0x03
 242:	1c c0       	rjmp	.+56     	; 0x27c <displayUnlock+0x8e>
 244:	88 e3       	ldi	r24, 0x38	; 56
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	2b 81       	ldd	r18, Y+3	; 0x03
 24a:	3c 81       	ldd	r19, Y+4	; 0x04
 24c:	22 0f       	add	r18, r18
 24e:	33 1f       	adc	r19, r19
 250:	47 e0       	ldi	r20, 0x07	; 7
 252:	50 e0       	ldi	r21, 0x00	; 0
 254:	42 1b       	sub	r20, r18
 256:	53 0b       	sbc	r21, r19
 258:	21 e0       	ldi	r18, 0x01	; 1
 25a:	30 e0       	ldi	r19, 0x00	; 0
 25c:	02 c0       	rjmp	.+4      	; 0x262 <displayUnlock+0x74>
 25e:	22 0f       	add	r18, r18
 260:	33 1f       	adc	r19, r19
 262:	4a 95       	dec	r20
 264:	e2 f7       	brpl	.-8      	; 0x25e <displayUnlock+0x70>
 266:	fc 01       	movw	r30, r24
 268:	20 83       	st	Z, r18
 26a:	84 e6       	ldi	r24, 0x64	; 100
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
 272:	8b 81       	ldd	r24, Y+3	; 0x03
 274:	9c 81       	ldd	r25, Y+4	; 0x04
 276:	01 96       	adiw	r24, 0x01	; 1
 278:	9c 83       	std	Y+4, r25	; 0x04
 27a:	8b 83       	std	Y+3, r24	; 0x03
 27c:	8b 81       	ldd	r24, Y+3	; 0x03
 27e:	9c 81       	ldd	r25, Y+4	; 0x04
 280:	04 97       	sbiw	r24, 0x04	; 4
 282:	04 f3       	brlt	.-64     	; 0x244 <displayUnlock+0x56>
 284:	88 e3       	ldi	r24, 0x38	; 56
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	fc 01       	movw	r30, r24
 28a:	10 82       	st	Z, r1
 28c:	00 00       	nop
 28e:	0f 90       	pop	r0
 290:	0f 90       	pop	r0
 292:	0f 90       	pop	r0
 294:	0f 90       	pop	r0
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	08 95       	ret

0000029c <displayLock>:
 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29
 2a0:	00 d0       	rcall	.+0      	; 0x2a2 <displayLock+0x6>
 2a2:	00 d0       	rcall	.+0      	; 0x2a4 <displayLock+0x8>
 2a4:	cd b7       	in	r28, 0x3d	; 61
 2a6:	de b7       	in	r29, 0x3e	; 62
 2a8:	1a 82       	std	Y+2, r1	; 0x02
 2aa:	19 82       	std	Y+1, r1	; 0x01
 2ac:	19 c0       	rjmp	.+50     	; 0x2e0 <displayLock+0x44>
 2ae:	88 e3       	ldi	r24, 0x38	; 56
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	29 81       	ldd	r18, Y+1	; 0x01
 2b4:	3a 81       	ldd	r19, Y+2	; 0x02
 2b6:	a9 01       	movw	r20, r18
 2b8:	44 0f       	add	r20, r20
 2ba:	55 1f       	adc	r21, r21
 2bc:	21 e0       	ldi	r18, 0x01	; 1
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <displayLock+0x2a>
 2c2:	22 0f       	add	r18, r18
 2c4:	33 1f       	adc	r19, r19
 2c6:	4a 95       	dec	r20
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <displayLock+0x26>
 2ca:	fc 01       	movw	r30, r24
 2cc:	20 83       	st	Z, r18
 2ce:	84 e6       	ldi	r24, 0x64	; 100
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
 2d6:	89 81       	ldd	r24, Y+1	; 0x01
 2d8:	9a 81       	ldd	r25, Y+2	; 0x02
 2da:	01 96       	adiw	r24, 0x01	; 1
 2dc:	9a 83       	std	Y+2, r25	; 0x02
 2de:	89 83       	std	Y+1, r24	; 0x01
 2e0:	89 81       	ldd	r24, Y+1	; 0x01
 2e2:	9a 81       	ldd	r25, Y+2	; 0x02
 2e4:	04 97       	sbiw	r24, 0x04	; 4
 2e6:	1c f3       	brlt	.-58     	; 0x2ae <displayLock+0x12>
 2e8:	1c 82       	std	Y+4, r1	; 0x04
 2ea:	1b 82       	std	Y+3, r1	; 0x03
 2ec:	1f c0       	rjmp	.+62     	; 0x32c <displayLock+0x90>
 2ee:	88 e3       	ldi	r24, 0x38	; 56
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	44 e0       	ldi	r20, 0x04	; 4
 2f4:	50 e0       	ldi	r21, 0x00	; 0
 2f6:	2b 81       	ldd	r18, Y+3	; 0x03
 2f8:	3c 81       	ldd	r19, Y+4	; 0x04
 2fa:	ba 01       	movw	r22, r20
 2fc:	62 1b       	sub	r22, r18
 2fe:	73 0b       	sbc	r23, r19
 300:	9b 01       	movw	r18, r22
 302:	a9 01       	movw	r20, r18
 304:	44 0f       	add	r20, r20
 306:	55 1f       	adc	r21, r21
 308:	21 e0       	ldi	r18, 0x01	; 1
 30a:	30 e0       	ldi	r19, 0x00	; 0
 30c:	02 c0       	rjmp	.+4      	; 0x312 <displayLock+0x76>
 30e:	22 0f       	add	r18, r18
 310:	33 1f       	adc	r19, r19
 312:	4a 95       	dec	r20
 314:	e2 f7       	brpl	.-8      	; 0x30e <displayLock+0x72>
 316:	fc 01       	movw	r30, r24
 318:	20 83       	st	Z, r18
 31a:	84 e6       	ldi	r24, 0x64	; 100
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
 322:	8b 81       	ldd	r24, Y+3	; 0x03
 324:	9c 81       	ldd	r25, Y+4	; 0x04
 326:	01 96       	adiw	r24, 0x01	; 1
 328:	9c 83       	std	Y+4, r25	; 0x04
 32a:	8b 83       	std	Y+3, r24	; 0x03
 32c:	8b 81       	ldd	r24, Y+3	; 0x03
 32e:	9c 81       	ldd	r25, Y+4	; 0x04
 330:	04 97       	sbiw	r24, 0x04	; 4
 332:	ec f2       	brlt	.-70     	; 0x2ee <displayLock+0x52>
 334:	88 e3       	ldi	r24, 0x38	; 56
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	fc 01       	movw	r30, r24
 33a:	10 82       	st	Z, r1
 33c:	00 00       	nop
 33e:	0f 90       	pop	r0
 340:	0f 90       	pop	r0
 342:	0f 90       	pop	r0
 344:	0f 90       	pop	r0
 346:	df 91       	pop	r29
 348:	cf 91       	pop	r28
 34a:	08 95       	ret

0000034c <displayIncorrect>:
//****************************************************************************************

//****************************************************************************************
//Programming mode LED sequence
void displayIncorrect(void)
{
 34c:	cf 93       	push	r28
 34e:	df 93       	push	r29
 350:	00 d0       	rcall	.+0      	; 0x352 <displayIncorrect+0x6>
 352:	cd b7       	in	r28, 0x3d	; 61
 354:	de b7       	in	r29, 0x3e	; 62
	for (int i = 0; i <4; i++)
 356:	1a 82       	std	Y+2, r1	; 0x02
 358:	19 82       	std	Y+1, r1	; 0x01
 35a:	16 c0       	rjmp	.+44     	; 0x388 <displayIncorrect+0x3c>
	{
		PORTB = 0x55;
 35c:	88 e3       	ldi	r24, 0x38	; 56
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	25 e5       	ldi	r18, 0x55	; 85
 362:	fc 01       	movw	r30, r24
 364:	20 83       	st	Z, r18
		delay_ms(80);
 366:	80 e5       	ldi	r24, 0x50	; 80
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
		PORTB = 0x00;
 36e:	88 e3       	ldi	r24, 0x38	; 56
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	fc 01       	movw	r30, r24
 374:	10 82       	st	Z, r1
		delay_ms(80);
 376:	80 e5       	ldi	r24, 0x50	; 80
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>

//****************************************************************************************
//Programming mode LED sequence
void displayIncorrect(void)
{
	for (int i = 0; i <4; i++)
 37e:	89 81       	ldd	r24, Y+1	; 0x01
 380:	9a 81       	ldd	r25, Y+2	; 0x02
 382:	01 96       	adiw	r24, 0x01	; 1
 384:	9a 83       	std	Y+2, r25	; 0x02
 386:	89 83       	std	Y+1, r24	; 0x01
 388:	89 81       	ldd	r24, Y+1	; 0x01
 38a:	9a 81       	ldd	r25, Y+2	; 0x02
 38c:	04 97       	sbiw	r24, 0x04	; 4
 38e:	34 f3       	brlt	.-52     	; 0x35c <displayIncorrect+0x10>
		PORTB = 0x55;
		delay_ms(80);
		PORTB = 0x00;
		delay_ms(80);
	}
}
 390:	00 00       	nop
 392:	0f 90       	pop	r0
 394:	0f 90       	pop	r0
 396:	df 91       	pop	r29
 398:	cf 91       	pop	r28
 39a:	08 95       	ret

0000039c <displayKeys>:
//****************************************************************************************

//****************************************************************************************
// Convert binary value to more realistic LED representation
uint8_t displayKeys(uint8_t keyValue)
{
 39c:	cf 93       	push	r28
 39e:	df 93       	push	r29
 3a0:	1f 92       	push	r1
 3a2:	cd b7       	in	r28, 0x3d	; 61
 3a4:	de b7       	in	r29, 0x3e	; 62
 3a6:	89 83       	std	Y+1, r24	; 0x01
	switch(keyValue)
 3a8:	89 81       	ldd	r24, Y+1	; 0x01
 3aa:	88 2f       	mov	r24, r24
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	09 2e       	mov	r0, r25
 3b0:	00 0c       	add	r0, r0
 3b2:	aa 0b       	sbc	r26, r26
 3b4:	bb 0b       	sbc	r27, r27
 3b6:	40 e0       	ldi	r20, 0x00	; 0
 3b8:	50 e0       	ldi	r21, 0x00	; 0
 3ba:	20 e1       	ldi	r18, 0x10	; 16
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	84 1b       	sub	r24, r20
 3c0:	95 0b       	sbc	r25, r21
 3c2:	28 17       	cp	r18, r24
 3c4:	39 07       	cpc	r19, r25
 3c6:	18 f1       	brcs	.+70     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3c8:	86 5d       	subi	r24, 0xD6	; 214
 3ca:	9f 4f       	sbci	r25, 0xFF	; 255
 3cc:	fc 01       	movw	r30, r24
 3ce:	0c 94 c9 05 	jmp	0xb92	; 0xb92 <__tablejump2__>
	{
		case 0x00:
		return 0x00;
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	1d c0       	rjmp	.+58     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
		break;
		
		case 0x01:
		return 0x01;
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	1b c0       	rjmp	.+54     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
		break;
		
		case 0x02:
		return 0x02;
 3da:	82 e0       	ldi	r24, 0x02	; 2
 3dc:	19 c0       	rjmp	.+50     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
		break;
		
		case 0x03:
		return 0x04;
 3de:	84 e0       	ldi	r24, 0x04	; 4
 3e0:	17 c0       	rjmp	.+46     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
		break;
		
		case 0x04:
		return 0x08;
 3e2:	88 e0       	ldi	r24, 0x08	; 8
 3e4:	15 c0       	rjmp	.+42     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
		break;
		
		case 0x05:
		return 0x10;
 3e6:	80 e1       	ldi	r24, 0x10	; 16
 3e8:	13 c0       	rjmp	.+38     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
		break;
		
		case 0x06:
		return 0x20;
 3ea:	80 e2       	ldi	r24, 0x20	; 32
 3ec:	11 c0       	rjmp	.+34     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
		break;
		
		case 0x07:
		return 0x40;
 3ee:	80 e4       	ldi	r24, 0x40	; 64
 3f0:	0f c0       	rjmp	.+30     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
		break;
		
		case 0x08:
		return 0x80;
 3f2:	80 e8       	ldi	r24, 0x80	; 128
 3f4:	0d c0       	rjmp	.+26     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
		break;
		
		case 0x09:	
		return 0x81;
 3f6:	81 e8       	ldi	r24, 0x81	; 129
 3f8:	0b c0       	rjmp	.+22     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
		break;
		
		case 0x10:
		return 0x10;
 3fa:	80 e1       	ldi	r24, 0x10	; 16
 3fc:	09 c0       	rjmp	.+18     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
		break;
		
		case 0x0A:
		return 0x03;
 3fe:	83 e0       	ldi	r24, 0x03	; 3
 400:	07 c0       	rjmp	.+14     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
		break;
		
		case 0x0B:
		return 0x0C;
 402:	8c e0       	ldi	r24, 0x0C	; 12
 404:	05 c0       	rjmp	.+10     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
		break;
		
		case 0x0C:
		return 0x30;
 406:	80 e3       	ldi	r24, 0x30	; 48
 408:	03 c0       	rjmp	.+6      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
		break;
		
		case 0x0D:
		return 0xC0;
 40a:	80 ec       	ldi	r24, 0xC0	; 192
 40c:	01 c0       	rjmp	.+2      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
		break;
		
		default:
		return 0;
 40e:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 410:	0f 90       	pop	r0
 412:	df 91       	pop	r29
 414:	cf 91       	pop	r28
 416:	08 95       	ret

00000418 <lockoutMode>:
//****************************************************************************************

//****************************************************************************************
void lockoutMode(void)
{
 418:	cf 93       	push	r28
 41a:	df 93       	push	r29
 41c:	cd b7       	in	r28, 0x3d	; 61
 41e:	de b7       	in	r29, 0x3e	; 62
	PORTB = 0x00;
 420:	88 e3       	ldi	r24, 0x38	; 56
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	fc 01       	movw	r30, r24
 426:	10 82       	st	Z, r1
	delay_sec(120);
 428:	88 e7       	ldi	r24, 0x78	; 120
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	0e 94 9b 00 	call	0x136	; 0x136 <delay_sec>
 430:	00 00       	nop
 432:	df 91       	pop	r29
 434:	cf 91       	pop	r28
 436:	08 95       	ret

00000438 <write_EEPROM>:
 438:	cf 93       	push	r28
 43a:	df 93       	push	r29
 43c:	00 d0       	rcall	.+0      	; 0x43e <write_EEPROM+0x6>
 43e:	1f 92       	push	r1
 440:	cd b7       	in	r28, 0x3d	; 61
 442:	de b7       	in	r29, 0x3e	; 62
 444:	89 83       	std	Y+1, r24	; 0x01
 446:	7b 83       	std	Y+3, r23	; 0x03
 448:	6a 83       	std	Y+2, r22	; 0x02
 44a:	8a 81       	ldd	r24, Y+2	; 0x02
 44c:	9b 81       	ldd	r25, Y+3	; 0x03
 44e:	81 30       	cpi	r24, 0x01	; 1
 450:	94 40       	sbci	r25, 0x04	; 4
 452:	20 f0       	brcs	.+8      	; 0x45c <write_EEPROM+0x24>
 454:	83 e0       	ldi	r24, 0x03	; 3
 456:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__data_end>
 45a:	1a c0       	rjmp	.+52     	; 0x490 <write_EEPROM+0x58>
 45c:	00 00       	nop
 45e:	8c e3       	ldi	r24, 0x3C	; 60
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	fc 01       	movw	r30, r24
 464:	80 81       	ld	r24, Z
 466:	88 2f       	mov	r24, r24
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	82 70       	andi	r24, 0x02	; 2
 46c:	99 27       	eor	r25, r25
 46e:	89 2b       	or	r24, r25
 470:	b1 f7       	brne	.-20     	; 0x45e <write_EEPROM+0x26>
 472:	8e e3       	ldi	r24, 0x3E	; 62
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	2a 81       	ldd	r18, Y+2	; 0x02
 478:	3b 81       	ldd	r19, Y+3	; 0x03
 47a:	fc 01       	movw	r30, r24
 47c:	31 83       	std	Z+1, r19	; 0x01
 47e:	20 83       	st	Z, r18
 480:	8d e3       	ldi	r24, 0x3D	; 61
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	29 81       	ldd	r18, Y+1	; 0x01
 486:	fc 01       	movw	r30, r24
 488:	20 83       	st	Z, r18
 48a:	e2 9a       	sbi	0x1c, 2	; 28
 48c:	e1 9a       	sbi	0x1c, 1	; 28
 48e:	00 00       	nop
 490:	0f 90       	pop	r0
 492:	0f 90       	pop	r0
 494:	0f 90       	pop	r0
 496:	df 91       	pop	r29
 498:	cf 91       	pop	r28
 49a:	08 95       	ret

0000049c <read_EEPROM>:
 49c:	cf 93       	push	r28
 49e:	df 93       	push	r29
 4a0:	00 d0       	rcall	.+0      	; 0x4a2 <read_EEPROM+0x6>
 4a2:	cd b7       	in	r28, 0x3d	; 61
 4a4:	de b7       	in	r29, 0x3e	; 62
 4a6:	9a 83       	std	Y+2, r25	; 0x02
 4a8:	89 83       	std	Y+1, r24	; 0x01
 4aa:	89 81       	ldd	r24, Y+1	; 0x01
 4ac:	9a 81       	ldd	r25, Y+2	; 0x02
 4ae:	81 30       	cpi	r24, 0x01	; 1
 4b0:	94 40       	sbci	r25, 0x04	; 4
 4b2:	10 f0       	brcs	.+4      	; 0x4b8 <read_EEPROM+0x1c>
 4b4:	80 e0       	ldi	r24, 0x00	; 0
 4b6:	1f c0       	rjmp	.+62     	; 0x4f6 <read_EEPROM+0x5a>
 4b8:	00 00       	nop
 4ba:	8c e3       	ldi	r24, 0x3C	; 60
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	fc 01       	movw	r30, r24
 4c0:	80 81       	ld	r24, Z
 4c2:	88 2f       	mov	r24, r24
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	82 70       	andi	r24, 0x02	; 2
 4c8:	99 27       	eor	r25, r25
 4ca:	89 2b       	or	r24, r25
 4cc:	b1 f7       	brne	.-20     	; 0x4ba <read_EEPROM+0x1e>
 4ce:	8e e3       	ldi	r24, 0x3E	; 62
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	29 81       	ldd	r18, Y+1	; 0x01
 4d4:	3a 81       	ldd	r19, Y+2	; 0x02
 4d6:	fc 01       	movw	r30, r24
 4d8:	31 83       	std	Z+1, r19	; 0x01
 4da:	20 83       	st	Z, r18
 4dc:	8c e3       	ldi	r24, 0x3C	; 60
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	2c e3       	ldi	r18, 0x3C	; 60
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	f9 01       	movw	r30, r18
 4e6:	20 81       	ld	r18, Z
 4e8:	21 60       	ori	r18, 0x01	; 1
 4ea:	fc 01       	movw	r30, r24
 4ec:	20 83       	st	Z, r18
 4ee:	8d e3       	ldi	r24, 0x3D	; 61
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	fc 01       	movw	r30, r24
 4f4:	80 81       	ld	r24, Z
 4f6:	0f 90       	pop	r0
 4f8:	0f 90       	pop	r0
 4fa:	df 91       	pop	r29
 4fc:	cf 91       	pop	r28
 4fe:	08 95       	ret

00000500 <storePasscode>:
 500:	cf 93       	push	r28
 502:	df 93       	push	r29
 504:	cd b7       	in	r28, 0x3d	; 61
 506:	de b7       	in	r29, 0x3e	; 62
 508:	63 97       	sbiw	r28, 0x13	; 19
 50a:	0f b6       	in	r0, 0x3f	; 63
 50c:	f8 94       	cli
 50e:	de bf       	out	0x3e, r29	; 62
 510:	0f be       	out	0x3f, r0	; 63
 512:	cd bf       	out	0x3d, r28	; 61
 514:	6f 87       	std	Y+15, r22	; 0x0f
 516:	78 8b       	std	Y+16, r23	; 0x10
 518:	89 8b       	std	Y+17, r24	; 0x11
 51a:	9a 8b       	std	Y+18, r25	; 0x12
 51c:	4b 8b       	std	Y+19, r20	; 0x13
 51e:	8b 89       	ldd	r24, Y+19	; 0x13
 520:	0e 94 c2 04 	call	0x984	; 0x984 <isUser>
 524:	88 23       	and	r24, r24
 526:	21 f4       	brne	.+8      	; 0x530 <storePasscode+0x30>
 528:	82 e0       	ldi	r24, 0x02	; 2
 52a:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__data_end>
 52e:	67 c0       	rjmp	.+206    	; 0x5fe <storePasscode+0xfe>
 530:	1a 82       	std	Y+2, r1	; 0x02
 532:	19 82       	std	Y+1, r1	; 0x01
 534:	5e c0       	rjmp	.+188    	; 0x5f2 <storePasscode+0xf2>
 536:	89 81       	ldd	r24, Y+1	; 0x01
 538:	9a 81       	ldd	r25, Y+2	; 0x02
 53a:	9c 01       	movw	r18, r24
 53c:	22 0f       	add	r18, r18
 53e:	33 1f       	adc	r19, r19
 540:	22 0f       	add	r18, r18
 542:	33 1f       	adc	r19, r19
 544:	22 0f       	add	r18, r18
 546:	33 1f       	adc	r19, r19
 548:	8f 85       	ldd	r24, Y+15	; 0x0f
 54a:	98 89       	ldd	r25, Y+16	; 0x10
 54c:	a9 89       	ldd	r26, Y+17	; 0x11
 54e:	ba 89       	ldd	r27, Y+18	; 0x12
 550:	04 c0       	rjmp	.+8      	; 0x55a <storePasscode+0x5a>
 552:	b6 95       	lsr	r27
 554:	a7 95       	ror	r26
 556:	97 95       	ror	r25
 558:	87 95       	ror	r24
 55a:	2a 95       	dec	r18
 55c:	d2 f7       	brpl	.-12     	; 0x552 <storePasscode+0x52>
 55e:	48 2f       	mov	r20, r24
 560:	9e 01       	movw	r18, r28
 562:	2d 5f       	subi	r18, 0xFD	; 253
 564:	3f 4f       	sbci	r19, 0xFF	; 255
 566:	89 81       	ldd	r24, Y+1	; 0x01
 568:	9a 81       	ldd	r25, Y+2	; 0x02
 56a:	82 0f       	add	r24, r18
 56c:	93 1f       	adc	r25, r19
 56e:	fc 01       	movw	r30, r24
 570:	40 83       	st	Z, r20
 572:	8b 89       	ldd	r24, Y+19	; 0x13
 574:	88 2f       	mov	r24, r24
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	9c 01       	movw	r18, r24
 57a:	22 95       	swap	r18
 57c:	32 95       	swap	r19
 57e:	30 7f       	andi	r19, 0xF0	; 240
 580:	32 27       	eor	r19, r18
 582:	20 7f       	andi	r18, 0xF0	; 240
 584:	32 27       	eor	r19, r18
 586:	44 e0       	ldi	r20, 0x04	; 4
 588:	50 e0       	ldi	r21, 0x00	; 0
 58a:	89 81       	ldd	r24, Y+1	; 0x01
 58c:	9a 81       	ldd	r25, Y+2	; 0x02
 58e:	ba 01       	movw	r22, r20
 590:	68 1b       	sub	r22, r24
 592:	79 0b       	sbc	r23, r25
 594:	cb 01       	movw	r24, r22
 596:	82 2b       	or	r24, r18
 598:	93 2b       	or	r25, r19
 59a:	ac 01       	movw	r20, r24
 59c:	89 81       	ldd	r24, Y+1	; 0x01
 59e:	9a 81       	ldd	r25, Y+2	; 0x02
 5a0:	88 0f       	add	r24, r24
 5a2:	99 1f       	adc	r25, r25
 5a4:	9e 01       	movw	r18, r28
 5a6:	2f 5f       	subi	r18, 0xFF	; 255
 5a8:	3f 4f       	sbci	r19, 0xFF	; 255
 5aa:	82 0f       	add	r24, r18
 5ac:	93 1f       	adc	r25, r19
 5ae:	06 96       	adiw	r24, 0x06	; 6
 5b0:	fc 01       	movw	r30, r24
 5b2:	51 83       	std	Z+1, r21	; 0x01
 5b4:	40 83       	st	Z, r20
 5b6:	89 81       	ldd	r24, Y+1	; 0x01
 5b8:	9a 81       	ldd	r25, Y+2	; 0x02
 5ba:	88 0f       	add	r24, r24
 5bc:	99 1f       	adc	r25, r25
 5be:	9e 01       	movw	r18, r28
 5c0:	2f 5f       	subi	r18, 0xFF	; 255
 5c2:	3f 4f       	sbci	r19, 0xFF	; 255
 5c4:	82 0f       	add	r24, r18
 5c6:	93 1f       	adc	r25, r19
 5c8:	06 96       	adiw	r24, 0x06	; 6
 5ca:	fc 01       	movw	r30, r24
 5cc:	40 81       	ld	r20, Z
 5ce:	51 81       	ldd	r21, Z+1	; 0x01
 5d0:	9e 01       	movw	r18, r28
 5d2:	2d 5f       	subi	r18, 0xFD	; 253
 5d4:	3f 4f       	sbci	r19, 0xFF	; 255
 5d6:	89 81       	ldd	r24, Y+1	; 0x01
 5d8:	9a 81       	ldd	r25, Y+2	; 0x02
 5da:	82 0f       	add	r24, r18
 5dc:	93 1f       	adc	r25, r19
 5de:	fc 01       	movw	r30, r24
 5e0:	80 81       	ld	r24, Z
 5e2:	ba 01       	movw	r22, r20
 5e4:	0e 94 1c 02 	call	0x438	; 0x438 <write_EEPROM>
 5e8:	89 81       	ldd	r24, Y+1	; 0x01
 5ea:	9a 81       	ldd	r25, Y+2	; 0x02
 5ec:	01 96       	adiw	r24, 0x01	; 1
 5ee:	9a 83       	std	Y+2, r25	; 0x02
 5f0:	89 83       	std	Y+1, r24	; 0x01
 5f2:	89 81       	ldd	r24, Y+1	; 0x01
 5f4:	9a 81       	ldd	r25, Y+2	; 0x02
 5f6:	04 97       	sbiw	r24, 0x04	; 4
 5f8:	0c f4       	brge	.+2      	; 0x5fc <storePasscode+0xfc>
 5fa:	9d cf       	rjmp	.-198    	; 0x536 <storePasscode+0x36>
 5fc:	00 00       	nop
 5fe:	63 96       	adiw	r28, 0x13	; 19
 600:	0f b6       	in	r0, 0x3f	; 63
 602:	f8 94       	cli
 604:	de bf       	out	0x3e, r29	; 62
 606:	0f be       	out	0x3f, r0	; 63
 608:	cd bf       	out	0x3d, r28	; 61
 60a:	df 91       	pop	r29
 60c:	cf 91       	pop	r28
 60e:	08 95       	ret

00000610 <RecallPasscode>:
 610:	cf 93       	push	r28
 612:	df 93       	push	r29
 614:	cd b7       	in	r28, 0x3d	; 61
 616:	de b7       	in	r29, 0x3e	; 62
 618:	2b 97       	sbiw	r28, 0x0b	; 11
 61a:	0f b6       	in	r0, 0x3f	; 63
 61c:	f8 94       	cli
 61e:	de bf       	out	0x3e, r29	; 62
 620:	0f be       	out	0x3f, r0	; 63
 622:	cd bf       	out	0x3d, r28	; 61
 624:	8b 87       	std	Y+11, r24	; 0x0b
 626:	1f 82       	std	Y+7, r1	; 0x07
 628:	18 86       	std	Y+8, r1	; 0x08
 62a:	19 86       	std	Y+9, r1	; 0x09
 62c:	1a 86       	std	Y+10, r1	; 0x0a
 62e:	19 82       	std	Y+1, r1	; 0x01
 630:	1a 82       	std	Y+2, r1	; 0x02
 632:	1b 82       	std	Y+3, r1	; 0x03
 634:	1c 82       	std	Y+4, r1	; 0x04
 636:	1e 82       	std	Y+6, r1	; 0x06
 638:	1d 82       	std	Y+5, r1	; 0x05
 63a:	43 c0       	rjmp	.+134    	; 0x6c2 <RecallPasscode+0xb2>
 63c:	8b 85       	ldd	r24, Y+11	; 0x0b
 63e:	88 2f       	mov	r24, r24
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	9c 01       	movw	r18, r24
 644:	22 95       	swap	r18
 646:	32 95       	swap	r19
 648:	30 7f       	andi	r19, 0xF0	; 240
 64a:	32 27       	eor	r19, r18
 64c:	20 7f       	andi	r18, 0xF0	; 240
 64e:	32 27       	eor	r19, r18
 650:	44 e0       	ldi	r20, 0x04	; 4
 652:	50 e0       	ldi	r21, 0x00	; 0
 654:	8d 81       	ldd	r24, Y+5	; 0x05
 656:	9e 81       	ldd	r25, Y+6	; 0x06
 658:	ba 01       	movw	r22, r20
 65a:	68 1b       	sub	r22, r24
 65c:	79 0b       	sbc	r23, r25
 65e:	cb 01       	movw	r24, r22
 660:	82 2b       	or	r24, r18
 662:	93 2b       	or	r25, r19
 664:	0e 94 4e 02 	call	0x49c	; 0x49c <read_EEPROM>
 668:	88 2f       	mov	r24, r24
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	a0 e0       	ldi	r26, 0x00	; 0
 66e:	b0 e0       	ldi	r27, 0x00	; 0
 670:	8f 83       	std	Y+7, r24	; 0x07
 672:	98 87       	std	Y+8, r25	; 0x08
 674:	a9 87       	std	Y+9, r26	; 0x09
 676:	ba 87       	std	Y+10, r27	; 0x0a
 678:	8d 81       	ldd	r24, Y+5	; 0x05
 67a:	9e 81       	ldd	r25, Y+6	; 0x06
 67c:	9c 01       	movw	r18, r24
 67e:	22 0f       	add	r18, r18
 680:	33 1f       	adc	r19, r19
 682:	22 0f       	add	r18, r18
 684:	33 1f       	adc	r19, r19
 686:	22 0f       	add	r18, r18
 688:	33 1f       	adc	r19, r19
 68a:	8f 81       	ldd	r24, Y+7	; 0x07
 68c:	98 85       	ldd	r25, Y+8	; 0x08
 68e:	a9 85       	ldd	r26, Y+9	; 0x09
 690:	ba 85       	ldd	r27, Y+10	; 0x0a
 692:	04 c0       	rjmp	.+8      	; 0x69c <RecallPasscode+0x8c>
 694:	88 0f       	add	r24, r24
 696:	99 1f       	adc	r25, r25
 698:	aa 1f       	adc	r26, r26
 69a:	bb 1f       	adc	r27, r27
 69c:	2a 95       	dec	r18
 69e:	d2 f7       	brpl	.-12     	; 0x694 <RecallPasscode+0x84>
 6a0:	29 81       	ldd	r18, Y+1	; 0x01
 6a2:	3a 81       	ldd	r19, Y+2	; 0x02
 6a4:	4b 81       	ldd	r20, Y+3	; 0x03
 6a6:	5c 81       	ldd	r21, Y+4	; 0x04
 6a8:	82 2b       	or	r24, r18
 6aa:	93 2b       	or	r25, r19
 6ac:	a4 2b       	or	r26, r20
 6ae:	b5 2b       	or	r27, r21
 6b0:	89 83       	std	Y+1, r24	; 0x01
 6b2:	9a 83       	std	Y+2, r25	; 0x02
 6b4:	ab 83       	std	Y+3, r26	; 0x03
 6b6:	bc 83       	std	Y+4, r27	; 0x04
 6b8:	8d 81       	ldd	r24, Y+5	; 0x05
 6ba:	9e 81       	ldd	r25, Y+6	; 0x06
 6bc:	01 96       	adiw	r24, 0x01	; 1
 6be:	9e 83       	std	Y+6, r25	; 0x06
 6c0:	8d 83       	std	Y+5, r24	; 0x05
 6c2:	8d 81       	ldd	r24, Y+5	; 0x05
 6c4:	9e 81       	ldd	r25, Y+6	; 0x06
 6c6:	04 97       	sbiw	r24, 0x04	; 4
 6c8:	0c f4       	brge	.+2      	; 0x6cc <RecallPasscode+0xbc>
 6ca:	b8 cf       	rjmp	.-144    	; 0x63c <RecallPasscode+0x2c>
 6cc:	89 81       	ldd	r24, Y+1	; 0x01
 6ce:	9a 81       	ldd	r25, Y+2	; 0x02
 6d0:	ab 81       	ldd	r26, Y+3	; 0x03
 6d2:	bc 81       	ldd	r27, Y+4	; 0x04
 6d4:	bc 01       	movw	r22, r24
 6d6:	cd 01       	movw	r24, r26
 6d8:	2b 96       	adiw	r28, 0x0b	; 11
 6da:	0f b6       	in	r0, 0x3f	; 63
 6dc:	f8 94       	cli
 6de:	de bf       	out	0x3e, r29	; 62
 6e0:	0f be       	out	0x3f, r0	; 63
 6e2:	cd bf       	out	0x3d, r28	; 61
 6e4:	df 91       	pop	r29
 6e6:	cf 91       	pop	r28
 6e8:	08 95       	ret

000006ea <initLEDs>:
// START FUNCTIONS

//****************************************************************************************
//	Initialise output LEDs - PORTB
void initLEDs(void)
{
 6ea:	cf 93       	push	r28
 6ec:	df 93       	push	r29
 6ee:	cd b7       	in	r28, 0x3d	; 61
 6f0:	de b7       	in	r29, 0x3e	; 62
	DDRB = 0xFF;		// Set all LEDs to outputs
 6f2:	87 e3       	ldi	r24, 0x37	; 55
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	2f ef       	ldi	r18, 0xFF	; 255
 6f8:	fc 01       	movw	r30, r24
 6fa:	20 83       	st	Z, r18
	PORTB = 0x00;		// Turn all LEDs off
 6fc:	88 e3       	ldi	r24, 0x38	; 56
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	fc 01       	movw	r30, r24
 702:	10 82       	st	Z, r1
}
 704:	00 00       	nop
 706:	df 91       	pop	r29
 708:	cf 91       	pop	r28
 70a:	08 95       	ret

0000070c <initKeypad>:


//****************************************************************************************
//	Initialise keypad - PORTC
void initKeypad(void)
{
 70c:	cf 93       	push	r28
 70e:	df 93       	push	r29
 710:	cd b7       	in	r28, 0x3d	; 61
 712:	de b7       	in	r29, 0x3e	; 62
	if(keypad3x4 == 1)
 714:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 718:	81 30       	cpi	r24, 0x01	; 1
 71a:	99 f4       	brne	.+38     	; 0x742 <initKeypad+0x36>
	{
		DDRC = 0x95;		// Set rows to inputs and columns to outputs
 71c:	84 e3       	ldi	r24, 0x34	; 52
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	25 e9       	ldi	r18, 0x95	; 149
 722:	fc 01       	movw	r30, r24
 724:	20 83       	st	Z, r18
		PORTC = 0x6A;		// Enable the pull-up resistors on the row inputs
 726:	85 e3       	ldi	r24, 0x35	; 53
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	2a e6       	ldi	r18, 0x6A	; 106
 72c:	fc 01       	movw	r30, r24
 72e:	20 83       	st	Z, r18
		PORTC = 0xFF;		// Set the columns to all on (idle state) & ensure pull-ups are still enabled
 730:	85 e3       	ldi	r24, 0x35	; 53
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	2f ef       	ldi	r18, 0xFF	; 255
 736:	fc 01       	movw	r30, r24
 738:	20 83       	st	Z, r18
		
		AmountOfColumns =3;
 73a:	83 e0       	ldi	r24, 0x03	; 3
 73c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <AmountOfColumns>
		PORTC = 0xFF;		// Set the columns to all on (idle state) & ensure pull-ups are still enabled
		
		AmountOfColumns =4;
	}

}
 740:	12 c0       	rjmp	.+36     	; 0x766 <initKeypad+0x5a>
		
		AmountOfColumns =3;
	}
	else
	{
		DDRC = 0xF0;		// Set rows to inputs and columns to outputs
 742:	84 e3       	ldi	r24, 0x34	; 52
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	20 ef       	ldi	r18, 0xF0	; 240
 748:	fc 01       	movw	r30, r24
 74a:	20 83       	st	Z, r18
		PORTC = 0x0F;		// Enable the pull-up resistors on the row inputs
 74c:	85 e3       	ldi	r24, 0x35	; 53
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	2f e0       	ldi	r18, 0x0F	; 15
 752:	fc 01       	movw	r30, r24
 754:	20 83       	st	Z, r18
		PORTC = 0xFF;		// Set the columns to all on (idle state) & ensure pull-ups are still enabled
 756:	85 e3       	ldi	r24, 0x35	; 53
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	2f ef       	ldi	r18, 0xFF	; 255
 75c:	fc 01       	movw	r30, r24
 75e:	20 83       	st	Z, r18
		
		AmountOfColumns =4;
 760:	84 e0       	ldi	r24, 0x04	; 4
 762:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <AmountOfColumns>
	}

}
 766:	00 00       	nop
 768:	df 91       	pop	r29
 76a:	cf 91       	pop	r28
 76c:	08 95       	ret

0000076e <initTimers>:


//****************************************************************************************
//Initialise Timers
void initTimers(void)
{
 76e:	cf 93       	push	r28
 770:	df 93       	push	r29
 772:	cd b7       	in	r28, 0x3d	; 61
 774:	de b7       	in	r29, 0x3e	; 62
	//set timer counter to 0
	TCNT0 = 0x00;
 776:	82 e5       	ldi	r24, 0x52	; 82
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	fc 01       	movw	r30, r24
 77c:	10 82       	st	Z, r1
	//set clock prescaler to divide by 1024
	TCCR0 |= (1<<CS00) | (0<<CS01) | (1<<CS02);
 77e:	83 e5       	ldi	r24, 0x53	; 83
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	23 e5       	ldi	r18, 0x53	; 83
 784:	30 e0       	ldi	r19, 0x00	; 0
 786:	f9 01       	movw	r30, r18
 788:	20 81       	ld	r18, Z
 78a:	25 60       	ori	r18, 0x05	; 5
 78c:	fc 01       	movw	r30, r24
 78e:	20 83       	st	Z, r18
}
 790:	00 00       	nop
 792:	df 91       	pop	r29
 794:	cf 91       	pop	r28
 796:	08 95       	ret

00000798 <ReadOne>:
// START FUNCTIONS

//**************************************************************************************************************************************************
// Function that checks if one key has been pressed 
unsigned char ReadOne() 
{
 798:	cf 93       	push	r28
 79a:	df 93       	push	r29
 79c:	00 d0       	rcall	.+0      	; 0x79e <ReadOne+0x6>
 79e:	cd b7       	in	r28, 0x3d	; 61
 7a0:	de b7       	in	r29, 0x3e	; 62
	// Set KeyPressed to 0
	KeyPressed = 0x00;
 7a2:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <KeyPressed>
	
	while(1)	//can get rid of while loop, it just keeps reading until a key is pressed instead of only reading once when its called
	{

		// Scanning column: write the column mask to port C
		for (uint8_t j=0; j<AmountOfColumns; j++)
 7a6:	19 82       	std	Y+1, r1	; 0x01
 7a8:	3f c0       	rjmp	.+126    	; 0x828 <ReadOne+0x90>
		{
			PORTC = col[j];			// Scan each column
 7aa:	85 e3       	ldi	r24, 0x35	; 53
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	29 81       	ldd	r18, Y+1	; 0x01
 7b0:	22 2f       	mov	r18, r18
 7b2:	30 e0       	ldi	r19, 0x00	; 0
 7b4:	2d 59       	subi	r18, 0x9D	; 157
 7b6:	3f 4f       	sbci	r19, 0xFF	; 255
 7b8:	f9 01       	movw	r30, r18
 7ba:	20 81       	ld	r18, Z
 7bc:	fc 01       	movw	r30, r24
 7be:	20 83       	st	Z, r18
			delay_ms(10);				// Delay for 0.01 sec
 7c0:	8a e0       	ldi	r24, 0x0A	; 10
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
			portCValue = PINC;			// Read port value from pinC
 7c8:	83 e3       	ldi	r24, 0x33	; 51
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	fc 01       	movw	r30, r24
 7ce:	80 81       	ld	r24, Z
 7d0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <portCValue>
		
			// Begin stepping through each column to check if row has logic 0
			if (portCValue != col[j])
 7d4:	89 81       	ldd	r24, Y+1	; 0x01
 7d6:	88 2f       	mov	r24, r24
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	8d 59       	subi	r24, 0x9D	; 157
 7dc:	9f 4f       	sbci	r25, 0xFF	; 255
 7de:	fc 01       	movw	r30, r24
 7e0:	90 81       	ld	r25, Z
 7e2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <portCValue>
 7e6:	98 17       	cp	r25, r24
 7e8:	e1 f0       	breq	.+56     	; 0x822 <ReadOne+0x8a>
			{
				//rebounce??
				//Step through each key
				for(uint8_t k = 0; k < 16; k++)
 7ea:	1a 82       	std	Y+2, r1	; 0x02
 7ec:	17 c0       	rjmp	.+46     	; 0x81c <ReadOne+0x84>
				{
					if(portCValue == Keys[k])
 7ee:	8a 81       	ldd	r24, Y+2	; 0x02
 7f0:	88 2f       	mov	r24, r24
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	89 59       	subi	r24, 0x99	; 153
 7f6:	9f 4f       	sbci	r25, 0xFF	; 255
 7f8:	fc 01       	movw	r30, r24
 7fa:	90 81       	ld	r25, Z
 7fc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <portCValue>
 800:	98 17       	cp	r25, r24
 802:	49 f4       	brne	.+18     	; 0x816 <ReadOne+0x7e>
					{
						key = k;
 804:	8a 81       	ldd	r24, Y+2	; 0x02
 806:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <key>
						//*portBPort = k;
						KeyPressed = 1;
 80a:	81 e0       	ldi	r24, 0x01	; 1
 80c:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <KeyPressed>
						//break;						//return here instead of break??
						return key;
 810:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <key>
 814:	10 c0       	rjmp	.+32     	; 0x836 <ReadOne+0x9e>
			// Begin stepping through each column to check if row has logic 0
			if (portCValue != col[j])
			{
				//rebounce??
				//Step through each key
				for(uint8_t k = 0; k < 16; k++)
 816:	8a 81       	ldd	r24, Y+2	; 0x02
 818:	8f 5f       	subi	r24, 0xFF	; 255
 81a:	8a 83       	std	Y+2, r24	; 0x02
 81c:	8a 81       	ldd	r24, Y+2	; 0x02
 81e:	80 31       	cpi	r24, 0x10	; 16
 820:	30 f3       	brcs	.-52     	; 0x7ee <ReadOne+0x56>
	
	while(1)	//can get rid of while loop, it just keeps reading until a key is pressed instead of only reading once when its called
	{

		// Scanning column: write the column mask to port C
		for (uint8_t j=0; j<AmountOfColumns; j++)
 822:	89 81       	ldd	r24, Y+1	; 0x01
 824:	8f 5f       	subi	r24, 0xFF	; 255
 826:	89 83       	std	Y+1, r24	; 0x01
 828:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <AmountOfColumns>
 82c:	99 81       	ldd	r25, Y+1	; 0x01
 82e:	98 17       	cp	r25, r24
 830:	08 f4       	brcc	.+2      	; 0x834 <ReadOne+0x9c>
 832:	bb cf       	rjmp	.-138    	; 0x7aa <ReadOne+0x12>
						return key;
					}		
				}
			}
		}
	}
 834:	b8 cf       	rjmp	.-144    	; 0x7a6 <ReadOne+0xe>
	return key;		//this should never execute
}
 836:	0f 90       	pop	r0
 838:	0f 90       	pop	r0
 83a:	df 91       	pop	r29
 83c:	cf 91       	pop	r28
 83e:	08 95       	ret

00000840 <ReadNone>:
//**************************************************************************************************************************************************

//**************************************************************************************************************************************************
//Check if key has been lifted. ie debounce?
void ReadNone (void)
{
 840:	cf 93       	push	r28
 842:	df 93       	push	r29
 844:	cd b7       	in	r28, 0x3d	; 61
 846:	de b7       	in	r29, 0x3e	; 62
	if(keypad3x4==1)
 848:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 84c:	81 30       	cpi	r24, 0x01	; 1
 84e:	69 f4       	brne	.+26     	; 0x86a <__stack+0xb>
	{
		while((PINC&0x6A)!=0x6A);	//exits when PINC inputs are all high 
 850:	00 00       	nop
 852:	83 e3       	ldi	r24, 0x33	; 51
 854:	90 e0       	ldi	r25, 0x00	; 0
 856:	fc 01       	movw	r30, r24
 858:	80 81       	ld	r24, Z
 85a:	88 2f       	mov	r24, r24
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	8a 76       	andi	r24, 0x6A	; 106
 860:	99 27       	eor	r25, r25
 862:	8a 36       	cpi	r24, 0x6A	; 106
 864:	91 05       	cpc	r25, r1
 866:	a9 f7       	brne	.-22     	; 0x852 <ReadNone+0x12>
	else
	{
		while((PINC&0x0F)!=0x0F);	//exits when PINC inputs are all high 
	}
	
}
 868:	0b c0       	rjmp	.+22     	; 0x880 <__stack+0x21>
	{
		while((PINC&0x6A)!=0x6A);	//exits when PINC inputs are all high 
	}
	else
	{
		while((PINC&0x0F)!=0x0F);	//exits when PINC inputs are all high 
 86a:	00 00       	nop
 86c:	83 e3       	ldi	r24, 0x33	; 51
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	fc 01       	movw	r30, r24
 872:	80 81       	ld	r24, Z
 874:	88 2f       	mov	r24, r24
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	8f 70       	andi	r24, 0x0F	; 15
 87a:	99 27       	eor	r25, r25
 87c:	0f 97       	sbiw	r24, 0x0f	; 15
 87e:	b1 f7       	brne	.-20     	; 0x86c <__stack+0xd>
	}
	
}
 880:	00 00       	nop
 882:	df 91       	pop	r29
 884:	cf 91       	pop	r28
 886:	08 95       	ret

00000888 <InputPasscode>:
//**************************************************************************************************************************************************

//**************************************************************************************************************************************************
//Combine 6-8 digits into a passcode
uint32_t InputPasscode (void)
{
 888:	0f 93       	push	r16
 88a:	1f 93       	push	r17
 88c:	cf 93       	push	r28
 88e:	df 93       	push	r29
 890:	cd b7       	in	r28, 0x3d	; 61
 892:	de b7       	in	r29, 0x3e	; 62
 894:	27 97       	sbiw	r28, 0x07	; 7
 896:	0f b6       	in	r0, 0x3f	; 63
 898:	f8 94       	cli
 89a:	de bf       	out	0x3e, r29	; 62
 89c:	0f be       	out	0x3f, r0	; 63
 89e:	cd bf       	out	0x3d, r28	; 61
	uint32_t passcode = 0;
 8a0:	19 82       	std	Y+1, r1	; 0x01
 8a2:	1a 82       	std	Y+2, r1	; 0x02
 8a4:	1b 82       	std	Y+3, r1	; 0x03
 8a6:	1c 82       	std	Y+4, r1	; 0x04
	for (int i =0; i<8; i++)
 8a8:	1e 82       	std	Y+6, r1	; 0x06
 8aa:	1d 82       	std	Y+5, r1	; 0x05
 8ac:	4d c0       	rjmp	.+154    	; 0x948 <InputPasscode+0xc0>
	{
		uint8_t keyValue = ReadOne();	//store digit pressed by user
 8ae:	0e 94 cc 03 	call	0x798	; 0x798 <ReadOne>
 8b2:	8f 83       	std	Y+7, r24	; 0x07
		
		if(keyValue==0xF)					//if # is pressed
 8b4:	8f 81       	ldd	r24, Y+7	; 0x07
 8b6:	8f 30       	cpi	r24, 0x0F	; 15
 8b8:	29 f4       	brne	.+10     	; 0x8c4 <InputPasscode+0x3c>
		{
			return passcode;
 8ba:	89 81       	ldd	r24, Y+1	; 0x01
 8bc:	9a 81       	ldd	r25, Y+2	; 0x02
 8be:	ab 81       	ldd	r26, Y+3	; 0x03
 8c0:	bc 81       	ldd	r27, Y+4	; 0x04
 8c2:	53 c0       	rjmp	.+166    	; 0x96a <InputPasscode+0xe2>
		}
		
		//check if key pressed is a digit
		if(isDigit(keyValue))
 8c4:	8f 81       	ldd	r24, Y+7	; 0x07
 8c6:	0e 94 d5 04 	call	0x9aa	; 0x9aa <isDigit>
 8ca:	88 23       	and	r24, r24
 8cc:	89 f1       	breq	.+98     	; 0x930 <InputPasscode+0xa8>
		{
			PORTB = displayKeys(keyValue);	// output key being pressed to LEDs
 8ce:	08 e3       	ldi	r16, 0x38	; 56
 8d0:	10 e0       	ldi	r17, 0x00	; 0
 8d2:	8f 81       	ldd	r24, Y+7	; 0x07
 8d4:	0e 94 ce 01 	call	0x39c	; 0x39c <displayKeys>
 8d8:	f8 01       	movw	r30, r16
 8da:	80 83       	st	Z, r24
			ReadNone();						//waits until finger is lifted off button
 8dc:	0e 94 20 04 	call	0x840	; 0x840 <ReadNone>
			PORTB = 0x00;
 8e0:	88 e3       	ldi	r24, 0x38	; 56
 8e2:	90 e0       	ldi	r25, 0x00	; 0
 8e4:	fc 01       	movw	r30, r24
 8e6:	10 82       	st	Z, r1
			
			passcode = passcode*10 + keyValue;	//add each digit into a long int
 8e8:	89 81       	ldd	r24, Y+1	; 0x01
 8ea:	9a 81       	ldd	r25, Y+2	; 0x02
 8ec:	ab 81       	ldd	r26, Y+3	; 0x03
 8ee:	bc 81       	ldd	r27, Y+4	; 0x04
 8f0:	88 0f       	add	r24, r24
 8f2:	99 1f       	adc	r25, r25
 8f4:	aa 1f       	adc	r26, r26
 8f6:	bb 1f       	adc	r27, r27
 8f8:	9c 01       	movw	r18, r24
 8fa:	ad 01       	movw	r20, r26
 8fc:	22 0f       	add	r18, r18
 8fe:	33 1f       	adc	r19, r19
 900:	44 1f       	adc	r20, r20
 902:	55 1f       	adc	r21, r21
 904:	22 0f       	add	r18, r18
 906:	33 1f       	adc	r19, r19
 908:	44 1f       	adc	r20, r20
 90a:	55 1f       	adc	r21, r21
 90c:	28 0f       	add	r18, r24
 90e:	39 1f       	adc	r19, r25
 910:	4a 1f       	adc	r20, r26
 912:	5b 1f       	adc	r21, r27
 914:	8f 81       	ldd	r24, Y+7	; 0x07
 916:	88 2f       	mov	r24, r24
 918:	90 e0       	ldi	r25, 0x00	; 0
 91a:	a0 e0       	ldi	r26, 0x00	; 0
 91c:	b0 e0       	ldi	r27, 0x00	; 0
 91e:	82 0f       	add	r24, r18
 920:	93 1f       	adc	r25, r19
 922:	a4 1f       	adc	r26, r20
 924:	b5 1f       	adc	r27, r21
 926:	89 83       	std	Y+1, r24	; 0x01
 928:	9a 83       	std	Y+2, r25	; 0x02
 92a:	ab 83       	std	Y+3, r26	; 0x03
 92c:	bc 83       	std	Y+4, r27	; 0x04
 92e:	07 c0       	rjmp	.+14     	; 0x93e <InputPasscode+0xb6>
		}
		else
		{
			//not a valid input
			i--;		//dont increment length counter if not valid
 930:	8d 81       	ldd	r24, Y+5	; 0x05
 932:	9e 81       	ldd	r25, Y+6	; 0x06
 934:	01 97       	sbiw	r24, 0x01	; 1
 936:	9e 83       	std	Y+6, r25	; 0x06
 938:	8d 83       	std	Y+5, r24	; 0x05
			displayIncorrect();
 93a:	0e 94 a6 01 	call	0x34c	; 0x34c <displayIncorrect>
//**************************************************************************************************************************************************
//Combine 6-8 digits into a passcode
uint32_t InputPasscode (void)
{
	uint32_t passcode = 0;
	for (int i =0; i<8; i++)
 93e:	8d 81       	ldd	r24, Y+5	; 0x05
 940:	9e 81       	ldd	r25, Y+6	; 0x06
 942:	01 96       	adiw	r24, 0x01	; 1
 944:	9e 83       	std	Y+6, r25	; 0x06
 946:	8d 83       	std	Y+5, r24	; 0x05
 948:	8d 81       	ldd	r24, Y+5	; 0x05
 94a:	9e 81       	ldd	r25, Y+6	; 0x06
 94c:	08 97       	sbiw	r24, 0x08	; 8
 94e:	0c f4       	brge	.+2      	; 0x952 <InputPasscode+0xca>
 950:	ae cf       	rjmp	.-164    	; 0x8ae <InputPasscode+0x26>
	}
	/*
	while(!(ReadOne()==0xF));		//wait until reads a *
	return passcode	; */
	
	if((ReadOne()==0xF))		//if next key is a #
 952:	0e 94 cc 03 	call	0x798	; 0x798 <ReadOne>
 956:	8f 30       	cpi	r24, 0x0F	; 15
 958:	29 f4       	brne	.+10     	; 0x964 <InputPasscode+0xdc>
	{
		return passcode	;
 95a:	89 81       	ldd	r24, Y+1	; 0x01
 95c:	9a 81       	ldd	r25, Y+2	; 0x02
 95e:	ab 81       	ldd	r26, Y+3	; 0x03
 960:	bc 81       	ldd	r27, Y+4	; 0x04
 962:	03 c0       	rjmp	.+6      	; 0x96a <InputPasscode+0xe2>
	}
	else
	{
		return 0;
 964:	80 e0       	ldi	r24, 0x00	; 0
 966:	90 e0       	ldi	r25, 0x00	; 0
 968:	dc 01       	movw	r26, r24
	}	
}
 96a:	bc 01       	movw	r22, r24
 96c:	cd 01       	movw	r24, r26
 96e:	27 96       	adiw	r28, 0x07	; 7
 970:	0f b6       	in	r0, 0x3f	; 63
 972:	f8 94       	cli
 974:	de bf       	out	0x3e, r29	; 62
 976:	0f be       	out	0x3f, r0	; 63
 978:	cd bf       	out	0x3d, r28	; 61
 97a:	df 91       	pop	r29
 97c:	cf 91       	pop	r28
 97e:	1f 91       	pop	r17
 980:	0f 91       	pop	r16
 982:	08 95       	ret

00000984 <isUser>:
//**************************************************************************************************************************************************

//**************************************************************************************************************************************************
//is the input a letter, a,b,c, or d. returns 1 if a valid user code
uint8_t isUser (uint8_t buttonPressed)
{
 984:	cf 93       	push	r28
 986:	df 93       	push	r29
 988:	1f 92       	push	r1
 98a:	cd b7       	in	r28, 0x3d	; 61
 98c:	de b7       	in	r29, 0x3e	; 62
 98e:	89 83       	std	Y+1, r24	; 0x01
	switch(buttonPressed)
 990:	89 81       	ldd	r24, Y+1	; 0x01
 992:	88 2f       	mov	r24, r24
 994:	90 e0       	ldi	r25, 0x00	; 0
 996:	0a 97       	sbiw	r24, 0x0a	; 10
 998:	04 97       	sbiw	r24, 0x04	; 4
 99a:	10 f4       	brcc	.+4      	; 0x9a0 <isUser+0x1c>
	{
		case 0x0A:
		case 0x0B:
		case 0x0C:
		case 0x0D:
		return 1;
 99c:	81 e0       	ldi	r24, 0x01	; 1
 99e:	01 c0       	rjmp	.+2      	; 0x9a2 <isUser+0x1e>
		
		default:	//invalid user code		Set some debug flag here
		return 0;
 9a0:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 9a2:	0f 90       	pop	r0
 9a4:	df 91       	pop	r29
 9a6:	cf 91       	pop	r28
 9a8:	08 95       	ret

000009aa <isDigit>:
//**************************************************************************************************************************************************

//**************************************************************************************************************************************************
//is the user input a digit. returns 1 if value is a digit
uint8_t isDigit (uint8_t buttonPressed)
{
 9aa:	cf 93       	push	r28
 9ac:	df 93       	push	r29
 9ae:	1f 92       	push	r1
 9b0:	cd b7       	in	r28, 0x3d	; 61
 9b2:	de b7       	in	r29, 0x3e	; 62
 9b4:	89 83       	std	Y+1, r24	; 0x01
	switch(buttonPressed)
 9b6:	89 81       	ldd	r24, Y+1	; 0x01
 9b8:	88 2f       	mov	r24, r24
 9ba:	90 e0       	ldi	r25, 0x00	; 0
 9bc:	0a 97       	sbiw	r24, 0x0a	; 10
 9be:	10 f4       	brcc	.+4      	; 0x9c4 <isDigit+0x1a>
		case 0x05:
		case 0x06:
		case 0x07:
		case 0x08:
		case 0x09:
		return 1;
 9c0:	81 e0       	ldi	r24, 0x01	; 1
 9c2:	01 c0       	rjmp	.+2      	; 0x9c6 <isDigit+0x1c>
		
		default:	//invalid user code		Set some debug flag here
		return 0;
 9c4:	80 e0       	ldi	r24, 0x00	; 0
	}
 9c6:	0f 90       	pop	r0
 9c8:	df 91       	pop	r29
 9ca:	cf 91       	pop	r28
 9cc:	08 95       	ret

000009ce <main>:

// Global variables
uint8_t debugCode = 0;

int main(void)
{
 9ce:	cf 93       	push	r28
 9d0:	df 93       	push	r29
 9d2:	cd b7       	in	r28, 0x3d	; 61
 9d4:	de b7       	in	r29, 0x3e	; 62
 9d6:	27 97       	sbiw	r28, 0x07	; 7
 9d8:	0f b6       	in	r0, 0x3f	; 63
 9da:	f8 94       	cli
 9dc:	de bf       	out	0x3e, r29	; 62
 9de:	0f be       	out	0x3f, r0	; 63
 9e0:	cd bf       	out	0x3d, r28	; 61
	// Initialise everything
    initTimers();
 9e2:	0e 94 b7 03 	call	0x76e	; 0x76e <initTimers>
	initLEDs();
 9e6:	0e 94 75 03 	call	0x6ea	; 0x6ea <initLEDs>
	initKeypad();
 9ea:	0e 94 86 03 	call	0x70c	; 0x70c <initKeypad>


	// Start infinite loop
    while (1) 
    {
		for (int i = 0; i < 4; i++)	
 9ee:	1a 82       	std	Y+2, r1	; 0x02
 9f0:	19 82       	std	Y+1, r1	; 0x01
 9f2:	53 c0       	rjmp	.+166    	; 0xa9a <main+0xcc>
		{
			uint8_t attempts = 0;		// Set number of attempts to 0
 9f4:	1b 82       	std	Y+3, r1	; 0x03
			if (ReadOne() == 0x0A+i)	// Check if user A B C or D is chosen
 9f6:	0e 94 cc 03 	call	0x798	; 0x798 <ReadOne>
 9fa:	28 2f       	mov	r18, r24
 9fc:	30 e0       	ldi	r19, 0x00	; 0
 9fe:	89 81       	ldd	r24, Y+1	; 0x01
 a00:	9a 81       	ldd	r25, Y+2	; 0x02
 a02:	0a 96       	adiw	r24, 0x0a	; 10
 a04:	28 17       	cp	r18, r24
 a06:	39 07       	cpc	r19, r25
 a08:	71 f5       	brne	.+92     	; 0xa66 <main+0x98>
			{
				while (attempts < 3)	// Ensure number of passcode attempts < 3
 a0a:	27 c0       	rjmp	.+78     	; 0xa5a <main+0x8c>
				{
					uint32_t attemptPasscode = InputPasscode();		// Read the passcode from the keypad
 a0c:	0e 94 44 04 	call	0x888	; 0x888 <InputPasscode>
 a10:	dc 01       	movw	r26, r24
 a12:	cb 01       	movw	r24, r22
 a14:	8c 83       	std	Y+4, r24	; 0x04
 a16:	9d 83       	std	Y+5, r25	; 0x05
 a18:	ae 83       	std	Y+6, r26	; 0x06
 a1a:	bf 83       	std	Y+7, r27	; 0x07
					if (RecallPasscode(0x0A+i) == attemptPasscode)	// If the attempted passcode is equal to the stored passcode, UNLOCK
 a1c:	89 81       	ldd	r24, Y+1	; 0x01
 a1e:	86 5f       	subi	r24, 0xF6	; 246
 a20:	0e 94 08 03 	call	0x610	; 0x610 <RecallPasscode>
 a24:	9b 01       	movw	r18, r22
 a26:	ac 01       	movw	r20, r24
 a28:	8c 81       	ldd	r24, Y+4	; 0x04
 a2a:	9d 81       	ldd	r25, Y+5	; 0x05
 a2c:	ae 81       	ldd	r26, Y+6	; 0x06
 a2e:	bf 81       	ldd	r27, Y+7	; 0x07
 a30:	28 17       	cp	r18, r24
 a32:	39 07       	cpc	r19, r25
 a34:	4a 07       	cpc	r20, r26
 a36:	5b 07       	cpc	r21, r27
 a38:	39 f4       	brne	.+14     	; 0xa48 <main+0x7a>
					{
						delay_ms(100);
 a3a:	84 e6       	ldi	r24, 0x64	; 100
 a3c:	90 e0       	ldi	r25, 0x00	; 0
 a3e:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
						displayUnlock();
 a42:	0e 94 f7 00 	call	0x1ee	; 0x1ee <displayUnlock>
 a46:	09 c0       	rjmp	.+18     	; 0xa5a <main+0x8c>
					}
					else		// If incorrect, display LOCK 
					{
						delay_ms(100);
 a48:	84 e6       	ldi	r24, 0x64	; 100
 a4a:	90 e0       	ldi	r25, 0x00	; 0
 a4c:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
						displayLock();
 a50:	0e 94 4e 01 	call	0x29c	; 0x29c <displayLock>
						attempts = attempts + 1;	// Increment number of attempts by 1
 a54:	8b 81       	ldd	r24, Y+3	; 0x03
 a56:	8f 5f       	subi	r24, 0xFF	; 255
 a58:	8b 83       	std	Y+3, r24	; 0x03
		for (int i = 0; i < 4; i++)	
		{
			uint8_t attempts = 0;		// Set number of attempts to 0
			if (ReadOne() == 0x0A+i)	// Check if user A B C or D is chosen
			{
				while (attempts < 3)	// Ensure number of passcode attempts < 3
 a5a:	8b 81       	ldd	r24, Y+3	; 0x03
 a5c:	83 30       	cpi	r24, 0x03	; 3
 a5e:	b0 f2       	brcs	.-84     	; 0xa0c <main+0x3e>
						displayLock();
						attempts = attempts + 1;	// Increment number of attempts by 1
					}
				}
				// LOCKOUT when number of attempts is more than 3
				lockoutMode();
 a60:	0e 94 0c 02 	call	0x418	; 0x418 <lockoutMode>
 a64:	15 c0       	rjmp	.+42     	; 0xa90 <main+0xc2>
			}//
			
			
			else if (ReadOne() == 0x0E)		// If the * is pressed
 a66:	0e 94 cc 03 	call	0x798	; 0x798 <ReadOne>
 a6a:	8e 30       	cpi	r24, 0x0E	; 14
 a6c:	59 f4       	brne	.+22     	; 0xa84 <main+0xb6>
			{
				delay_sec(5);				// Wait 5 seconds
 a6e:	85 e0       	ldi	r24, 0x05	; 5
 a70:	90 e0       	ldi	r25, 0x00	; 0
 a72:	0e 94 9b 00 	call	0x136	; 0x136 <delay_sec>
				if (ReadOne() == 0x0E)		// If the * is still pressed (been held down for 5 seconds?)
 a76:	0e 94 cc 03 	call	0x798	; 0x798 <ReadOne>
 a7a:	8e 30       	cpi	r24, 0x0E	; 14
 a7c:	49 f4       	brne	.+18     	; 0xa90 <main+0xc2>
				{
					// ENTER PROGRAMMING MODE - check for which user is pressed
					ProgramMode();
 a7e:	0e 94 53 05 	call	0xaa6	; 0xaa6 <ProgramMode>
 a82:	06 c0       	rjmp	.+12     	; 0xa90 <main+0xc2>
				}
			}
			
			else // If any other key is pressed
			{
				delay_ms(100);
 a84:	84 e6       	ldi	r24, 0x64	; 100
 a86:	90 e0       	ldi	r25, 0x00	; 0
 a88:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
				displayLock();
 a8c:	0e 94 4e 01 	call	0x29c	; 0x29c <displayLock>


	// Start infinite loop
    while (1) 
    {
		for (int i = 0; i < 4; i++)	
 a90:	89 81       	ldd	r24, Y+1	; 0x01
 a92:	9a 81       	ldd	r25, Y+2	; 0x02
 a94:	01 96       	adiw	r24, 0x01	; 1
 a96:	9a 83       	std	Y+2, r25	; 0x02
 a98:	89 83       	std	Y+1, r24	; 0x01
 a9a:	89 81       	ldd	r24, Y+1	; 0x01
 a9c:	9a 81       	ldd	r25, Y+2	; 0x02
 a9e:	04 97       	sbiw	r24, 0x04	; 4
 aa0:	0c f4       	brge	.+2      	; 0xaa4 <main+0xd6>
 aa2:	a8 cf       	rjmp	.-176    	; 0x9f4 <main+0x26>
			{
				delay_ms(100);
				displayLock();
			}
		}		
    }
 aa4:	a4 cf       	rjmp	.-184    	; 0x9ee <main+0x20>

00000aa6 <ProgramMode>:

}


void ProgramMode(void)
{
 aa6:	0f 93       	push	r16
 aa8:	1f 93       	push	r17
 aaa:	cf 93       	push	r28
 aac:	df 93       	push	r29
 aae:	cd b7       	in	r28, 0x3d	; 61
 ab0:	de b7       	in	r29, 0x3e	; 62
 ab2:	27 97       	sbiw	r28, 0x07	; 7
 ab4:	0f b6       	in	r0, 0x3f	; 63
 ab6:	f8 94       	cli
 ab8:	de bf       	out	0x3e, r29	; 62
 aba:	0f be       	out	0x3f, r0	; 63
 abc:	cd bf       	out	0x3d, r28	; 61
	// ENTER PROGRAMMING MODE - check for which user is pressed
	for (int i = 0; i < 4; i++)
 abe:	1a 82       	std	Y+2, r1	; 0x02
 ac0:	19 82       	std	Y+1, r1	; 0x01
 ac2:	56 c0       	rjmp	.+172    	; 0xb70 <ProgramMode+0xca>
	{
		uint8_t attempts = 0;
 ac4:	1b 82       	std	Y+3, r1	; 0x03
		if (ReadOne() == 0x0A+i)	// Check if user A B C or D is chosen
 ac6:	0e 94 cc 03 	call	0x798	; 0x798 <ReadOne>
 aca:	28 2f       	mov	r18, r24
 acc:	30 e0       	ldi	r19, 0x00	; 0
 ace:	89 81       	ldd	r24, Y+1	; 0x01
 ad0:	9a 81       	ldd	r25, Y+2	; 0x02
 ad2:	0a 96       	adiw	r24, 0x0a	; 10
 ad4:	28 17       	cp	r18, r24
 ad6:	39 07       	cpc	r19, r25
 ad8:	09 f0       	breq	.+2      	; 0xadc <ProgramMode+0x36>
 ada:	3f c0       	rjmp	.+126    	; 0xb5a <ProgramMode+0xb4>
		{
			while (attempts < 3)
 adc:	38 c0       	rjmp	.+112    	; 0xb4e <ProgramMode+0xa8>
			{
				uint32_t attemptPasscode = InputPasscode();		// Read the passcode from the keypad
 ade:	0e 94 44 04 	call	0x888	; 0x888 <InputPasscode>
 ae2:	dc 01       	movw	r26, r24
 ae4:	cb 01       	movw	r24, r22
 ae6:	8c 83       	std	Y+4, r24	; 0x04
 ae8:	9d 83       	std	Y+5, r25	; 0x05
 aea:	ae 83       	std	Y+6, r26	; 0x06
 aec:	bf 83       	std	Y+7, r27	; 0x07
				if (RecallPasscode(0x0A+i) == attemptPasscode)	// If the attempted passcode is equal to the stored passcode, UNLOCK
 aee:	89 81       	ldd	r24, Y+1	; 0x01
 af0:	9a 81       	ldd	r25, Y+2	; 0x02
 af2:	0a 96       	adiw	r24, 0x0a	; 10
 af4:	0e 94 08 03 	call	0x610	; 0x610 <RecallPasscode>
 af8:	9c 01       	movw	r18, r24
 afa:	99 0f       	add	r25, r25
 afc:	44 0b       	sbc	r20, r20
 afe:	55 0b       	sbc	r21, r21
 b00:	8c 81       	ldd	r24, Y+4	; 0x04
 b02:	9d 81       	ldd	r25, Y+5	; 0x05
 b04:	ae 81       	ldd	r26, Y+6	; 0x06
 b06:	bf 81       	ldd	r27, Y+7	; 0x07
 b08:	28 17       	cp	r18, r24
 b0a:	39 07       	cpc	r19, r25
 b0c:	4a 07       	cpc	r20, r26
 b0e:	5b 07       	cpc	r21, r27
 b10:	a9 f4       	brne	.+42     	; 0xb3c <ProgramMode+0x96>
				{
					delay_ms(100);
 b12:	84 e6       	ldi	r24, 0x64	; 100
 b14:	90 e0       	ldi	r25, 0x00	; 0
 b16:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
					displayUnlock();
 b1a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <displayUnlock>
					// Set new passcode
					storePasscode(InputPasscode(), 0xA+i);		//stores the password 12345678 into user slot A
 b1e:	89 81       	ldd	r24, Y+1	; 0x01
 b20:	9a 81       	ldd	r25, Y+2	; 0x02
 b22:	8c 01       	movw	r16, r24
 b24:	06 5f       	subi	r16, 0xF6	; 246
 b26:	1f 4f       	sbci	r17, 0xFF	; 255
 b28:	0e 94 44 04 	call	0x888	; 0x888 <InputPasscode>
 b2c:	dc 01       	movw	r26, r24
 b2e:	cb 01       	movw	r24, r22
 b30:	a8 01       	movw	r20, r16
 b32:	bc 01       	movw	r22, r24
 b34:	cd 01       	movw	r24, r26
 b36:	0e 94 80 02 	call	0x500	; 0x500 <storePasscode>
 b3a:	09 c0       	rjmp	.+18     	; 0xb4e <ProgramMode+0xa8>
				}
				else
				{
					delay_ms(100);
 b3c:	84 e6       	ldi	r24, 0x64	; 100
 b3e:	90 e0       	ldi	r25, 0x00	; 0
 b40:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
					displayLock();
 b44:	0e 94 4e 01 	call	0x29c	; 0x29c <displayLock>
					attempts = attempts + 1;
 b48:	8b 81       	ldd	r24, Y+3	; 0x03
 b4a:	8f 5f       	subi	r24, 0xFF	; 255
 b4c:	8b 83       	std	Y+3, r24	; 0x03
	for (int i = 0; i < 4; i++)
	{
		uint8_t attempts = 0;
		if (ReadOne() == 0x0A+i)	// Check if user A B C or D is chosen
		{
			while (attempts < 3)
 b4e:	8b 81       	ldd	r24, Y+3	; 0x03
 b50:	83 30       	cpi	r24, 0x03	; 3
 b52:	28 f2       	brcs	.-118    	; 0xade <ProgramMode+0x38>
					displayLock();
					attempts = attempts + 1;
				}
			}
			// LOCKOUT when number of attempts is more than 3
			lockoutMode();
 b54:	0e 94 0c 02 	call	0x418	; 0x418 <lockoutMode>
 b58:	06 c0       	rjmp	.+12     	; 0xb66 <ProgramMode+0xc0>
		}
		else
		{
			delay_ms(100);
 b5a:	84 e6       	ldi	r24, 0x64	; 100
 b5c:	90 e0       	ldi	r25, 0x00	; 0
 b5e:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
			displayLock();
 b62:	0e 94 4e 01 	call	0x29c	; 0x29c <displayLock>


void ProgramMode(void)
{
	// ENTER PROGRAMMING MODE - check for which user is pressed
	for (int i = 0; i < 4; i++)
 b66:	89 81       	ldd	r24, Y+1	; 0x01
 b68:	9a 81       	ldd	r25, Y+2	; 0x02
 b6a:	01 96       	adiw	r24, 0x01	; 1
 b6c:	9a 83       	std	Y+2, r25	; 0x02
 b6e:	89 83       	std	Y+1, r24	; 0x01
 b70:	89 81       	ldd	r24, Y+1	; 0x01
 b72:	9a 81       	ldd	r25, Y+2	; 0x02
 b74:	04 97       	sbiw	r24, 0x04	; 4
 b76:	0c f4       	brge	.+2      	; 0xb7a <ProgramMode+0xd4>
 b78:	a5 cf       	rjmp	.-182    	; 0xac4 <ProgramMode+0x1e>
		{
			delay_ms(100);
			displayLock();
		}
	}
 b7a:	00 00       	nop
 b7c:	27 96       	adiw	r28, 0x07	; 7
 b7e:	0f b6       	in	r0, 0x3f	; 63
 b80:	f8 94       	cli
 b82:	de bf       	out	0x3e, r29	; 62
 b84:	0f be       	out	0x3f, r0	; 63
 b86:	cd bf       	out	0x3d, r28	; 61
 b88:	df 91       	pop	r29
 b8a:	cf 91       	pop	r28
 b8c:	1f 91       	pop	r17
 b8e:	0f 91       	pop	r16
 b90:	08 95       	ret

00000b92 <__tablejump2__>:
 b92:	ee 0f       	add	r30, r30
 b94:	ff 1f       	adc	r31, r31
 b96:	05 90       	lpm	r0, Z+
 b98:	f4 91       	lpm	r31, Z
 b9a:	e0 2d       	mov	r30, r0
 b9c:	09 94       	ijmp

00000b9e <__muluhisi3>:
 b9e:	0e 94 da 05 	call	0xbb4	; 0xbb4 <__umulhisi3>
 ba2:	a5 9f       	mul	r26, r21
 ba4:	90 0d       	add	r25, r0
 ba6:	b4 9f       	mul	r27, r20
 ba8:	90 0d       	add	r25, r0
 baa:	a4 9f       	mul	r26, r20
 bac:	80 0d       	add	r24, r0
 bae:	91 1d       	adc	r25, r1
 bb0:	11 24       	eor	r1, r1
 bb2:	08 95       	ret

00000bb4 <__umulhisi3>:
 bb4:	a2 9f       	mul	r26, r18
 bb6:	b0 01       	movw	r22, r0
 bb8:	b3 9f       	mul	r27, r19
 bba:	c0 01       	movw	r24, r0
 bbc:	a3 9f       	mul	r26, r19
 bbe:	70 0d       	add	r23, r0
 bc0:	81 1d       	adc	r24, r1
 bc2:	11 24       	eor	r1, r1
 bc4:	91 1d       	adc	r25, r1
 bc6:	b2 9f       	mul	r27, r18
 bc8:	70 0d       	add	r23, r0
 bca:	81 1d       	adc	r24, r1
 bcc:	11 24       	eor	r1, r1
 bce:	91 1d       	adc	r25, r1
 bd0:	08 95       	ret

00000bd2 <_exit>:
 bd2:	f8 94       	cli

00000bd4 <__stop_program>:
 bd4:	ff cf       	rjmp	.-2      	; 0xbd4 <__stop_program>
