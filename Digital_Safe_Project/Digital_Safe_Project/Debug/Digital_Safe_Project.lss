
Digital_Safe_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00000c2e  00000cc2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800076  00800076  00000cd8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cd8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d08  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00000d44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ef1  00000000  00000000  00000eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009a4  00000000  00000000  00001da5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dde  00000000  00000000  00002749  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b8  00000000  00000000  00003528  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000564  00000000  00000000  000038e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006d1  00000000  00000000  00003e44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00004515  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	f9 01       	movw	r30, r18
  56:	fb 01       	movw	r30, r22
  58:	fd 01       	movw	r30, r26
  5a:	ff 01       	movw	r30, r30
  5c:	01 02       	muls	r16, r17
  5e:	03 02       	muls	r16, r19
  60:	05 02       	muls	r16, r21
  62:	07 02       	muls	r16, r23
  64:	09 02       	muls	r16, r25
  66:	0b 02       	muls	r16, r27
  68:	0f 02       	muls	r16, r31
  6a:	11 02       	muls	r17, r17
  6c:	13 02       	muls	r17, r19
  6e:	15 02       	muls	r17, r21
  70:	17 02       	muls	r17, r23
  72:	17 02       	muls	r17, r23
  74:	0d 02       	muls	r16, r29

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf e5       	ldi	r28, 0x5F	; 95
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
  82:	10 e0       	ldi	r17, 0x00	; 0
  84:	a0 e6       	ldi	r26, 0x60	; 96
  86:	b0 e0       	ldi	r27, 0x00	; 0
  88:	ee e2       	ldi	r30, 0x2E	; 46
  8a:	fc e0       	ldi	r31, 0x0C	; 12
  8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
  8e:	05 90       	lpm	r0, Z+
  90:	0d 92       	st	X+, r0
  92:	a6 37       	cpi	r26, 0x76	; 118
  94:	b1 07       	cpc	r27, r17
  96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
  98:	20 e0       	ldi	r18, 0x00	; 0
  9a:	a6 e7       	ldi	r26, 0x76	; 118
  9c:	b0 e0       	ldi	r27, 0x00	; 0
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	aa 37       	cpi	r26, 0x7A	; 122
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 2c 05 	call	0xa58	; 0xa58 <main>
  ac:	0c 94 15 06 	jmp	0xc2a	; 0xc2a <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <delay_ms>:


// ****************************************************************************************
//Timer with minimum time of 0.001 seconds ie 1ms, max time of 65sec
void delay_ms(uint16_t delayTime)
{
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	00 d0       	rcall	.+0      	; 0xba <delay_ms+0x6>
  ba:	00 d0       	rcall	.+0      	; 0xbc <delay_ms+0x8>
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
  c0:	9c 83       	std	Y+4, r25	; 0x04
  c2:	8b 83       	std	Y+3, r24	; 0x03
	//12MHz divided by 1024 is 11.718KHz, or clock time of 85.3micro seconds
	//multiplied by 12 gives 0.001024 seconds
	
	TCNT0 = 0x00;		//reset timer to 0
  c4:	82 e5       	ldi	r24, 0x52	; 82
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	fc 01       	movw	r30, r24
  ca:	10 82       	st	Z, r1
	OCR0 = 12;			//set compare register 
  cc:	8c e5       	ldi	r24, 0x5C	; 92
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	2c e0       	ldi	r18, 0x0C	; 12
  d2:	fc 01       	movw	r30, r24
  d4:	20 83       	st	Z, r18
	TIFR = (1<<OCF0);	//reset compare flag
  d6:	88 e5       	ldi	r24, 0x58	; 88
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	22 e0       	ldi	r18, 0x02	; 2
  dc:	fc 01       	movw	r30, r24
  de:	20 83       	st	Z, r18
	
	uint16_t overflowCounter = 0;
  e0:	1a 82       	std	Y+2, r1	; 0x02
  e2:	19 82       	std	Y+1, r1	; 0x01
	
	while (1)
	{
		while((TIFR & (1<<OCF0))==0); //while OCF0, overflow flag is 0
  e4:	00 00       	nop
  e6:	88 e5       	ldi	r24, 0x58	; 88
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	fc 01       	movw	r30, r24
  ec:	80 81       	ld	r24, Z
  ee:	88 2f       	mov	r24, r24
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	82 70       	andi	r24, 0x02	; 2
  f4:	99 27       	eor	r25, r25
  f6:	89 2b       	or	r24, r25
  f8:	b1 f3       	breq	.-20     	; 0xe6 <delay_ms+0x32>
		TCNT0 = 0x00;		//reset timer to 0
  fa:	82 e5       	ldi	r24, 0x52	; 82
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	fc 01       	movw	r30, r24
 100:	10 82       	st	Z, r1
		TIFR = (1<<OCF0); //reset compare flag
 102:	88 e5       	ldi	r24, 0x58	; 88
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	22 e0       	ldi	r18, 0x02	; 2
 108:	fc 01       	movw	r30, r24
 10a:	20 83       	st	Z, r18
		overflowCounter++;
 10c:	89 81       	ldd	r24, Y+1	; 0x01
 10e:	9a 81       	ldd	r25, Y+2	; 0x02
 110:	01 96       	adiw	r24, 0x01	; 1
 112:	9a 83       	std	Y+2, r25	; 0x02
 114:	89 83       	std	Y+1, r24	; 0x01
		if (overflowCounter >= delayTime)
 116:	29 81       	ldd	r18, Y+1	; 0x01
 118:	3a 81       	ldd	r19, Y+2	; 0x02
 11a:	8b 81       	ldd	r24, Y+3	; 0x03
 11c:	9c 81       	ldd	r25, Y+4	; 0x04
 11e:	28 17       	cp	r18, r24
 120:	39 07       	cpc	r19, r25
 122:	08 f4       	brcc	.+2      	; 0x126 <delay_ms+0x72>
		{
			return;
		}
	}	
 124:	df cf       	rjmp	.-66     	; 0xe4 <delay_ms+0x30>
		TCNT0 = 0x00;		//reset timer to 0
		TIFR = (1<<OCF0); //reset compare flag
		overflowCounter++;
		if (overflowCounter >= delayTime)
		{
			return;
 126:	00 00       	nop
		}
	}	
}
 128:	0f 90       	pop	r0
 12a:	0f 90       	pop	r0
 12c:	0f 90       	pop	r0
 12e:	0f 90       	pop	r0
 130:	df 91       	pop	r29
 132:	cf 91       	pop	r28
 134:	08 95       	ret

00000136 <delay_sec>:
// ****************************************************************************************

// ****************************************************************************************
//Timer with minimum time of 1 second, max time of 18hours
void delay_sec(uint16_t delayTime)
{
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	00 d0       	rcall	.+0      	; 0x13c <delay_sec+0x6>
 13c:	00 d0       	rcall	.+0      	; 0x13e <delay_sec+0x8>
 13e:	cd b7       	in	r28, 0x3d	; 61
 140:	de b7       	in	r29, 0x3e	; 62
 142:	9c 83       	std	Y+4, r25	; 0x04
 144:	8b 83       	std	Y+3, r24	; 0x03
	//delayTime = delayTime * 1000;
	//12MHz divided by 1024 is 11.718KHz, or clock time of 85.3micro seconds
	//multiplied by 11719 gives 1.00002 seconds
	
	TCNT1 = 0x0000;		//reset timer to 0
 146:	8c e4       	ldi	r24, 0x4C	; 76
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	fc 01       	movw	r30, r24
 14c:	11 82       	std	Z+1, r1	; 0x01
 14e:	10 82       	st	Z, r1
	OCR1A = 11719;			//set compare register 
 150:	8a e4       	ldi	r24, 0x4A	; 74
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	27 ec       	ldi	r18, 0xC7	; 199
 156:	3d e2       	ldi	r19, 0x2D	; 45
 158:	fc 01       	movw	r30, r24
 15a:	31 83       	std	Z+1, r19	; 0x01
 15c:	20 83       	st	Z, r18
	TIFR = (1<<OCF0);	//reset compare flag
 15e:	88 e5       	ldi	r24, 0x58	; 88
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	22 e0       	ldi	r18, 0x02	; 2
 164:	fc 01       	movw	r30, r24
 166:	20 83       	st	Z, r18
	
	uint16_t overflowCounter = 0;
 168:	1a 82       	std	Y+2, r1	; 0x02
 16a:	19 82       	std	Y+1, r1	; 0x01
	
	while (1)
	{
		while((TIFR & (1<<OCF1A))==0); //while OCF0, overflow flag is 0
 16c:	00 00       	nop
 16e:	88 e5       	ldi	r24, 0x58	; 88
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	fc 01       	movw	r30, r24
 174:	80 81       	ld	r24, Z
 176:	88 2f       	mov	r24, r24
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	80 71       	andi	r24, 0x10	; 16
 17c:	99 27       	eor	r25, r25
 17e:	89 2b       	or	r24, r25
 180:	b1 f3       	breq	.-20     	; 0x16e <delay_sec+0x38>
		TCNT0 = 0x00;		//reset timer to 0
 182:	82 e5       	ldi	r24, 0x52	; 82
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	fc 01       	movw	r30, r24
 188:	10 82       	st	Z, r1
		TIFR = (1<<OCF1A); //reset compare flag
 18a:	88 e5       	ldi	r24, 0x58	; 88
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	20 e1       	ldi	r18, 0x10	; 16
 190:	fc 01       	movw	r30, r24
 192:	20 83       	st	Z, r18
		overflowCounter++;
 194:	89 81       	ldd	r24, Y+1	; 0x01
 196:	9a 81       	ldd	r25, Y+2	; 0x02
 198:	01 96       	adiw	r24, 0x01	; 1
 19a:	9a 83       	std	Y+2, r25	; 0x02
 19c:	89 83       	std	Y+1, r24	; 0x01
		if (overflowCounter >= delayTime)
 19e:	29 81       	ldd	r18, Y+1	; 0x01
 1a0:	3a 81       	ldd	r19, Y+2	; 0x02
 1a2:	8b 81       	ldd	r24, Y+3	; 0x03
 1a4:	9c 81       	ldd	r25, Y+4	; 0x04
 1a6:	28 17       	cp	r18, r24
 1a8:	39 07       	cpc	r19, r25
 1aa:	08 f4       	brcc	.+2      	; 0x1ae <delay_sec+0x78>
		{
			return;
		}
	}	
 1ac:	df cf       	rjmp	.-66     	; 0x16c <delay_sec+0x36>
		TCNT0 = 0x00;		//reset timer to 0
		TIFR = (1<<OCF1A); //reset compare flag
		overflowCounter++;
		if (overflowCounter >= delayTime)
		{
			return;
 1ae:	00 00       	nop
		}
	}	
}
 1b0:	0f 90       	pop	r0
 1b2:	0f 90       	pop	r0
 1b4:	0f 90       	pop	r0
 1b6:	0f 90       	pop	r0
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	08 95       	ret

000001be <displayUnlock>:
#include "Delay.h"


//unlock LED sequence
void displayUnlock (void)
{
 1be:	cf 93       	push	r28
 1c0:	df 93       	push	r29
 1c2:	00 d0       	rcall	.+0      	; 0x1c4 <displayUnlock+0x6>
 1c4:	00 d0       	rcall	.+0      	; 0x1c6 <displayUnlock+0x8>
 1c6:	cd b7       	in	r28, 0x3d	; 61
 1c8:	de b7       	in	r29, 0x3e	; 62
	for (int i = 0; i <4; i++)
 1ca:	1a 82       	std	Y+2, r1	; 0x02
 1cc:	19 82       	std	Y+1, r1	; 0x01
 1ce:	1b c0       	rjmp	.+54     	; 0x206 <displayUnlock+0x48>
	{
		PORTB = 1<<(1+i*2);
 1d0:	88 e3       	ldi	r24, 0x38	; 56
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	29 81       	ldd	r18, Y+1	; 0x01
 1d6:	3a 81       	ldd	r19, Y+2	; 0x02
 1d8:	22 0f       	add	r18, r18
 1da:	33 1f       	adc	r19, r19
 1dc:	a9 01       	movw	r20, r18
 1de:	4f 5f       	subi	r20, 0xFF	; 255
 1e0:	5f 4f       	sbci	r21, 0xFF	; 255
 1e2:	21 e0       	ldi	r18, 0x01	; 1
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <displayUnlock+0x2e>
 1e8:	22 0f       	add	r18, r18
 1ea:	33 1f       	adc	r19, r19
 1ec:	4a 95       	dec	r20
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <displayUnlock+0x2a>
 1f0:	fc 01       	movw	r30, r24
 1f2:	20 83       	st	Z, r18
		delay_ms(100);
 1f4:	84 e6       	ldi	r24, 0x64	; 100
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>


//unlock LED sequence
void displayUnlock (void)
{
	for (int i = 0; i <4; i++)
 1fc:	89 81       	ldd	r24, Y+1	; 0x01
 1fe:	9a 81       	ldd	r25, Y+2	; 0x02
 200:	01 96       	adiw	r24, 0x01	; 1
 202:	9a 83       	std	Y+2, r25	; 0x02
 204:	89 83       	std	Y+1, r24	; 0x01
 206:	89 81       	ldd	r24, Y+1	; 0x01
 208:	9a 81       	ldd	r25, Y+2	; 0x02
 20a:	04 97       	sbiw	r24, 0x04	; 4
 20c:	0c f3       	brlt	.-62     	; 0x1d0 <displayUnlock+0x12>
	{
		PORTB = 1<<(1+i*2);
		delay_ms(100);
	}
	for (int i = 0; i <4; i++)
 20e:	1c 82       	std	Y+4, r1	; 0x04
 210:	1b 82       	std	Y+3, r1	; 0x03
 212:	1c c0       	rjmp	.+56     	; 0x24c <displayUnlock+0x8e>
	{
		PORTB = 1<<(7-i*2);
 214:	88 e3       	ldi	r24, 0x38	; 56
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	2b 81       	ldd	r18, Y+3	; 0x03
 21a:	3c 81       	ldd	r19, Y+4	; 0x04
 21c:	22 0f       	add	r18, r18
 21e:	33 1f       	adc	r19, r19
 220:	47 e0       	ldi	r20, 0x07	; 7
 222:	50 e0       	ldi	r21, 0x00	; 0
 224:	42 1b       	sub	r20, r18
 226:	53 0b       	sbc	r21, r19
 228:	21 e0       	ldi	r18, 0x01	; 1
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	02 c0       	rjmp	.+4      	; 0x232 <displayUnlock+0x74>
 22e:	22 0f       	add	r18, r18
 230:	33 1f       	adc	r19, r19
 232:	4a 95       	dec	r20
 234:	e2 f7       	brpl	.-8      	; 0x22e <displayUnlock+0x70>
 236:	fc 01       	movw	r30, r24
 238:	20 83       	st	Z, r18
		delay_ms(100);
 23a:	84 e6       	ldi	r24, 0x64	; 100
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
	for (int i = 0; i <4; i++)
	{
		PORTB = 1<<(1+i*2);
		delay_ms(100);
	}
	for (int i = 0; i <4; i++)
 242:	8b 81       	ldd	r24, Y+3	; 0x03
 244:	9c 81       	ldd	r25, Y+4	; 0x04
 246:	01 96       	adiw	r24, 0x01	; 1
 248:	9c 83       	std	Y+4, r25	; 0x04
 24a:	8b 83       	std	Y+3, r24	; 0x03
 24c:	8b 81       	ldd	r24, Y+3	; 0x03
 24e:	9c 81       	ldd	r25, Y+4	; 0x04
 250:	04 97       	sbiw	r24, 0x04	; 4
 252:	04 f3       	brlt	.-64     	; 0x214 <displayUnlock+0x56>
	{
		PORTB = 1<<(7-i*2);
		delay_ms(100);
	}
	PORTB = 0x00;
 254:	88 e3       	ldi	r24, 0x38	; 56
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	fc 01       	movw	r30, r24
 25a:	10 82       	st	Z, r1
}
 25c:	00 00       	nop
 25e:	0f 90       	pop	r0
 260:	0f 90       	pop	r0
 262:	0f 90       	pop	r0
 264:	0f 90       	pop	r0
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	08 95       	ret

0000026c <displayLock>:
//****************************************************************************************

//****************************************************************************************
//unlock LED sequence
void displayLock (void)
{
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	00 d0       	rcall	.+0      	; 0x272 <displayLock+0x6>
 272:	00 d0       	rcall	.+0      	; 0x274 <displayLock+0x8>
 274:	cd b7       	in	r28, 0x3d	; 61
 276:	de b7       	in	r29, 0x3e	; 62
	for (int i = 0; i <4; i++)
 278:	1a 82       	std	Y+2, r1	; 0x02
 27a:	19 82       	std	Y+1, r1	; 0x01
 27c:	19 c0       	rjmp	.+50     	; 0x2b0 <displayLock+0x44>
	{
		PORTB = 1<<(i*2);
 27e:	88 e3       	ldi	r24, 0x38	; 56
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	29 81       	ldd	r18, Y+1	; 0x01
 284:	3a 81       	ldd	r19, Y+2	; 0x02
 286:	a9 01       	movw	r20, r18
 288:	44 0f       	add	r20, r20
 28a:	55 1f       	adc	r21, r21
 28c:	21 e0       	ldi	r18, 0x01	; 1
 28e:	30 e0       	ldi	r19, 0x00	; 0
 290:	02 c0       	rjmp	.+4      	; 0x296 <displayLock+0x2a>
 292:	22 0f       	add	r18, r18
 294:	33 1f       	adc	r19, r19
 296:	4a 95       	dec	r20
 298:	e2 f7       	brpl	.-8      	; 0x292 <displayLock+0x26>
 29a:	fc 01       	movw	r30, r24
 29c:	20 83       	st	Z, r18
		delay_ms(100);
 29e:	84 e6       	ldi	r24, 0x64	; 100
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>

//****************************************************************************************
//unlock LED sequence
void displayLock (void)
{
	for (int i = 0; i <4; i++)
 2a6:	89 81       	ldd	r24, Y+1	; 0x01
 2a8:	9a 81       	ldd	r25, Y+2	; 0x02
 2aa:	01 96       	adiw	r24, 0x01	; 1
 2ac:	9a 83       	std	Y+2, r25	; 0x02
 2ae:	89 83       	std	Y+1, r24	; 0x01
 2b0:	89 81       	ldd	r24, Y+1	; 0x01
 2b2:	9a 81       	ldd	r25, Y+2	; 0x02
 2b4:	04 97       	sbiw	r24, 0x04	; 4
 2b6:	1c f3       	brlt	.-58     	; 0x27e <displayLock+0x12>
	{
		PORTB = 1<<(i*2);
		delay_ms(100);
	}
	for (int i = 0; i <4; i++)
 2b8:	1c 82       	std	Y+4, r1	; 0x04
 2ba:	1b 82       	std	Y+3, r1	; 0x03
 2bc:	1f c0       	rjmp	.+62     	; 0x2fc <displayLock+0x90>
	{
		PORTB = 1<<(8-i*2);
 2be:	88 e3       	ldi	r24, 0x38	; 56
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	44 e0       	ldi	r20, 0x04	; 4
 2c4:	50 e0       	ldi	r21, 0x00	; 0
 2c6:	2b 81       	ldd	r18, Y+3	; 0x03
 2c8:	3c 81       	ldd	r19, Y+4	; 0x04
 2ca:	ba 01       	movw	r22, r20
 2cc:	62 1b       	sub	r22, r18
 2ce:	73 0b       	sbc	r23, r19
 2d0:	9b 01       	movw	r18, r22
 2d2:	a9 01       	movw	r20, r18
 2d4:	44 0f       	add	r20, r20
 2d6:	55 1f       	adc	r21, r21
 2d8:	21 e0       	ldi	r18, 0x01	; 1
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <displayLock+0x76>
 2de:	22 0f       	add	r18, r18
 2e0:	33 1f       	adc	r19, r19
 2e2:	4a 95       	dec	r20
 2e4:	e2 f7       	brpl	.-8      	; 0x2de <displayLock+0x72>
 2e6:	fc 01       	movw	r30, r24
 2e8:	20 83       	st	Z, r18
		delay_ms(100);
 2ea:	84 e6       	ldi	r24, 0x64	; 100
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
	for (int i = 0; i <4; i++)
	{
		PORTB = 1<<(i*2);
		delay_ms(100);
	}
	for (int i = 0; i <4; i++)
 2f2:	8b 81       	ldd	r24, Y+3	; 0x03
 2f4:	9c 81       	ldd	r25, Y+4	; 0x04
 2f6:	01 96       	adiw	r24, 0x01	; 1
 2f8:	9c 83       	std	Y+4, r25	; 0x04
 2fa:	8b 83       	std	Y+3, r24	; 0x03
 2fc:	8b 81       	ldd	r24, Y+3	; 0x03
 2fe:	9c 81       	ldd	r25, Y+4	; 0x04
 300:	04 97       	sbiw	r24, 0x04	; 4
 302:	ec f2       	brlt	.-70     	; 0x2be <displayLock+0x52>
	{
		PORTB = 1<<(8-i*2);
		delay_ms(100);
	}
	PORTB = 0x00;
 304:	88 e3       	ldi	r24, 0x38	; 56
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	fc 01       	movw	r30, r24
 30a:	10 82       	st	Z, r1
}
 30c:	00 00       	nop
 30e:	0f 90       	pop	r0
 310:	0f 90       	pop	r0
 312:	0f 90       	pop	r0
 314:	0f 90       	pop	r0
 316:	df 91       	pop	r29
 318:	cf 91       	pop	r28
 31a:	08 95       	ret

0000031c <displayProgramming>:
//****************************************************************************************

//****************************************************************************************
//Programming mode LED sequence
void displayProgramming(void)
{
 31c:	cf 93       	push	r28
 31e:	df 93       	push	r29
 320:	00 d0       	rcall	.+0      	; 0x322 <displayProgramming+0x6>
 322:	cd b7       	in	r28, 0x3d	; 61
 324:	de b7       	in	r29, 0x3e	; 62
	for (int i = 0; i <10; i++)
 326:	1a 82       	std	Y+2, r1	; 0x02
 328:	19 82       	std	Y+1, r1	; 0x01
 32a:	16 c0       	rjmp	.+44     	; 0x358 <displayProgramming+0x3c>
	{
		PORTB = 0xFF;
 32c:	88 e3       	ldi	r24, 0x38	; 56
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	2f ef       	ldi	r18, 0xFF	; 255
 332:	fc 01       	movw	r30, r24
 334:	20 83       	st	Z, r18
		delay_ms(100);
 336:	84 e6       	ldi	r24, 0x64	; 100
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
		PORTB = 0x00;
 33e:	88 e3       	ldi	r24, 0x38	; 56
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	fc 01       	movw	r30, r24
 344:	10 82       	st	Z, r1
		delay_ms(100);
 346:	84 e6       	ldi	r24, 0x64	; 100
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>

//****************************************************************************************
//Programming mode LED sequence
void displayProgramming(void)
{
	for (int i = 0; i <10; i++)
 34e:	89 81       	ldd	r24, Y+1	; 0x01
 350:	9a 81       	ldd	r25, Y+2	; 0x02
 352:	01 96       	adiw	r24, 0x01	; 1
 354:	9a 83       	std	Y+2, r25	; 0x02
 356:	89 83       	std	Y+1, r24	; 0x01
 358:	89 81       	ldd	r24, Y+1	; 0x01
 35a:	9a 81       	ldd	r25, Y+2	; 0x02
 35c:	0a 97       	sbiw	r24, 0x0a	; 10
 35e:	34 f3       	brlt	.-52     	; 0x32c <displayProgramming+0x10>
		PORTB = 0xFF;
		delay_ms(100);
		PORTB = 0x00;
		delay_ms(100);
	}
}
 360:	00 00       	nop
 362:	0f 90       	pop	r0
 364:	0f 90       	pop	r0
 366:	df 91       	pop	r29
 368:	cf 91       	pop	r28
 36a:	08 95       	ret

0000036c <displayIncorrect>:
//****************************************************************************************

//****************************************************************************************
//Programming mode LED sequence
void displayIncorrect(void)
{
 36c:	cf 93       	push	r28
 36e:	df 93       	push	r29
 370:	00 d0       	rcall	.+0      	; 0x372 <displayIncorrect+0x6>
 372:	cd b7       	in	r28, 0x3d	; 61
 374:	de b7       	in	r29, 0x3e	; 62
	for (int i = 0; i <4; i++)
 376:	1a 82       	std	Y+2, r1	; 0x02
 378:	19 82       	std	Y+1, r1	; 0x01
 37a:	16 c0       	rjmp	.+44     	; 0x3a8 <displayIncorrect+0x3c>
	{
		PORTB = 0x55;
 37c:	88 e3       	ldi	r24, 0x38	; 56
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	25 e5       	ldi	r18, 0x55	; 85
 382:	fc 01       	movw	r30, r24
 384:	20 83       	st	Z, r18
		delay_ms(80);
 386:	80 e5       	ldi	r24, 0x50	; 80
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
		PORTB = 0x00;
 38e:	88 e3       	ldi	r24, 0x38	; 56
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	fc 01       	movw	r30, r24
 394:	10 82       	st	Z, r1
		delay_ms(80);
 396:	80 e5       	ldi	r24, 0x50	; 80
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>

//****************************************************************************************
//Programming mode LED sequence
void displayIncorrect(void)
{
	for (int i = 0; i <4; i++)
 39e:	89 81       	ldd	r24, Y+1	; 0x01
 3a0:	9a 81       	ldd	r25, Y+2	; 0x02
 3a2:	01 96       	adiw	r24, 0x01	; 1
 3a4:	9a 83       	std	Y+2, r25	; 0x02
 3a6:	89 83       	std	Y+1, r24	; 0x01
 3a8:	89 81       	ldd	r24, Y+1	; 0x01
 3aa:	9a 81       	ldd	r25, Y+2	; 0x02
 3ac:	04 97       	sbiw	r24, 0x04	; 4
 3ae:	34 f3       	brlt	.-52     	; 0x37c <displayIncorrect+0x10>
		PORTB = 0x55;
		delay_ms(80);
		PORTB = 0x00;
		delay_ms(80);
	}
}
 3b0:	00 00       	nop
 3b2:	0f 90       	pop	r0
 3b4:	0f 90       	pop	r0
 3b6:	df 91       	pop	r29
 3b8:	cf 91       	pop	r28
 3ba:	08 95       	ret

000003bc <displayKeys>:
//****************************************************************************************

//****************************************************************************************
// Convert binary value to more realistic LED representation
uint8_t displayKeys(uint8_t keyValue)
{
 3bc:	cf 93       	push	r28
 3be:	df 93       	push	r29
 3c0:	1f 92       	push	r1
 3c2:	cd b7       	in	r28, 0x3d	; 61
 3c4:	de b7       	in	r29, 0x3e	; 62
 3c6:	89 83       	std	Y+1, r24	; 0x01
	switch(keyValue)
 3c8:	89 81       	ldd	r24, Y+1	; 0x01
 3ca:	88 2f       	mov	r24, r24
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	09 2e       	mov	r0, r25
 3d0:	00 0c       	add	r0, r0
 3d2:	aa 0b       	sbc	r26, r26
 3d4:	bb 0b       	sbc	r27, r27
 3d6:	40 e0       	ldi	r20, 0x00	; 0
 3d8:	50 e0       	ldi	r21, 0x00	; 0
 3da:	20 e1       	ldi	r18, 0x10	; 16
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	84 1b       	sub	r24, r20
 3e0:	95 0b       	sbc	r25, r21
 3e2:	28 17       	cp	r18, r24
 3e4:	39 07       	cpc	r19, r25
 3e6:	18 f1       	brcs	.+70     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 3e8:	86 5d       	subi	r24, 0xD6	; 214
 3ea:	9f 4f       	sbci	r25, 0xFF	; 255
 3ec:	fc 01       	movw	r30, r24
 3ee:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__tablejump2__>
	{
		case 0x00:
		return 0x00;
 3f2:	80 e0       	ldi	r24, 0x00	; 0
 3f4:	1d c0       	rjmp	.+58     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		break;
		
		case 0x01:
		return 0x01;
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	1b c0       	rjmp	.+54     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		break;
		
		case 0x02:
		return 0x02;
 3fa:	82 e0       	ldi	r24, 0x02	; 2
 3fc:	19 c0       	rjmp	.+50     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		break;
		
		case 0x03:
		return 0x04;
 3fe:	84 e0       	ldi	r24, 0x04	; 4
 400:	17 c0       	rjmp	.+46     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		break;
		
		case 0x04:
		return 0x08;
 402:	88 e0       	ldi	r24, 0x08	; 8
 404:	15 c0       	rjmp	.+42     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		break;
		
		case 0x05:
		return 0x10;
 406:	80 e1       	ldi	r24, 0x10	; 16
 408:	13 c0       	rjmp	.+38     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		break;
		
		case 0x06:
		return 0x20;
 40a:	80 e2       	ldi	r24, 0x20	; 32
 40c:	11 c0       	rjmp	.+34     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		break;
		
		case 0x07:
		return 0x40;
 40e:	80 e4       	ldi	r24, 0x40	; 64
 410:	0f c0       	rjmp	.+30     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		break;
		
		case 0x08:
		return 0x80;
 412:	80 e8       	ldi	r24, 0x80	; 128
 414:	0d c0       	rjmp	.+26     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		break;
		
		case 0x09:	
		return 0x81;
 416:	81 e8       	ldi	r24, 0x81	; 129
 418:	0b c0       	rjmp	.+22     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		break;
		
		case 0x10:
		return 0x10;
 41a:	80 e1       	ldi	r24, 0x10	; 16
 41c:	09 c0       	rjmp	.+18     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		break;
		
		case 0x0A:
		return 0x03;
 41e:	83 e0       	ldi	r24, 0x03	; 3
 420:	07 c0       	rjmp	.+14     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		break;
		
		case 0x0B:
		return 0x0C;
 422:	8c e0       	ldi	r24, 0x0C	; 12
 424:	05 c0       	rjmp	.+10     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		break;
		
		case 0x0C:
		return 0x30;
 426:	80 e3       	ldi	r24, 0x30	; 48
 428:	03 c0       	rjmp	.+6      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		break;
		
		case 0x0D:
		return 0xC0;
 42a:	80 ec       	ldi	r24, 0xC0	; 192
 42c:	01 c0       	rjmp	.+2      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		break;
		
		default:
		return 0;
 42e:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 430:	0f 90       	pop	r0
 432:	df 91       	pop	r29
 434:	cf 91       	pop	r28
 436:	08 95       	ret

00000438 <displayLockout>:
//****************************************************************************************

//****************************************************************************************
void displayLockout(void)
{
 438:	cf 93       	push	r28
 43a:	df 93       	push	r29
 43c:	cd b7       	in	r28, 0x3d	; 61
 43e:	de b7       	in	r29, 0x3e	; 62
	PORTB = 0x55;
 440:	88 e3       	ldi	r24, 0x38	; 56
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	25 e5       	ldi	r18, 0x55	; 85
 446:	fc 01       	movw	r30, r24
 448:	20 83       	st	Z, r18
	delay_sec(120);
 44a:	88 e7       	ldi	r24, 0x78	; 120
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	0e 94 9b 00 	call	0x136	; 0x136 <delay_sec>
	PORTB =0;
 452:	88 e3       	ldi	r24, 0x38	; 56
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	fc 01       	movw	r30, r24
 458:	10 82       	st	Z, r1
 45a:	00 00       	nop
 45c:	df 91       	pop	r29
 45e:	cf 91       	pop	r28
 460:	08 95       	ret

00000462 <write_EEPROM>:
//Takes in the address of the location to write to, and the data to write into that address
//returns nothing(error code flag set?)

//do we need to use ware leveling(using multiple addresses so as not to damage EEPROM)
void write_EEPROM(uint8_t WriteData, uint16_t WriteAddress)
{
 462:	cf 93       	push	r28
 464:	df 93       	push	r29
 466:	00 d0       	rcall	.+0      	; 0x468 <write_EEPROM+0x6>
 468:	1f 92       	push	r1
 46a:	cd b7       	in	r28, 0x3d	; 61
 46c:	de b7       	in	r29, 0x3e	; 62
 46e:	89 83       	std	Y+1, r24	; 0x01
 470:	7b 83       	std	Y+3, r23	; 0x03
 472:	6a 83       	std	Y+2, r22	; 0x02
//should disable global interrupts here if we use them
	
	//check if address is valid
	if(WriteAddress > 0x400)	//only 2^10 = 1024 addresses
 474:	8a 81       	ldd	r24, Y+2	; 0x02
 476:	9b 81       	ldd	r25, Y+3	; 0x03
 478:	81 30       	cpi	r24, 0x01	; 1
 47a:	94 40       	sbci	r25, 0x04	; 4
 47c:	20 f0       	brcs	.+8      	; 0x486 <write_EEPROM+0x24>
		{
			errorFlag =3;
 47e:	83 e0       	ldi	r24, 0x03	; 3
 480:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
			return;			//Set some debug flag?
 484:	1a c0       	rjmp	.+52     	; 0x4ba <write_EEPROM+0x58>
		}
	
	
	//Wait till previous write operation is completed(i.e. wait till EEWE becomes zero).
	while(EECR & (1 << EEWE));	//b 0000 0010
 486:	00 00       	nop
 488:	8c e3       	ldi	r24, 0x3C	; 60
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	fc 01       	movw	r30, r24
 48e:	80 81       	ld	r24, Z
 490:	88 2f       	mov	r24, r24
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	82 70       	andi	r24, 0x02	; 2
 496:	99 27       	eor	r25, r25
 498:	89 2b       	or	r24, r25
 49a:	b1 f7       	brne	.-20     	; 0x488 <write_EEPROM+0x26>
	//Wait until SPMEN in SPMCR becomes zero		Dont think this step is necessary
	// only relevant if the software contains a boot loader allowing the CPU to program the Flash. If the Flash is never being updated by the CPU, can be omitted

	//Load the EEPROM address into EEAR at which the data has to be stored.
	//high and low registers, high register will always be 0 for us.
	EEAR = WriteAddress;
 49c:	8e e3       	ldi	r24, 0x3E	; 62
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	2a 81       	ldd	r18, Y+2	; 0x02
 4a2:	3b 81       	ldd	r19, Y+3	; 0x03
 4a4:	fc 01       	movw	r30, r24
 4a6:	31 83       	std	Z+1, r19	; 0x01
 4a8:	20 83       	st	Z, r18

	//Load the data into EEDR which has to be stored in EEPROM.
	EEDR = WriteData;
 4aa:	8d e3       	ldi	r24, 0x3D	; 61
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	29 81       	ldd	r18, Y+1	; 0x01
 4b0:	fc 01       	movw	r30, r24
 4b2:	20 83       	st	Z, r18

	//Set the EEMWE (EEPROM Master Write Enable).
	asm("SBI 0x1C, 0x02");
 4b4:	e2 9a       	sbi	0x1c, 2	; 28
	//set EEWE in EECR to 0			Dont think this step is necessary. Why is it listed?

	//Within four clock cycles after 4th step, set EEWE(Eeprom Write Enable) to 1 to trigger the EEPROM Write Operation
	asm("SBI 0x1C, 0x01");
 4b6:	e1 9a       	sbi	0x1c, 1	; 28
return;
 4b8:	00 00       	nop
}
 4ba:	0f 90       	pop	r0
 4bc:	0f 90       	pop	r0
 4be:	0f 90       	pop	r0
 4c0:	df 91       	pop	r29
 4c2:	cf 91       	pop	r28
 4c4:	08 95       	ret

000004c6 <read_EEPROM>:
//****************************************************************************************

//****************************************************************************************
//Read EEPROM
uint8_t read_EEPROM(uint16_t readAddress)
{
 4c6:	cf 93       	push	r28
 4c8:	df 93       	push	r29
 4ca:	00 d0       	rcall	.+0      	; 0x4cc <read_EEPROM+0x6>
 4cc:	cd b7       	in	r28, 0x3d	; 61
 4ce:	de b7       	in	r29, 0x3e	; 62
 4d0:	9a 83       	std	Y+2, r25	; 0x02
 4d2:	89 83       	std	Y+1, r24	; 0x01
	//check if address is valid
	if(readAddress > 0x400)	//only 2^10 = 1024 addresses
 4d4:	89 81       	ldd	r24, Y+1	; 0x01
 4d6:	9a 81       	ldd	r25, Y+2	; 0x02
 4d8:	81 30       	cpi	r24, 0x01	; 1
 4da:	94 40       	sbci	r25, 0x04	; 4
 4dc:	10 f0       	brcs	.+4      	; 0x4e2 <read_EEPROM+0x1c>
	{
		return 0;			//Set some debug flag?
 4de:	80 e0       	ldi	r24, 0x00	; 0
 4e0:	1f c0       	rjmp	.+62     	; 0x520 <read_EEPROM+0x5a>
	}
	
	//WAit for completion of previous Write operation.
	while(EECR & (1 << EEWE));
 4e2:	00 00       	nop
 4e4:	8c e3       	ldi	r24, 0x3C	; 60
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	fc 01       	movw	r30, r24
 4ea:	80 81       	ld	r24, Z
 4ec:	88 2f       	mov	r24, r24
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	82 70       	andi	r24, 0x02	; 2
 4f2:	99 27       	eor	r25, r25
 4f4:	89 2b       	or	r24, r25
 4f6:	b1 f7       	brne	.-20     	; 0x4e4 <read_EEPROM+0x1e>

	//Load the EEPROM address into EEAR from where the data needs to be read.
	EEAR = readAddress;
 4f8:	8e e3       	ldi	r24, 0x3E	; 62
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	29 81       	ldd	r18, Y+1	; 0x01
 4fe:	3a 81       	ldd	r19, Y+2	; 0x02
 500:	fc 01       	movw	r30, r24
 502:	31 83       	std	Z+1, r19	; 0x01
 504:	20 83       	st	Z, r18

	//Trigger the EEPROM read operation by setting EERE (EEPROM Read Enable).
	EECR |= (1 <<EERE);
 506:	8c e3       	ldi	r24, 0x3C	; 60
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	2c e3       	ldi	r18, 0x3C	; 60
 50c:	30 e0       	ldi	r19, 0x00	; 0
 50e:	f9 01       	movw	r30, r18
 510:	20 81       	ld	r18, Z
 512:	21 60       	ori	r18, 0x01	; 1
 514:	fc 01       	movw	r30, r24
 516:	20 83       	st	Z, r18

	//Wait for some time (about 1ms) and collect the read data from EEDR.
	return EEDR;
 518:	8d e3       	ldi	r24, 0x3D	; 61
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	fc 01       	movw	r30, r24
 51e:	80 81       	ld	r24, Z
}
 520:	0f 90       	pop	r0
 522:	0f 90       	pop	r0
 524:	df 91       	pop	r29
 526:	cf 91       	pop	r28
 528:	08 95       	ret

0000052a <storePasscode>:
//****************************************************************************************
//Store Passcode stores 4 bytes of passcode into memory location defined by the user.
//32 bit passcode must be divided into 4 bytes
//each byte is stored in location 0x00XY, where X is the hex value of the user, and Y is which byte is being stored
void storePasscode (unsigned long int Passcode, uint8_t user)
{
 52a:	cf 93       	push	r28
 52c:	df 93       	push	r29
 52e:	cd b7       	in	r28, 0x3d	; 61
 530:	de b7       	in	r29, 0x3e	; 62
 532:	63 97       	sbiw	r28, 0x13	; 19
 534:	0f b6       	in	r0, 0x3f	; 63
 536:	f8 94       	cli
 538:	de bf       	out	0x3e, r29	; 62
 53a:	0f be       	out	0x3f, r0	; 63
 53c:	cd bf       	out	0x3d, r28	; 61
 53e:	6f 87       	std	Y+15, r22	; 0x0f
 540:	78 8b       	std	Y+16, r23	; 0x10
 542:	89 8b       	std	Y+17, r24	; 0x11
 544:	9a 8b       	std	Y+18, r25	; 0x12
 546:	4b 8b       	std	Y+19, r20	; 0x13
	//check if user input is valid
	if (!isUser(user))
 548:	8b 89       	ldd	r24, Y+19	; 0x13
 54a:	0e 94 e5 04 	call	0x9ca	; 0x9ca <isUser>
 54e:	88 23       	and	r24, r24
 550:	21 f4       	brne	.+8      	; 0x55a <storePasscode+0x30>
	{
		//set some debug flag
		errorFlag = 2;
 552:	82 e0       	ldi	r24, 0x02	; 2
 554:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
		return;
 558:	67 c0       	rjmp	.+206    	; 0x628 <storePasscode+0xfe>
	
	//store each byte of passcode
	uint8_t passcodeByte[4];
	uint16_t passcodeAddress[4];
	
	for(int i = 0; i<4; i++)
 55a:	1a 82       	std	Y+2, r1	; 0x02
 55c:	19 82       	std	Y+1, r1	; 0x01
 55e:	5e c0       	rjmp	.+188    	; 0x61c <storePasscode+0xf2>
	{
		//store each byte of passcode into an array
		passcodeByte[i] = Passcode>>(8*i);
 560:	89 81       	ldd	r24, Y+1	; 0x01
 562:	9a 81       	ldd	r25, Y+2	; 0x02
 564:	9c 01       	movw	r18, r24
 566:	22 0f       	add	r18, r18
 568:	33 1f       	adc	r19, r19
 56a:	22 0f       	add	r18, r18
 56c:	33 1f       	adc	r19, r19
 56e:	22 0f       	add	r18, r18
 570:	33 1f       	adc	r19, r19
 572:	8f 85       	ldd	r24, Y+15	; 0x0f
 574:	98 89       	ldd	r25, Y+16	; 0x10
 576:	a9 89       	ldd	r26, Y+17	; 0x11
 578:	ba 89       	ldd	r27, Y+18	; 0x12
 57a:	04 c0       	rjmp	.+8      	; 0x584 <storePasscode+0x5a>
 57c:	b6 95       	lsr	r27
 57e:	a7 95       	ror	r26
 580:	97 95       	ror	r25
 582:	87 95       	ror	r24
 584:	2a 95       	dec	r18
 586:	d2 f7       	brpl	.-12     	; 0x57c <storePasscode+0x52>
 588:	48 2f       	mov	r20, r24
 58a:	9e 01       	movw	r18, r28
 58c:	2d 5f       	subi	r18, 0xFD	; 253
 58e:	3f 4f       	sbci	r19, 0xFF	; 255
 590:	89 81       	ldd	r24, Y+1	; 0x01
 592:	9a 81       	ldd	r25, Y+2	; 0x02
 594:	82 0f       	add	r24, r18
 596:	93 1f       	adc	r25, r19
 598:	fc 01       	movw	r30, r24
 59a:	40 83       	st	Z, r20
		//define the location to store the passcode in EEPROM
		passcodeAddress[i]= (user<<4)|(4-i);
 59c:	8b 89       	ldd	r24, Y+19	; 0x13
 59e:	88 2f       	mov	r24, r24
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	9c 01       	movw	r18, r24
 5a4:	22 95       	swap	r18
 5a6:	32 95       	swap	r19
 5a8:	30 7f       	andi	r19, 0xF0	; 240
 5aa:	32 27       	eor	r19, r18
 5ac:	20 7f       	andi	r18, 0xF0	; 240
 5ae:	32 27       	eor	r19, r18
 5b0:	44 e0       	ldi	r20, 0x04	; 4
 5b2:	50 e0       	ldi	r21, 0x00	; 0
 5b4:	89 81       	ldd	r24, Y+1	; 0x01
 5b6:	9a 81       	ldd	r25, Y+2	; 0x02
 5b8:	ba 01       	movw	r22, r20
 5ba:	68 1b       	sub	r22, r24
 5bc:	79 0b       	sbc	r23, r25
 5be:	cb 01       	movw	r24, r22
 5c0:	82 2b       	or	r24, r18
 5c2:	93 2b       	or	r25, r19
 5c4:	ac 01       	movw	r20, r24
 5c6:	89 81       	ldd	r24, Y+1	; 0x01
 5c8:	9a 81       	ldd	r25, Y+2	; 0x02
 5ca:	88 0f       	add	r24, r24
 5cc:	99 1f       	adc	r25, r25
 5ce:	9e 01       	movw	r18, r28
 5d0:	2f 5f       	subi	r18, 0xFF	; 255
 5d2:	3f 4f       	sbci	r19, 0xFF	; 255
 5d4:	82 0f       	add	r24, r18
 5d6:	93 1f       	adc	r25, r19
 5d8:	06 96       	adiw	r24, 0x06	; 6
 5da:	fc 01       	movw	r30, r24
 5dc:	51 83       	std	Z+1, r21	; 0x01
 5de:	40 83       	st	Z, r20
		//write the byte to the location in EEPROM
		write_EEPROM(passcodeByte[i],passcodeAddress[i]);
 5e0:	89 81       	ldd	r24, Y+1	; 0x01
 5e2:	9a 81       	ldd	r25, Y+2	; 0x02
 5e4:	88 0f       	add	r24, r24
 5e6:	99 1f       	adc	r25, r25
 5e8:	9e 01       	movw	r18, r28
 5ea:	2f 5f       	subi	r18, 0xFF	; 255
 5ec:	3f 4f       	sbci	r19, 0xFF	; 255
 5ee:	82 0f       	add	r24, r18
 5f0:	93 1f       	adc	r25, r19
 5f2:	06 96       	adiw	r24, 0x06	; 6
 5f4:	fc 01       	movw	r30, r24
 5f6:	40 81       	ld	r20, Z
 5f8:	51 81       	ldd	r21, Z+1	; 0x01
 5fa:	9e 01       	movw	r18, r28
 5fc:	2d 5f       	subi	r18, 0xFD	; 253
 5fe:	3f 4f       	sbci	r19, 0xFF	; 255
 600:	89 81       	ldd	r24, Y+1	; 0x01
 602:	9a 81       	ldd	r25, Y+2	; 0x02
 604:	82 0f       	add	r24, r18
 606:	93 1f       	adc	r25, r19
 608:	fc 01       	movw	r30, r24
 60a:	80 81       	ld	r24, Z
 60c:	ba 01       	movw	r22, r20
 60e:	0e 94 31 02 	call	0x462	; 0x462 <write_EEPROM>
	
	//store each byte of passcode
	uint8_t passcodeByte[4];
	uint16_t passcodeAddress[4];
	
	for(int i = 0; i<4; i++)
 612:	89 81       	ldd	r24, Y+1	; 0x01
 614:	9a 81       	ldd	r25, Y+2	; 0x02
 616:	01 96       	adiw	r24, 0x01	; 1
 618:	9a 83       	std	Y+2, r25	; 0x02
 61a:	89 83       	std	Y+1, r24	; 0x01
 61c:	89 81       	ldd	r24, Y+1	; 0x01
 61e:	9a 81       	ldd	r25, Y+2	; 0x02
 620:	04 97       	sbiw	r24, 0x04	; 4
 622:	0c f4       	brge	.+2      	; 0x626 <storePasscode+0xfc>
 624:	9d cf       	rjmp	.-198    	; 0x560 <storePasscode+0x36>
		//define the location to store the passcode in EEPROM
		passcodeAddress[i]= (user<<4)|(4-i);
		//write the byte to the location in EEPROM
		write_EEPROM(passcodeByte[i],passcodeAddress[i]);
	}
	return;
 626:	00 00       	nop
}
 628:	63 96       	adiw	r28, 0x13	; 19
 62a:	0f b6       	in	r0, 0x3f	; 63
 62c:	f8 94       	cli
 62e:	de bf       	out	0x3e, r29	; 62
 630:	0f be       	out	0x3f, r0	; 63
 632:	cd bf       	out	0x3d, r28	; 61
 634:	df 91       	pop	r29
 636:	cf 91       	pop	r28
 638:	08 95       	ret

0000063a <RecallPasscode>:
//****************************************************************************************

//****************************************************************************************
//Reads the passcode from EEPROM and stores it into a long int
unsigned long int RecallPasscode(uint8_t user)
{
 63a:	cf 93       	push	r28
 63c:	df 93       	push	r29
 63e:	cd b7       	in	r28, 0x3d	; 61
 640:	de b7       	in	r29, 0x3e	; 62
 642:	2b 97       	sbiw	r28, 0x0b	; 11
 644:	0f b6       	in	r0, 0x3f	; 63
 646:	f8 94       	cli
 648:	de bf       	out	0x3e, r29	; 62
 64a:	0f be       	out	0x3f, r0	; 63
 64c:	cd bf       	out	0x3d, r28	; 61
 64e:	8b 87       	std	Y+11, r24	; 0x0b
unsigned long int tempValue = 0;
 650:	1f 82       	std	Y+7, r1	; 0x07
 652:	18 86       	std	Y+8, r1	; 0x08
 654:	19 86       	std	Y+9, r1	; 0x09
 656:	1a 86       	std	Y+10, r1	; 0x0a
unsigned long int passcode = 0;	
 658:	19 82       	std	Y+1, r1	; 0x01
 65a:	1a 82       	std	Y+2, r1	; 0x02
 65c:	1b 82       	std	Y+3, r1	; 0x03
 65e:	1c 82       	std	Y+4, r1	; 0x04
	for (int i = 0; i<4; i++)
 660:	1e 82       	std	Y+6, r1	; 0x06
 662:	1d 82       	std	Y+5, r1	; 0x05
 664:	43 c0       	rjmp	.+134    	; 0x6ec <RecallPasscode+0xb2>
	{
		//read the EEPROM value at location of user from LSB to MSB
		tempValue = read_EEPROM((user<<4)|(4-i));
 666:	8b 85       	ldd	r24, Y+11	; 0x0b
 668:	88 2f       	mov	r24, r24
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	9c 01       	movw	r18, r24
 66e:	22 95       	swap	r18
 670:	32 95       	swap	r19
 672:	30 7f       	andi	r19, 0xF0	; 240
 674:	32 27       	eor	r19, r18
 676:	20 7f       	andi	r18, 0xF0	; 240
 678:	32 27       	eor	r19, r18
 67a:	44 e0       	ldi	r20, 0x04	; 4
 67c:	50 e0       	ldi	r21, 0x00	; 0
 67e:	8d 81       	ldd	r24, Y+5	; 0x05
 680:	9e 81       	ldd	r25, Y+6	; 0x06
 682:	ba 01       	movw	r22, r20
 684:	68 1b       	sub	r22, r24
 686:	79 0b       	sbc	r23, r25
 688:	cb 01       	movw	r24, r22
 68a:	82 2b       	or	r24, r18
 68c:	93 2b       	or	r25, r19
 68e:	0e 94 63 02 	call	0x4c6	; 0x4c6 <read_EEPROM>
 692:	88 2f       	mov	r24, r24
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	a0 e0       	ldi	r26, 0x00	; 0
 698:	b0 e0       	ldi	r27, 0x00	; 0
 69a:	8f 83       	std	Y+7, r24	; 0x07
 69c:	98 87       	std	Y+8, r25	; 0x08
 69e:	a9 87       	std	Y+9, r26	; 0x09
 6a0:	ba 87       	std	Y+10, r27	; 0x0a
		passcode |= tempValue<<(8*i);			//add each byte together to form a 4 byte passcode
 6a2:	8d 81       	ldd	r24, Y+5	; 0x05
 6a4:	9e 81       	ldd	r25, Y+6	; 0x06
 6a6:	9c 01       	movw	r18, r24
 6a8:	22 0f       	add	r18, r18
 6aa:	33 1f       	adc	r19, r19
 6ac:	22 0f       	add	r18, r18
 6ae:	33 1f       	adc	r19, r19
 6b0:	22 0f       	add	r18, r18
 6b2:	33 1f       	adc	r19, r19
 6b4:	8f 81       	ldd	r24, Y+7	; 0x07
 6b6:	98 85       	ldd	r25, Y+8	; 0x08
 6b8:	a9 85       	ldd	r26, Y+9	; 0x09
 6ba:	ba 85       	ldd	r27, Y+10	; 0x0a
 6bc:	04 c0       	rjmp	.+8      	; 0x6c6 <RecallPasscode+0x8c>
 6be:	88 0f       	add	r24, r24
 6c0:	99 1f       	adc	r25, r25
 6c2:	aa 1f       	adc	r26, r26
 6c4:	bb 1f       	adc	r27, r27
 6c6:	2a 95       	dec	r18
 6c8:	d2 f7       	brpl	.-12     	; 0x6be <RecallPasscode+0x84>
 6ca:	29 81       	ldd	r18, Y+1	; 0x01
 6cc:	3a 81       	ldd	r19, Y+2	; 0x02
 6ce:	4b 81       	ldd	r20, Y+3	; 0x03
 6d0:	5c 81       	ldd	r21, Y+4	; 0x04
 6d2:	82 2b       	or	r24, r18
 6d4:	93 2b       	or	r25, r19
 6d6:	a4 2b       	or	r26, r20
 6d8:	b5 2b       	or	r27, r21
 6da:	89 83       	std	Y+1, r24	; 0x01
 6dc:	9a 83       	std	Y+2, r25	; 0x02
 6de:	ab 83       	std	Y+3, r26	; 0x03
 6e0:	bc 83       	std	Y+4, r27	; 0x04
//Reads the passcode from EEPROM and stores it into a long int
unsigned long int RecallPasscode(uint8_t user)
{
unsigned long int tempValue = 0;
unsigned long int passcode = 0;	
	for (int i = 0; i<4; i++)
 6e2:	8d 81       	ldd	r24, Y+5	; 0x05
 6e4:	9e 81       	ldd	r25, Y+6	; 0x06
 6e6:	01 96       	adiw	r24, 0x01	; 1
 6e8:	9e 83       	std	Y+6, r25	; 0x06
 6ea:	8d 83       	std	Y+5, r24	; 0x05
 6ec:	8d 81       	ldd	r24, Y+5	; 0x05
 6ee:	9e 81       	ldd	r25, Y+6	; 0x06
 6f0:	04 97       	sbiw	r24, 0x04	; 4
 6f2:	0c f4       	brge	.+2      	; 0x6f6 <RecallPasscode+0xbc>
 6f4:	b8 cf       	rjmp	.-144    	; 0x666 <RecallPasscode+0x2c>
	{
		//read the EEPROM value at location of user from LSB to MSB
		tempValue = read_EEPROM((user<<4)|(4-i));
		passcode |= tempValue<<(8*i);			//add each byte together to form a 4 byte passcode
	}
	return passcode;
 6f6:	89 81       	ldd	r24, Y+1	; 0x01
 6f8:	9a 81       	ldd	r25, Y+2	; 0x02
 6fa:	ab 81       	ldd	r26, Y+3	; 0x03
 6fc:	bc 81       	ldd	r27, Y+4	; 0x04
}
 6fe:	bc 01       	movw	r22, r24
 700:	cd 01       	movw	r24, r26
 702:	2b 96       	adiw	r28, 0x0b	; 11
 704:	0f b6       	in	r0, 0x3f	; 63
 706:	f8 94       	cli
 708:	de bf       	out	0x3e, r29	; 62
 70a:	0f be       	out	0x3f, r0	; 63
 70c:	cd bf       	out	0x3d, r28	; 61
 70e:	df 91       	pop	r29
 710:	cf 91       	pop	r28
 712:	08 95       	ret

00000714 <initLEDs>:
// START FUNCTIONS

//****************************************************************************************
//	Initialise output LEDs - PORTB
void initLEDs(void)
{
 714:	cf 93       	push	r28
 716:	df 93       	push	r29
 718:	cd b7       	in	r28, 0x3d	; 61
 71a:	de b7       	in	r29, 0x3e	; 62
	DDRB = 0xFF;		// Set all LEDs to outputs
 71c:	87 e3       	ldi	r24, 0x37	; 55
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	2f ef       	ldi	r18, 0xFF	; 255
 722:	fc 01       	movw	r30, r24
 724:	20 83       	st	Z, r18
	PORTB = 0x00;		// Turn all LEDs off
 726:	88 e3       	ldi	r24, 0x38	; 56
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	fc 01       	movw	r30, r24
 72c:	10 82       	st	Z, r1
}
 72e:	00 00       	nop
 730:	df 91       	pop	r29
 732:	cf 91       	pop	r28
 734:	08 95       	ret

00000736 <initKeypad>:


//****************************************************************************************
//	Initialise keypad - PORTC
void initKeypad(void)
{
 736:	cf 93       	push	r28
 738:	df 93       	push	r29
 73a:	cd b7       	in	r28, 0x3d	; 61
 73c:	de b7       	in	r29, 0x3e	; 62
	if(keypad3x4 == 1)
 73e:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <keypad3x4>
 742:	81 30       	cpi	r24, 0x01	; 1
 744:	99 f4       	brne	.+38     	; 0x76c <initKeypad+0x36>
	{
		DDRC = 0x95;		// Set rows to inputs and columns to outputs
 746:	84 e3       	ldi	r24, 0x34	; 52
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	25 e9       	ldi	r18, 0x95	; 149
 74c:	fc 01       	movw	r30, r24
 74e:	20 83       	st	Z, r18
		PORTC = 0x6A;		// Enable the pull-up resistors on the row inputs
 750:	85 e3       	ldi	r24, 0x35	; 53
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	2a e6       	ldi	r18, 0x6A	; 106
 756:	fc 01       	movw	r30, r24
 758:	20 83       	st	Z, r18
		PORTC = 0xFF;		// Set the columns to all on (idle state) & ensure pull-ups are still enabled
 75a:	85 e3       	ldi	r24, 0x35	; 53
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	2f ef       	ldi	r18, 0xFF	; 255
 760:	fc 01       	movw	r30, r24
 762:	20 83       	st	Z, r18
		
		AmountOfColumns =3;
 764:	83 e0       	ldi	r24, 0x03	; 3
 766:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <AmountOfColumns>
		PORTC = 0xFF;		// Set the columns to all on (idle state) & ensure pull-ups are still enabled
		
		AmountOfColumns =4;
	}

}
 76a:	12 c0       	rjmp	.+36     	; 0x790 <initKeypad+0x5a>
		
		AmountOfColumns =3;
	}
	else
	{
		DDRC = 0xF0;		// Set rows to inputs and columns to outputs
 76c:	84 e3       	ldi	r24, 0x34	; 52
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	20 ef       	ldi	r18, 0xF0	; 240
 772:	fc 01       	movw	r30, r24
 774:	20 83       	st	Z, r18
		PORTC = 0x0F;		// Enable the pull-up resistors on the row inputs
 776:	85 e3       	ldi	r24, 0x35	; 53
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	2f e0       	ldi	r18, 0x0F	; 15
 77c:	fc 01       	movw	r30, r24
 77e:	20 83       	st	Z, r18
		PORTC = 0xFF;		// Set the columns to all on (idle state) & ensure pull-ups are still enabled
 780:	85 e3       	ldi	r24, 0x35	; 53
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	2f ef       	ldi	r18, 0xFF	; 255
 786:	fc 01       	movw	r30, r24
 788:	20 83       	st	Z, r18
		
		AmountOfColumns =4;
 78a:	84 e0       	ldi	r24, 0x04	; 4
 78c:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <AmountOfColumns>
	}

}
 790:	00 00       	nop
 792:	df 91       	pop	r29
 794:	cf 91       	pop	r28
 796:	08 95       	ret

00000798 <initTimers>:


//****************************************************************************************
//Initialise Timers
void initTimers(void)
{
 798:	cf 93       	push	r28
 79a:	df 93       	push	r29
 79c:	cd b7       	in	r28, 0x3d	; 61
 79e:	de b7       	in	r29, 0x3e	; 62
	//set timer0 counter to 0
	TCNT0 = 0x00;
 7a0:	82 e5       	ldi	r24, 0x52	; 82
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	fc 01       	movw	r30, r24
 7a6:	10 82       	st	Z, r1
	//set clock prescaler to divide by 1024 of timer0
	TCCR0 |= (1<<CS00) | (0<<CS01) | (1<<CS02);
 7a8:	83 e5       	ldi	r24, 0x53	; 83
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	23 e5       	ldi	r18, 0x53	; 83
 7ae:	30 e0       	ldi	r19, 0x00	; 0
 7b0:	f9 01       	movw	r30, r18
 7b2:	20 81       	ld	r18, Z
 7b4:	25 60       	ori	r18, 0x05	; 5
 7b6:	fc 01       	movw	r30, r24
 7b8:	20 83       	st	Z, r18
	
	//set time1 counter to 0;
	TCNT1 = 0x0000;
 7ba:	8c e4       	ldi	r24, 0x4C	; 76
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	fc 01       	movw	r30, r24
 7c0:	11 82       	std	Z+1, r1	; 0x01
 7c2:	10 82       	st	Z, r1
	//set clock prescaler to divide by 1024 of timer1
	TCCR1B |= (1<<CS10) | (0<<CS11) | (1<<CS12);
 7c4:	8e e4       	ldi	r24, 0x4E	; 78
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	2e e4       	ldi	r18, 0x4E	; 78
 7ca:	30 e0       	ldi	r19, 0x00	; 0
 7cc:	f9 01       	movw	r30, r18
 7ce:	20 81       	ld	r18, Z
 7d0:	25 60       	ori	r18, 0x05	; 5
 7d2:	fc 01       	movw	r30, r24
 7d4:	20 83       	st	Z, r18
}
 7d6:	00 00       	nop
 7d8:	df 91       	pop	r29
 7da:	cf 91       	pop	r28
 7dc:	08 95       	ret

000007de <ReadOne>:
// START FUNCTIONS

//**************************************************************************************************************************************************
// Function that checks if one key has been pressed 
unsigned char ReadOne() 
{
 7de:	cf 93       	push	r28
 7e0:	df 93       	push	r29
 7e2:	00 d0       	rcall	.+0      	; 0x7e4 <ReadOne+0x6>
 7e4:	cd b7       	in	r28, 0x3d	; 61
 7e6:	de b7       	in	r29, 0x3e	; 62
	// Set KeyPressed to 0
	KeyPressed = 0x00;
 7e8:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <KeyPressed>
	
	while(1)	//can get rid of while loop, it just keeps reading until a key is pressed instead of only reading once when its called
	{

		// Scanning column: write the column mask to port C
		for (uint8_t j=0; j<AmountOfColumns; j++)
 7ec:	19 82       	std	Y+1, r1	; 0x01
 7ee:	3f c0       	rjmp	.+126    	; 0x86e <__stack+0xf>
		{
			PORTC = col[j];			// Scan each column
 7f0:	85 e3       	ldi	r24, 0x35	; 53
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	29 81       	ldd	r18, Y+1	; 0x01
 7f6:	22 2f       	mov	r18, r18
 7f8:	30 e0       	ldi	r19, 0x00	; 0
 7fa:	2e 59       	subi	r18, 0x9E	; 158
 7fc:	3f 4f       	sbci	r19, 0xFF	; 255
 7fe:	f9 01       	movw	r30, r18
 800:	20 81       	ld	r18, Z
 802:	fc 01       	movw	r30, r24
 804:	20 83       	st	Z, r18
			delay_ms(10);				// Delay for 0.01 sec
 806:	8a e0       	ldi	r24, 0x0A	; 10
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
			portCValue = PINC;			// Read port value from pinC
 80e:	83 e3       	ldi	r24, 0x33	; 51
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	fc 01       	movw	r30, r24
 814:	80 81       	ld	r24, Z
 816:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <portCValue>
		
			// Begin stepping through each column to check if row has logic 0
			if (portCValue != col[j])
 81a:	89 81       	ldd	r24, Y+1	; 0x01
 81c:	88 2f       	mov	r24, r24
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	8e 59       	subi	r24, 0x9E	; 158
 822:	9f 4f       	sbci	r25, 0xFF	; 255
 824:	fc 01       	movw	r30, r24
 826:	90 81       	ld	r25, Z
 828:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <portCValue>
 82c:	98 17       	cp	r25, r24
 82e:	e1 f0       	breq	.+56     	; 0x868 <__stack+0x9>
			{
				//rebounce??
				//Step through each key
				for(uint8_t k = 0; k < 16; k++)
 830:	1a 82       	std	Y+2, r1	; 0x02
 832:	17 c0       	rjmp	.+46     	; 0x862 <__stack+0x3>
				{
					if(portCValue == Keys[k])
 834:	8a 81       	ldd	r24, Y+2	; 0x02
 836:	88 2f       	mov	r24, r24
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	8a 59       	subi	r24, 0x9A	; 154
 83c:	9f 4f       	sbci	r25, 0xFF	; 255
 83e:	fc 01       	movw	r30, r24
 840:	90 81       	ld	r25, Z
 842:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <portCValue>
 846:	98 17       	cp	r25, r24
 848:	49 f4       	brne	.+18     	; 0x85c <ReadOne+0x7e>
					{
						key = k;
 84a:	8a 81       	ldd	r24, Y+2	; 0x02
 84c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
						//*portBPort = k;
						KeyPressed = 1;
 850:	81 e0       	ldi	r24, 0x01	; 1
 852:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <KeyPressed>
						//break;						//return here instead of break??
						return key;
 856:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 85a:	10 c0       	rjmp	.+32     	; 0x87c <__stack+0x1d>
			// Begin stepping through each column to check if row has logic 0
			if (portCValue != col[j])
			{
				//rebounce??
				//Step through each key
				for(uint8_t k = 0; k < 16; k++)
 85c:	8a 81       	ldd	r24, Y+2	; 0x02
 85e:	8f 5f       	subi	r24, 0xFF	; 255
 860:	8a 83       	std	Y+2, r24	; 0x02
 862:	8a 81       	ldd	r24, Y+2	; 0x02
 864:	80 31       	cpi	r24, 0x10	; 16
 866:	30 f3       	brcs	.-52     	; 0x834 <ReadOne+0x56>
	
	while(1)	//can get rid of while loop, it just keeps reading until a key is pressed instead of only reading once when its called
	{

		// Scanning column: write the column mask to port C
		for (uint8_t j=0; j<AmountOfColumns; j++)
 868:	89 81       	ldd	r24, Y+1	; 0x01
 86a:	8f 5f       	subi	r24, 0xFF	; 255
 86c:	89 83       	std	Y+1, r24	; 0x01
 86e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <AmountOfColumns>
 872:	99 81       	ldd	r25, Y+1	; 0x01
 874:	98 17       	cp	r25, r24
 876:	08 f4       	brcc	.+2      	; 0x87a <__stack+0x1b>
 878:	bb cf       	rjmp	.-138    	; 0x7f0 <ReadOne+0x12>
						return key;
					}		
				}
			}
		}
	}
 87a:	b8 cf       	rjmp	.-144    	; 0x7ec <ReadOne+0xe>
	return key;		//this should never execute
}
 87c:	0f 90       	pop	r0
 87e:	0f 90       	pop	r0
 880:	df 91       	pop	r29
 882:	cf 91       	pop	r28
 884:	08 95       	ret

00000886 <ReadNone>:
//**************************************************************************************************************************************************

//**************************************************************************************************************************************************
//Check if key has been lifted. ie debounce?
void ReadNone (void)
{
 886:	cf 93       	push	r28
 888:	df 93       	push	r29
 88a:	cd b7       	in	r28, 0x3d	; 61
 88c:	de b7       	in	r29, 0x3e	; 62
	if(keypad3x4==1)
 88e:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <keypad3x4>
 892:	81 30       	cpi	r24, 0x01	; 1
 894:	69 f4       	brne	.+26     	; 0x8b0 <ReadNone+0x2a>
	{
		while((PINC&0x6A)!=0x6A);	//exits when PINC inputs are all high 
 896:	00 00       	nop
 898:	83 e3       	ldi	r24, 0x33	; 51
 89a:	90 e0       	ldi	r25, 0x00	; 0
 89c:	fc 01       	movw	r30, r24
 89e:	80 81       	ld	r24, Z
 8a0:	88 2f       	mov	r24, r24
 8a2:	90 e0       	ldi	r25, 0x00	; 0
 8a4:	8a 76       	andi	r24, 0x6A	; 106
 8a6:	99 27       	eor	r25, r25
 8a8:	8a 36       	cpi	r24, 0x6A	; 106
 8aa:	91 05       	cpc	r25, r1
 8ac:	a9 f7       	brne	.-22     	; 0x898 <ReadNone+0x12>
	else
	{
		while((PINC&0x0F)!=0x0F);	//exits when PINC inputs are all high 
	}
	
}
 8ae:	0b c0       	rjmp	.+22     	; 0x8c6 <ReadNone+0x40>
	{
		while((PINC&0x6A)!=0x6A);	//exits when PINC inputs are all high 
	}
	else
	{
		while((PINC&0x0F)!=0x0F);	//exits when PINC inputs are all high 
 8b0:	00 00       	nop
 8b2:	83 e3       	ldi	r24, 0x33	; 51
 8b4:	90 e0       	ldi	r25, 0x00	; 0
 8b6:	fc 01       	movw	r30, r24
 8b8:	80 81       	ld	r24, Z
 8ba:	88 2f       	mov	r24, r24
 8bc:	90 e0       	ldi	r25, 0x00	; 0
 8be:	8f 70       	andi	r24, 0x0F	; 15
 8c0:	99 27       	eor	r25, r25
 8c2:	0f 97       	sbiw	r24, 0x0f	; 15
 8c4:	b1 f7       	brne	.-20     	; 0x8b2 <ReadNone+0x2c>
	}
	
}
 8c6:	00 00       	nop
 8c8:	df 91       	pop	r29
 8ca:	cf 91       	pop	r28
 8cc:	08 95       	ret

000008ce <InputPasscode>:
//**************************************************************************************************************************************************

//**************************************************************************************************************************************************
//Combine 6-8 digits into a passcode
uint32_t InputPasscode (void)
{
 8ce:	0f 93       	push	r16
 8d0:	1f 93       	push	r17
 8d2:	cf 93       	push	r28
 8d4:	df 93       	push	r29
 8d6:	cd b7       	in	r28, 0x3d	; 61
 8d8:	de b7       	in	r29, 0x3e	; 62
 8da:	27 97       	sbiw	r28, 0x07	; 7
 8dc:	0f b6       	in	r0, 0x3f	; 63
 8de:	f8 94       	cli
 8e0:	de bf       	out	0x3e, r29	; 62
 8e2:	0f be       	out	0x3f, r0	; 63
 8e4:	cd bf       	out	0x3d, r28	; 61
	uint32_t passcode = 0;
 8e6:	19 82       	std	Y+1, r1	; 0x01
 8e8:	1a 82       	std	Y+2, r1	; 0x02
 8ea:	1b 82       	std	Y+3, r1	; 0x03
 8ec:	1c 82       	std	Y+4, r1	; 0x04
	for (int i =0; i<8; i++)
 8ee:	1e 82       	std	Y+6, r1	; 0x06
 8f0:	1d 82       	std	Y+5, r1	; 0x05
 8f2:	4d c0       	rjmp	.+154    	; 0x98e <InputPasscode+0xc0>
	{
		uint8_t keyValue = ReadOne();	//store digit pressed by user
 8f4:	0e 94 ef 03 	call	0x7de	; 0x7de <ReadOne>
 8f8:	8f 83       	std	Y+7, r24	; 0x07
		
		if(keyValue==0xF)					//if # is pressed
 8fa:	8f 81       	ldd	r24, Y+7	; 0x07
 8fc:	8f 30       	cpi	r24, 0x0F	; 15
 8fe:	29 f4       	brne	.+10     	; 0x90a <InputPasscode+0x3c>
		{
			return passcode;
 900:	89 81       	ldd	r24, Y+1	; 0x01
 902:	9a 81       	ldd	r25, Y+2	; 0x02
 904:	ab 81       	ldd	r26, Y+3	; 0x03
 906:	bc 81       	ldd	r27, Y+4	; 0x04
 908:	53 c0       	rjmp	.+166    	; 0x9b0 <InputPasscode+0xe2>
		}
		
		//check if key pressed is a digit
		if(isDigit(keyValue))
 90a:	8f 81       	ldd	r24, Y+7	; 0x07
 90c:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <isDigit>
 910:	88 23       	and	r24, r24
 912:	89 f1       	breq	.+98     	; 0x976 <InputPasscode+0xa8>
		{
			PORTB = displayKeys(keyValue);	// output key being pressed to LEDs
 914:	08 e3       	ldi	r16, 0x38	; 56
 916:	10 e0       	ldi	r17, 0x00	; 0
 918:	8f 81       	ldd	r24, Y+7	; 0x07
 91a:	0e 94 de 01 	call	0x3bc	; 0x3bc <displayKeys>
 91e:	f8 01       	movw	r30, r16
 920:	80 83       	st	Z, r24
			ReadNone();						//waits until finger is lifted off button
 922:	0e 94 43 04 	call	0x886	; 0x886 <ReadNone>
			PORTB = 0x00;
 926:	88 e3       	ldi	r24, 0x38	; 56
 928:	90 e0       	ldi	r25, 0x00	; 0
 92a:	fc 01       	movw	r30, r24
 92c:	10 82       	st	Z, r1
			
			passcode = passcode*10 + keyValue;	//add each digit into a long int
 92e:	89 81       	ldd	r24, Y+1	; 0x01
 930:	9a 81       	ldd	r25, Y+2	; 0x02
 932:	ab 81       	ldd	r26, Y+3	; 0x03
 934:	bc 81       	ldd	r27, Y+4	; 0x04
 936:	88 0f       	add	r24, r24
 938:	99 1f       	adc	r25, r25
 93a:	aa 1f       	adc	r26, r26
 93c:	bb 1f       	adc	r27, r27
 93e:	9c 01       	movw	r18, r24
 940:	ad 01       	movw	r20, r26
 942:	22 0f       	add	r18, r18
 944:	33 1f       	adc	r19, r19
 946:	44 1f       	adc	r20, r20
 948:	55 1f       	adc	r21, r21
 94a:	22 0f       	add	r18, r18
 94c:	33 1f       	adc	r19, r19
 94e:	44 1f       	adc	r20, r20
 950:	55 1f       	adc	r21, r21
 952:	28 0f       	add	r18, r24
 954:	39 1f       	adc	r19, r25
 956:	4a 1f       	adc	r20, r26
 958:	5b 1f       	adc	r21, r27
 95a:	8f 81       	ldd	r24, Y+7	; 0x07
 95c:	88 2f       	mov	r24, r24
 95e:	90 e0       	ldi	r25, 0x00	; 0
 960:	a0 e0       	ldi	r26, 0x00	; 0
 962:	b0 e0       	ldi	r27, 0x00	; 0
 964:	82 0f       	add	r24, r18
 966:	93 1f       	adc	r25, r19
 968:	a4 1f       	adc	r26, r20
 96a:	b5 1f       	adc	r27, r21
 96c:	89 83       	std	Y+1, r24	; 0x01
 96e:	9a 83       	std	Y+2, r25	; 0x02
 970:	ab 83       	std	Y+3, r26	; 0x03
 972:	bc 83       	std	Y+4, r27	; 0x04
 974:	07 c0       	rjmp	.+14     	; 0x984 <InputPasscode+0xb6>
		}
		else
		{
			//not a valid input
			i--;		//dont increment length counter if not valid
 976:	8d 81       	ldd	r24, Y+5	; 0x05
 978:	9e 81       	ldd	r25, Y+6	; 0x06
 97a:	01 97       	sbiw	r24, 0x01	; 1
 97c:	9e 83       	std	Y+6, r25	; 0x06
 97e:	8d 83       	std	Y+5, r24	; 0x05
			displayIncorrect();
 980:	0e 94 b6 01 	call	0x36c	; 0x36c <displayIncorrect>
//**************************************************************************************************************************************************
//Combine 6-8 digits into a passcode
uint32_t InputPasscode (void)
{
	uint32_t passcode = 0;
	for (int i =0; i<8; i++)
 984:	8d 81       	ldd	r24, Y+5	; 0x05
 986:	9e 81       	ldd	r25, Y+6	; 0x06
 988:	01 96       	adiw	r24, 0x01	; 1
 98a:	9e 83       	std	Y+6, r25	; 0x06
 98c:	8d 83       	std	Y+5, r24	; 0x05
 98e:	8d 81       	ldd	r24, Y+5	; 0x05
 990:	9e 81       	ldd	r25, Y+6	; 0x06
 992:	08 97       	sbiw	r24, 0x08	; 8
 994:	0c f4       	brge	.+2      	; 0x998 <InputPasscode+0xca>
 996:	ae cf       	rjmp	.-164    	; 0x8f4 <InputPasscode+0x26>
	}
	/*
	while(!(ReadOne()==0xF));		//wait until reads a *
	return passcode	; */
	
	if((ReadOne()==0xF))		//if next key is a #
 998:	0e 94 ef 03 	call	0x7de	; 0x7de <ReadOne>
 99c:	8f 30       	cpi	r24, 0x0F	; 15
 99e:	29 f4       	brne	.+10     	; 0x9aa <InputPasscode+0xdc>
	{
		return passcode	;
 9a0:	89 81       	ldd	r24, Y+1	; 0x01
 9a2:	9a 81       	ldd	r25, Y+2	; 0x02
 9a4:	ab 81       	ldd	r26, Y+3	; 0x03
 9a6:	bc 81       	ldd	r27, Y+4	; 0x04
 9a8:	03 c0       	rjmp	.+6      	; 0x9b0 <InputPasscode+0xe2>
	}
	else
	{
		return 0;
 9aa:	80 e0       	ldi	r24, 0x00	; 0
 9ac:	90 e0       	ldi	r25, 0x00	; 0
 9ae:	dc 01       	movw	r26, r24
	}	
}
 9b0:	bc 01       	movw	r22, r24
 9b2:	cd 01       	movw	r24, r26
 9b4:	27 96       	adiw	r28, 0x07	; 7
 9b6:	0f b6       	in	r0, 0x3f	; 63
 9b8:	f8 94       	cli
 9ba:	de bf       	out	0x3e, r29	; 62
 9bc:	0f be       	out	0x3f, r0	; 63
 9be:	cd bf       	out	0x3d, r28	; 61
 9c0:	df 91       	pop	r29
 9c2:	cf 91       	pop	r28
 9c4:	1f 91       	pop	r17
 9c6:	0f 91       	pop	r16
 9c8:	08 95       	ret

000009ca <isUser>:
//**************************************************************************************************************************************************

//**************************************************************************************************************************************************
//is the input a letter, a,b,c, or d. returns 1 if a valid user code
uint8_t isUser (uint8_t buttonPressed)
{
 9ca:	cf 93       	push	r28
 9cc:	df 93       	push	r29
 9ce:	1f 92       	push	r1
 9d0:	cd b7       	in	r28, 0x3d	; 61
 9d2:	de b7       	in	r29, 0x3e	; 62
 9d4:	89 83       	std	Y+1, r24	; 0x01
	switch(buttonPressed)
 9d6:	89 81       	ldd	r24, Y+1	; 0x01
 9d8:	88 2f       	mov	r24, r24
 9da:	90 e0       	ldi	r25, 0x00	; 0
 9dc:	0a 97       	sbiw	r24, 0x0a	; 10
 9de:	04 97       	sbiw	r24, 0x04	; 4
 9e0:	10 f4       	brcc	.+4      	; 0x9e6 <isUser+0x1c>
	{
		case 0x0A:
		case 0x0B:
		case 0x0C:
		case 0x0D:
		return 1;
 9e2:	81 e0       	ldi	r24, 0x01	; 1
 9e4:	01 c0       	rjmp	.+2      	; 0x9e8 <isUser+0x1e>
		
		default:	//invalid user code		Set some debug flag here
		return 0;
 9e6:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 9e8:	0f 90       	pop	r0
 9ea:	df 91       	pop	r29
 9ec:	cf 91       	pop	r28
 9ee:	08 95       	ret

000009f0 <isDigit>:
//**************************************************************************************************************************************************

//**************************************************************************************************************************************************
//is the user input a digit. returns 1 if value is a digit
uint8_t isDigit (uint8_t buttonPressed)
{
 9f0:	cf 93       	push	r28
 9f2:	df 93       	push	r29
 9f4:	1f 92       	push	r1
 9f6:	cd b7       	in	r28, 0x3d	; 61
 9f8:	de b7       	in	r29, 0x3e	; 62
 9fa:	89 83       	std	Y+1, r24	; 0x01
	switch(buttonPressed)
 9fc:	89 81       	ldd	r24, Y+1	; 0x01
 9fe:	88 2f       	mov	r24, r24
 a00:	90 e0       	ldi	r25, 0x00	; 0
 a02:	0a 97       	sbiw	r24, 0x0a	; 10
 a04:	10 f4       	brcc	.+4      	; 0xa0a <isDigit+0x1a>
		case 0x05:
		case 0x06:
		case 0x07:
		case 0x08:
		case 0x09:
		return 1;
 a06:	81 e0       	ldi	r24, 0x01	; 1
 a08:	01 c0       	rjmp	.+2      	; 0xa0c <isDigit+0x1c>
		
		default:	//invalid user code		Set some debug flag here
		return 0;
 a0a:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 a0c:	0f 90       	pop	r0
 a0e:	df 91       	pop	r29
 a10:	cf 91       	pop	r28
 a12:	08 95       	ret

00000a14 <isHeld3s>:
//**************************************************************************************************************************************************

//**************************************************************************************************************************************************
//Return one if the selected key has been held for 3 seconds. return 0 if not
uint8_t isHeld3s (void)
{
 a14:	cf 93       	push	r28
 a16:	df 93       	push	r29
 a18:	1f 92       	push	r1
 a1a:	cd b7       	in	r28, 0x3d	; 61
 a1c:	de b7       	in	r29, 0x3e	; 62
	for(uint8_t i = 0; i<255; i++)
 a1e:	19 82       	std	Y+1, r1	; 0x01
 a20:	13 c0       	rjmp	.+38     	; 0xa48 <isHeld3s+0x34>
	{
		delay_ms(12);			//0.012*255 =3.06secs
 a22:	8c e0       	ldi	r24, 0x0C	; 12
 a24:	90 e0       	ldi	r25, 0x00	; 0
 a26:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
		if((PINC&0x0F)==0x0F)
 a2a:	83 e3       	ldi	r24, 0x33	; 51
 a2c:	90 e0       	ldi	r25, 0x00	; 0
 a2e:	fc 01       	movw	r30, r24
 a30:	80 81       	ld	r24, Z
 a32:	88 2f       	mov	r24, r24
 a34:	90 e0       	ldi	r25, 0x00	; 0
 a36:	8f 70       	andi	r24, 0x0F	; 15
 a38:	99 27       	eor	r25, r25
 a3a:	0f 97       	sbiw	r24, 0x0f	; 15
 a3c:	11 f4       	brne	.+4      	; 0xa42 <isHeld3s+0x2e>
		{
			return 0;
 a3e:	80 e0       	ldi	r24, 0x00	; 0
 a40:	07 c0       	rjmp	.+14     	; 0xa50 <isHeld3s+0x3c>

//**************************************************************************************************************************************************
//Return one if the selected key has been held for 3 seconds. return 0 if not
uint8_t isHeld3s (void)
{
	for(uint8_t i = 0; i<255; i++)
 a42:	89 81       	ldd	r24, Y+1	; 0x01
 a44:	8f 5f       	subi	r24, 0xFF	; 255
 a46:	89 83       	std	Y+1, r24	; 0x01
 a48:	89 81       	ldd	r24, Y+1	; 0x01
 a4a:	8f 3f       	cpi	r24, 0xFF	; 255
 a4c:	51 f7       	brne	.-44     	; 0xa22 <isHeld3s+0xe>
		if((PINC&0x0F)==0x0F)
		{
			return 0;
		}
	}
	return 1;
 a4e:	81 e0       	ldi	r24, 0x01	; 1
 a50:	0f 90       	pop	r0
 a52:	df 91       	pop	r29
 a54:	cf 91       	pop	r28
 a56:	08 95       	ret

00000a58 <main>:

// Global variables
uint8_t debugCode = 0;

int main(void)
{
 a58:	cf 93       	push	r28
 a5a:	df 93       	push	r29
 a5c:	00 d0       	rcall	.+0      	; 0xa5e <main+0x6>
 a5e:	00 d0       	rcall	.+0      	; 0xa60 <main+0x8>
 a60:	00 d0       	rcall	.+0      	; 0xa62 <main+0xa>
 a62:	cd b7       	in	r28, 0x3d	; 61
 a64:	de b7       	in	r29, 0x3e	; 62
	// Initialise everything
    initTimers();
 a66:	0e 94 cc 03 	call	0x798	; 0x798 <initTimers>
	initLEDs();
 a6a:	0e 94 8a 03 	call	0x714	; 0x714 <initLEDs>
	initKeypad();
 a6e:	0e 94 9b 03 	call	0x736	; 0x736 <initKeypad>
		storePasscode(00000000, 0xA+i);		//stores the password 00000000 into user slot if no previous code has been set
	}
	*/
	
	
	storePasscode(12345678, 0x0A);
 a72:	4a e0       	ldi	r20, 0x0A	; 10
 a74:	6e e4       	ldi	r22, 0x4E	; 78
 a76:	71 e6       	ldi	r23, 0x61	; 97
 a78:	8c eb       	ldi	r24, 0xBC	; 188
 a7a:	90 e0       	ldi	r25, 0x00	; 0
 a7c:	0e 94 95 02 	call	0x52a	; 0x52a <storePasscode>
	storePasscode(11223344, 0x0B);
 a80:	4b e0       	ldi	r20, 0x0B	; 11
 a82:	60 e3       	ldi	r22, 0x30	; 48
 a84:	71 e4       	ldi	r23, 0x41	; 65
 a86:	8b ea       	ldi	r24, 0xAB	; 171
 a88:	90 e0       	ldi	r25, 0x00	; 0
 a8a:	0e 94 95 02 	call	0x52a	; 0x52a <storePasscode>
	storePasscode(00000000, 0x0C);
 a8e:	4c e0       	ldi	r20, 0x0C	; 12
 a90:	60 e0       	ldi	r22, 0x00	; 0
 a92:	70 e0       	ldi	r23, 0x00	; 0
 a94:	cb 01       	movw	r24, r22
 a96:	0e 94 95 02 	call	0x52a	; 0x52a <storePasscode>
	storePasscode(00000000, 0x0D);
 a9a:	4d e0       	ldi	r20, 0x0D	; 13
 a9c:	60 e0       	ldi	r22, 0x00	; 0
 a9e:	70 e0       	ldi	r23, 0x00	; 0
 aa0:	cb 01       	movw	r24, r22
 aa2:	0e 94 95 02 	call	0x52a	; 0x52a <storePasscode>
	
	uint8_t attempts = 0;		// Set number of attempts to 0
 aa6:	19 82       	std	Y+1, r1	; 0x01

	// Start infinite loop
    while (1) 
    {
		uint8_t user = ReadOne();		//CHANGED added instead of For loop, determines the first key pressed
 aa8:	0e 94 ef 03 	call	0x7de	; 0x7de <ReadOne>
 aac:	8a 83       	std	Y+2, r24	; 0x02
		uint32_t attemptPasscode;
		
		
		if (isUser(user))	// Check if user A B C or D is chosen
 aae:	8a 81       	ldd	r24, Y+2	; 0x02
 ab0:	0e 94 e5 04 	call	0x9ca	; 0x9ca <isUser>
 ab4:	88 23       	and	r24, r24
 ab6:	c1 f1       	breq	.+112    	; 0xb28 <main+0xd0>
		{
			PORTB = user;
 ab8:	88 e3       	ldi	r24, 0x38	; 56
 aba:	90 e0       	ldi	r25, 0x00	; 0
 abc:	2a 81       	ldd	r18, Y+2	; 0x02
 abe:	fc 01       	movw	r30, r24
 ac0:	20 83       	st	Z, r18
			ReadNone();
 ac2:	0e 94 43 04 	call	0x886	; 0x886 <ReadNone>
			PORTB = 0;
 ac6:	88 e3       	ldi	r24, 0x38	; 56
 ac8:	90 e0       	ldi	r25, 0x00	; 0
 aca:	fc 01       	movw	r30, r24
 acc:	10 82       	st	Z, r1
			
			if (attempts < 3)	// Ensure number of passcode attempts < 3		//CHANGED from while to If as it would always stay in the while loop
 ace:	89 81       	ldd	r24, Y+1	; 0x01
 ad0:	83 30       	cpi	r24, 0x03	; 3
 ad2:	38 f5       	brcc	.+78     	; 0xb22 <main+0xca>
			{
				attemptPasscode = InputPasscode();		// Read the passcode from the keypad
 ad4:	0e 94 67 04 	call	0x8ce	; 0x8ce <InputPasscode>
 ad8:	dc 01       	movw	r26, r24
 ada:	cb 01       	movw	r24, r22
 adc:	8b 83       	std	Y+3, r24	; 0x03
 ade:	9c 83       	std	Y+4, r25	; 0x04
 ae0:	ad 83       	std	Y+5, r26	; 0x05
 ae2:	be 83       	std	Y+6, r27	; 0x06
				
				if (RecallPasscode(user) == attemptPasscode)	// If the attempted passcode is equal to the stored passcode, UNLOCK
 ae4:	8a 81       	ldd	r24, Y+2	; 0x02
 ae6:	0e 94 1d 03 	call	0x63a	; 0x63a <RecallPasscode>
 aea:	9b 01       	movw	r18, r22
 aec:	ac 01       	movw	r20, r24
 aee:	8b 81       	ldd	r24, Y+3	; 0x03
 af0:	9c 81       	ldd	r25, Y+4	; 0x04
 af2:	ad 81       	ldd	r26, Y+5	; 0x05
 af4:	be 81       	ldd	r27, Y+6	; 0x06
 af6:	28 17       	cp	r18, r24
 af8:	39 07       	cpc	r19, r25
 afa:	4a 07       	cpc	r20, r26
 afc:	5b 07       	cpc	r21, r27
 afe:	39 f4       	brne	.+14     	; 0xb0e <main+0xb6>
				{
					delay_ms(100);
 b00:	84 e6       	ldi	r24, 0x64	; 100
 b02:	90 e0       	ldi	r25, 0x00	; 0
 b04:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
					displayUnlock();
 b08:	0e 94 df 00 	call	0x1be	; 0x1be <displayUnlock>
 b0c:	cd cf       	rjmp	.-102    	; 0xaa8 <main+0x50>
				}
				else		// If incorrect, display LOCK 
				{
					delay_ms(100);
 b0e:	84 e6       	ldi	r24, 0x64	; 100
 b10:	90 e0       	ldi	r25, 0x00	; 0
 b12:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
					displayLock();
 b16:	0e 94 36 01 	call	0x26c	; 0x26c <displayLock>
					attempts = attempts + 1;	// Increment number of attempts by 1
 b1a:	89 81       	ldd	r24, Y+1	; 0x01
 b1c:	8f 5f       	subi	r24, 0xFF	; 255
 b1e:	89 83       	std	Y+1, r24	; 0x01
 b20:	c3 cf       	rjmp	.-122    	; 0xaa8 <main+0x50>
				}
			}
			else
			{
				// LOCKOUT when number of attempts is more than 3
				displayLockout();
 b22:	0e 94 1c 02 	call	0x438	; 0x438 <displayLockout>
 b26:	c0 cf       	rjmp	.-128    	; 0xaa8 <main+0x50>
			}	
		}
			
			
		else if (user == 0x0E)		// If the * is pressed
 b28:	8a 81       	ldd	r24, Y+2	; 0x02
 b2a:	8e 30       	cpi	r24, 0x0E	; 14
 b2c:	51 f4       	brne	.+20     	; 0xb42 <main+0xea>
		{
			if(isHeld3s())
 b2e:	0e 94 0a 05 	call	0xa14	; 0xa14 <isHeld3s>
 b32:	88 23       	and	r24, r24
 b34:	09 f4       	brne	.+2      	; 0xb38 <main+0xe0>
 b36:	b8 cf       	rjmp	.-144    	; 0xaa8 <main+0x50>
			{
				displayProgramming();
 b38:	0e 94 8e 01 	call	0x31c	; 0x31c <displayProgramming>
				// ENTER PROGRAMMING MODE - check for which user is pressed
				ProgramMode();
 b3c:	0e 94 a8 05 	call	0xb50	; 0xb50 <ProgramMode>
 b40:	b3 cf       	rjmp	.-154    	; 0xaa8 <main+0x50>
			}	
		}
			
		else // If any other key is pressed
		{
			delay_ms(100);
 b42:	84 e6       	ldi	r24, 0x64	; 100
 b44:	90 e0       	ldi	r25, 0x00	; 0
 b46:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
			displayIncorrect();
 b4a:	0e 94 b6 01 	call	0x36c	; 0x36c <displayIncorrect>
		}		
    }
 b4e:	ac cf       	rjmp	.-168    	; 0xaa8 <main+0x50>

00000b50 <ProgramMode>:

}


void ProgramMode(void)
{
 b50:	cf 93       	push	r28
 b52:	df 93       	push	r29
 b54:	00 d0       	rcall	.+0      	; 0xb56 <ProgramMode+0x6>
 b56:	00 d0       	rcall	.+0      	; 0xb58 <ProgramMode+0x8>
 b58:	00 d0       	rcall	.+0      	; 0xb5a <ProgramMode+0xa>
 b5a:	cd b7       	in	r28, 0x3d	; 61
 b5c:	de b7       	in	r29, 0x3e	; 62
	ReadNone(); //wait until nothing is pressed
 b5e:	0e 94 43 04 	call	0x886	; 0x886 <ReadNone>
	uint8_t attempts = 0;		// Set number of attempts to 0
 b62:	19 82       	std	Y+1, r1	; 0x01
	// ENTER PROGRAMMING MODE - check for which user is pressed
	while(1)
	{
		
		uint8_t user = ReadOne();		//CHANGED added instead of For loop, determines the first key pressed
 b64:	0e 94 ef 03 	call	0x7de	; 0x7de <ReadOne>
 b68:	8a 83       	std	Y+2, r24	; 0x02
		uint32_t attemptPasscode;
	
	
		if (isUser(user))	// Check if user A B C or D is chosen
 b6a:	8a 81       	ldd	r24, Y+2	; 0x02
 b6c:	0e 94 e5 04 	call	0x9ca	; 0x9ca <isUser>
 b70:	88 23       	and	r24, r24
 b72:	09 f4       	brne	.+2      	; 0xb76 <ProgramMode+0x26>
 b74:	44 c0       	rjmp	.+136    	; 0xbfe <ProgramMode+0xae>
		{
			PORTB = user;
 b76:	88 e3       	ldi	r24, 0x38	; 56
 b78:	90 e0       	ldi	r25, 0x00	; 0
 b7a:	2a 81       	ldd	r18, Y+2	; 0x02
 b7c:	fc 01       	movw	r30, r24
 b7e:	20 83       	st	Z, r18
			ReadNone();
 b80:	0e 94 43 04 	call	0x886	; 0x886 <ReadNone>
			PORTB = 0;
 b84:	88 e3       	ldi	r24, 0x38	; 56
 b86:	90 e0       	ldi	r25, 0x00	; 0
 b88:	fc 01       	movw	r30, r24
 b8a:	10 82       	st	Z, r1
		
			if (attempts < 3)	// Ensure number of passcode attempts < 3		//CHANGED from while to If as it would always stay in the while loop
 b8c:	89 81       	ldd	r24, Y+1	; 0x01
 b8e:	83 30       	cpi	r24, 0x03	; 3
 b90:	98 f5       	brcc	.+102    	; 0xbf8 <ProgramMode+0xa8>
			{
				attemptPasscode = InputPasscode();		// Read the passcode from the keypad
 b92:	0e 94 67 04 	call	0x8ce	; 0x8ce <InputPasscode>
 b96:	dc 01       	movw	r26, r24
 b98:	cb 01       	movw	r24, r22
 b9a:	8b 83       	std	Y+3, r24	; 0x03
 b9c:	9c 83       	std	Y+4, r25	; 0x04
 b9e:	ad 83       	std	Y+5, r26	; 0x05
 ba0:	be 83       	std	Y+6, r27	; 0x06
			
				if (RecallPasscode(user) == attemptPasscode)	// If the attempted passcode is equal to the stored passcode, UNLOCK
 ba2:	8a 81       	ldd	r24, Y+2	; 0x02
 ba4:	0e 94 1d 03 	call	0x63a	; 0x63a <RecallPasscode>
 ba8:	9b 01       	movw	r18, r22
 baa:	ac 01       	movw	r20, r24
 bac:	8b 81       	ldd	r24, Y+3	; 0x03
 bae:	9c 81       	ldd	r25, Y+4	; 0x04
 bb0:	ad 81       	ldd	r26, Y+5	; 0x05
 bb2:	be 81       	ldd	r27, Y+6	; 0x06
 bb4:	28 17       	cp	r18, r24
 bb6:	39 07       	cpc	r19, r25
 bb8:	4a 07       	cpc	r20, r26
 bba:	5b 07       	cpc	r21, r27
 bbc:	99 f4       	brne	.+38     	; 0xbe4 <ProgramMode+0x94>
				{
					delay_ms(100);
 bbe:	84 e6       	ldi	r24, 0x64	; 100
 bc0:	90 e0       	ldi	r25, 0x00	; 0
 bc2:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
					displayUnlock();
 bc6:	0e 94 df 00 	call	0x1be	; 0x1be <displayUnlock>
				
					storePasscode(InputPasscode(),user);
 bca:	0e 94 67 04 	call	0x8ce	; 0x8ce <InputPasscode>
 bce:	dc 01       	movw	r26, r24
 bd0:	cb 01       	movw	r24, r22
 bd2:	4a 81       	ldd	r20, Y+2	; 0x02
 bd4:	bc 01       	movw	r22, r24
 bd6:	cd 01       	movw	r24, r26
 bd8:	0e 94 95 02 	call	0x52a	; 0x52a <storePasscode>
					displayUnlock();
 bdc:	0e 94 df 00 	call	0x1be	; 0x1be <displayUnlock>
					attempts =0;
 be0:	19 82       	std	Y+1, r1	; 0x01
					return;
 be2:	14 c0       	rjmp	.+40     	; 0xc0c <ProgramMode+0xbc>
				}
				else		// If incorrect, display LOCK
				{
					delay_ms(100);
 be4:	84 e6       	ldi	r24, 0x64	; 100
 be6:	90 e0       	ldi	r25, 0x00	; 0
 be8:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
					displayLock();
 bec:	0e 94 36 01 	call	0x26c	; 0x26c <displayLock>
					attempts = attempts + 1;	// Increment number of attempts by 1
 bf0:	89 81       	ldd	r24, Y+1	; 0x01
 bf2:	8f 5f       	subi	r24, 0xFF	; 255
 bf4:	89 83       	std	Y+1, r24	; 0x01
 bf6:	b6 cf       	rjmp	.-148    	; 0xb64 <ProgramMode+0x14>
			}
			else
			{
				// LOCKOUT when number of attempts is more than 3
				
				displayLockout();
 bf8:	0e 94 1c 02 	call	0x438	; 0x438 <displayLockout>
				return;
 bfc:	07 c0       	rjmp	.+14     	; 0xc0c <ProgramMode+0xbc>
			}
		}
		else // If any other key is pressed
		{
			delay_ms(100);
 bfe:	84 e6       	ldi	r24, 0x64	; 100
 c00:	90 e0       	ldi	r25, 0x00	; 0
 c02:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
			displayIncorrect();
 c06:	0e 94 b6 01 	call	0x36c	; 0x36c <displayIncorrect>
		}
	}
 c0a:	ac cf       	rjmp	.-168    	; 0xb64 <ProgramMode+0x14>
 c0c:	26 96       	adiw	r28, 0x06	; 6
 c0e:	0f b6       	in	r0, 0x3f	; 63
 c10:	f8 94       	cli
 c12:	de bf       	out	0x3e, r29	; 62
 c14:	0f be       	out	0x3f, r0	; 63
 c16:	cd bf       	out	0x3d, r28	; 61
 c18:	df 91       	pop	r29
 c1a:	cf 91       	pop	r28
 c1c:	08 95       	ret

00000c1e <__tablejump2__>:
 c1e:	ee 0f       	add	r30, r30
 c20:	ff 1f       	adc	r31, r31
 c22:	05 90       	lpm	r0, Z+
 c24:	f4 91       	lpm	r31, Z
 c26:	e0 2d       	mov	r30, r0
 c28:	09 94       	ijmp

00000c2a <_exit>:
 c2a:	f8 94       	cli

00000c2c <__stop_program>:
 c2c:	ff cf       	rjmp	.-2      	; 0xc2c <__stop_program>
