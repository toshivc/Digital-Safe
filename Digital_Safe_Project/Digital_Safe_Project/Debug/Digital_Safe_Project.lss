
Digital_Safe_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000036a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003be  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000822  00000000  00000000  000004cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000666  00000000  00000000  00000cee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005d7  00000000  00000000  00001354  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000150  00000000  00000000  0000192c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ab  00000000  00000000  00001a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000020c  00000000  00000000  00001e27  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00002033  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e6       	ldi	r30, 0x6A	; 106
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 87 01 	call	0x30e	; 0x30e <main>
  8a:	0c 94 b3 01 	jmp	0x366	; 0x366 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <delay>:


//****************************************************************************************
//Timer with minimum time of 0.01 seconds, max time of 11mins
void delay(uint16_t delayTime)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	00 d0       	rcall	.+0      	; 0x98 <delay+0x6>
  98:	00 d0       	rcall	.+0      	; 0x9a <delay+0x8>
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	9c 83       	std	Y+4, r25	; 0x04
  a0:	8b 83       	std	Y+3, r24	; 0x03
	//12MHz divided by 1024 is 11.718KHz, or clock time of 85.3micro seconds
	//multiplied by 118 gives 0.010069 seconds
	
	TCNT0 = 0x00;		//reset timer to 0
  a2:	82 e5       	ldi	r24, 0x52	; 82
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	fc 01       	movw	r30, r24
  a8:	10 82       	st	Z, r1
	OCR0 = 118;			//set compare register 
  aa:	8c e5       	ldi	r24, 0x5C	; 92
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	26 e7       	ldi	r18, 0x76	; 118
  b0:	fc 01       	movw	r30, r24
  b2:	20 83       	st	Z, r18
	TIFR = (1<<OCF0);	//reset compare flag
  b4:	88 e5       	ldi	r24, 0x58	; 88
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	22 e0       	ldi	r18, 0x02	; 2
  ba:	fc 01       	movw	r30, r24
  bc:	20 83       	st	Z, r18
	
	uint16_t overflowCounter = 0;
  be:	1a 82       	std	Y+2, r1	; 0x02
  c0:	19 82       	std	Y+1, r1	; 0x01
	
	while (1)
	{
		while((TIFR & (1<<OCF0))==0); //while OCF0, overflow flag is 0
  c2:	00 00       	nop
  c4:	88 e5       	ldi	r24, 0x58	; 88
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	fc 01       	movw	r30, r24
  ca:	80 81       	ld	r24, Z
  cc:	88 2f       	mov	r24, r24
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	82 70       	andi	r24, 0x02	; 2
  d2:	99 27       	eor	r25, r25
  d4:	89 2b       	or	r24, r25
  d6:	b1 f3       	breq	.-20     	; 0xc4 <delay+0x32>
		TCNT0 = 0x00;		//reset timer to 0
  d8:	82 e5       	ldi	r24, 0x52	; 82
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	fc 01       	movw	r30, r24
  de:	10 82       	st	Z, r1
		TIFR = (1<<OCF0); //reset compare flag
  e0:	88 e5       	ldi	r24, 0x58	; 88
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	22 e0       	ldi	r18, 0x02	; 2
  e6:	fc 01       	movw	r30, r24
  e8:	20 83       	st	Z, r18
		overflowCounter++;
  ea:	89 81       	ldd	r24, Y+1	; 0x01
  ec:	9a 81       	ldd	r25, Y+2	; 0x02
  ee:	01 96       	adiw	r24, 0x01	; 1
  f0:	9a 83       	std	Y+2, r25	; 0x02
  f2:	89 83       	std	Y+1, r24	; 0x01
		if (overflowCounter >= delayTime)
  f4:	29 81       	ldd	r18, Y+1	; 0x01
  f6:	3a 81       	ldd	r19, Y+2	; 0x02
  f8:	8b 81       	ldd	r24, Y+3	; 0x03
  fa:	9c 81       	ldd	r25, Y+4	; 0x04
  fc:	28 17       	cp	r18, r24
  fe:	39 07       	cpc	r19, r25
 100:	08 f4       	brcc	.+2      	; 0x104 <delay+0x72>
		{
			return;
		}
	}	
 102:	df cf       	rjmp	.-66     	; 0xc2 <delay+0x30>
		TCNT0 = 0x00;		//reset timer to 0
		TIFR = (1<<OCF0); //reset compare flag
		overflowCounter++;
		if (overflowCounter >= delayTime)
		{
			return;
 104:	00 00       	nop
		}
	}	
}
 106:	0f 90       	pop	r0
 108:	0f 90       	pop	r0
 10a:	0f 90       	pop	r0
 10c:	0f 90       	pop	r0
 10e:	df 91       	pop	r29
 110:	cf 91       	pop	r28
 112:	08 95       	ret

00000114 <displayUnlock>:
#include "Delay.h"


//unlock LED sequence
void displayUnlock (void)
{
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	00 d0       	rcall	.+0      	; 0x11a <displayUnlock+0x6>
 11a:	00 d0       	rcall	.+0      	; 0x11c <displayUnlock+0x8>
 11c:	cd b7       	in	r28, 0x3d	; 61
 11e:	de b7       	in	r29, 0x3e	; 62
	for (int i = 0; i <4; i++)
 120:	1a 82       	std	Y+2, r1	; 0x02
 122:	19 82       	std	Y+1, r1	; 0x01
 124:	1b c0       	rjmp	.+54     	; 0x15c <displayUnlock+0x48>
	{
		PORTB = 1<<(1+i*2);
 126:	88 e3       	ldi	r24, 0x38	; 56
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	29 81       	ldd	r18, Y+1	; 0x01
 12c:	3a 81       	ldd	r19, Y+2	; 0x02
 12e:	22 0f       	add	r18, r18
 130:	33 1f       	adc	r19, r19
 132:	a9 01       	movw	r20, r18
 134:	4f 5f       	subi	r20, 0xFF	; 255
 136:	5f 4f       	sbci	r21, 0xFF	; 255
 138:	21 e0       	ldi	r18, 0x01	; 1
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <displayUnlock+0x2e>
 13e:	22 0f       	add	r18, r18
 140:	33 1f       	adc	r19, r19
 142:	4a 95       	dec	r20
 144:	e2 f7       	brpl	.-8      	; 0x13e <displayUnlock+0x2a>
 146:	fc 01       	movw	r30, r24
 148:	20 83       	st	Z, r18
		delay(10);
 14a:	8a e0       	ldi	r24, 0x0A	; 10
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 49 00 	call	0x92	; 0x92 <delay>


//unlock LED sequence
void displayUnlock (void)
{
	for (int i = 0; i <4; i++)
 152:	89 81       	ldd	r24, Y+1	; 0x01
 154:	9a 81       	ldd	r25, Y+2	; 0x02
 156:	01 96       	adiw	r24, 0x01	; 1
 158:	9a 83       	std	Y+2, r25	; 0x02
 15a:	89 83       	std	Y+1, r24	; 0x01
 15c:	89 81       	ldd	r24, Y+1	; 0x01
 15e:	9a 81       	ldd	r25, Y+2	; 0x02
 160:	04 97       	sbiw	r24, 0x04	; 4
 162:	0c f3       	brlt	.-62     	; 0x126 <displayUnlock+0x12>
	{
		PORTB = 1<<(1+i*2);
		delay(10);
	}
	for (int i = 0; i <4; i++)
 164:	1c 82       	std	Y+4, r1	; 0x04
 166:	1b 82       	std	Y+3, r1	; 0x03
 168:	1c c0       	rjmp	.+56     	; 0x1a2 <displayUnlock+0x8e>
	{
		PORTB = 1<<(7-i*2);
 16a:	88 e3       	ldi	r24, 0x38	; 56
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	2b 81       	ldd	r18, Y+3	; 0x03
 170:	3c 81       	ldd	r19, Y+4	; 0x04
 172:	22 0f       	add	r18, r18
 174:	33 1f       	adc	r19, r19
 176:	47 e0       	ldi	r20, 0x07	; 7
 178:	50 e0       	ldi	r21, 0x00	; 0
 17a:	42 1b       	sub	r20, r18
 17c:	53 0b       	sbc	r21, r19
 17e:	21 e0       	ldi	r18, 0x01	; 1
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	02 c0       	rjmp	.+4      	; 0x188 <displayUnlock+0x74>
 184:	22 0f       	add	r18, r18
 186:	33 1f       	adc	r19, r19
 188:	4a 95       	dec	r20
 18a:	e2 f7       	brpl	.-8      	; 0x184 <displayUnlock+0x70>
 18c:	fc 01       	movw	r30, r24
 18e:	20 83       	st	Z, r18
		delay(10);
 190:	8a e0       	ldi	r24, 0x0A	; 10
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 49 00 	call	0x92	; 0x92 <delay>
	for (int i = 0; i <4; i++)
	{
		PORTB = 1<<(1+i*2);
		delay(10);
	}
	for (int i = 0; i <4; i++)
 198:	8b 81       	ldd	r24, Y+3	; 0x03
 19a:	9c 81       	ldd	r25, Y+4	; 0x04
 19c:	01 96       	adiw	r24, 0x01	; 1
 19e:	9c 83       	std	Y+4, r25	; 0x04
 1a0:	8b 83       	std	Y+3, r24	; 0x03
 1a2:	8b 81       	ldd	r24, Y+3	; 0x03
 1a4:	9c 81       	ldd	r25, Y+4	; 0x04
 1a6:	04 97       	sbiw	r24, 0x04	; 4
 1a8:	04 f3       	brlt	.-64     	; 0x16a <displayUnlock+0x56>
	{
		PORTB = 1<<(7-i*2);
		delay(10);
	}
	PORTB = 0x00;
 1aa:	88 e3       	ldi	r24, 0x38	; 56
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	fc 01       	movw	r30, r24
 1b0:	10 82       	st	Z, r1
}
 1b2:	00 00       	nop
 1b4:	0f 90       	pop	r0
 1b6:	0f 90       	pop	r0
 1b8:	0f 90       	pop	r0
 1ba:	0f 90       	pop	r0
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	08 95       	ret

000001c2 <displayLock>:
//****************************************************************************************

//****************************************************************************************
//unlock LED sequence
void displayLock (void)
{
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	00 d0       	rcall	.+0      	; 0x1c8 <displayLock+0x6>
 1c8:	00 d0       	rcall	.+0      	; 0x1ca <displayLock+0x8>
 1ca:	cd b7       	in	r28, 0x3d	; 61
 1cc:	de b7       	in	r29, 0x3e	; 62
	for (int i = 0; i <4; i++)
 1ce:	1a 82       	std	Y+2, r1	; 0x02
 1d0:	19 82       	std	Y+1, r1	; 0x01
 1d2:	19 c0       	rjmp	.+50     	; 0x206 <displayLock+0x44>
	{
		PORTB = 1<<(i*2);
 1d4:	88 e3       	ldi	r24, 0x38	; 56
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	29 81       	ldd	r18, Y+1	; 0x01
 1da:	3a 81       	ldd	r19, Y+2	; 0x02
 1dc:	a9 01       	movw	r20, r18
 1de:	44 0f       	add	r20, r20
 1e0:	55 1f       	adc	r21, r21
 1e2:	21 e0       	ldi	r18, 0x01	; 1
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <displayLock+0x2a>
 1e8:	22 0f       	add	r18, r18
 1ea:	33 1f       	adc	r19, r19
 1ec:	4a 95       	dec	r20
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <displayLock+0x26>
 1f0:	fc 01       	movw	r30, r24
 1f2:	20 83       	st	Z, r18
		delay(10);
 1f4:	8a e0       	ldi	r24, 0x0A	; 10
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 49 00 	call	0x92	; 0x92 <delay>

//****************************************************************************************
//unlock LED sequence
void displayLock (void)
{
	for (int i = 0; i <4; i++)
 1fc:	89 81       	ldd	r24, Y+1	; 0x01
 1fe:	9a 81       	ldd	r25, Y+2	; 0x02
 200:	01 96       	adiw	r24, 0x01	; 1
 202:	9a 83       	std	Y+2, r25	; 0x02
 204:	89 83       	std	Y+1, r24	; 0x01
 206:	89 81       	ldd	r24, Y+1	; 0x01
 208:	9a 81       	ldd	r25, Y+2	; 0x02
 20a:	04 97       	sbiw	r24, 0x04	; 4
 20c:	1c f3       	brlt	.-58     	; 0x1d4 <displayLock+0x12>
	{
		PORTB = 1<<(i*2);
		delay(10);
	}
	for (int i = 0; i <4; i++)
 20e:	1c 82       	std	Y+4, r1	; 0x04
 210:	1b 82       	std	Y+3, r1	; 0x03
 212:	1f c0       	rjmp	.+62     	; 0x252 <displayLock+0x90>
	{
		PORTB = 1<<(8-i*2);
 214:	88 e3       	ldi	r24, 0x38	; 56
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	44 e0       	ldi	r20, 0x04	; 4
 21a:	50 e0       	ldi	r21, 0x00	; 0
 21c:	2b 81       	ldd	r18, Y+3	; 0x03
 21e:	3c 81       	ldd	r19, Y+4	; 0x04
 220:	ba 01       	movw	r22, r20
 222:	62 1b       	sub	r22, r18
 224:	73 0b       	sbc	r23, r19
 226:	9b 01       	movw	r18, r22
 228:	a9 01       	movw	r20, r18
 22a:	44 0f       	add	r20, r20
 22c:	55 1f       	adc	r21, r21
 22e:	21 e0       	ldi	r18, 0x01	; 1
 230:	30 e0       	ldi	r19, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <displayLock+0x76>
 234:	22 0f       	add	r18, r18
 236:	33 1f       	adc	r19, r19
 238:	4a 95       	dec	r20
 23a:	e2 f7       	brpl	.-8      	; 0x234 <displayLock+0x72>
 23c:	fc 01       	movw	r30, r24
 23e:	20 83       	st	Z, r18
		delay(10);
 240:	8a e0       	ldi	r24, 0x0A	; 10
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 49 00 	call	0x92	; 0x92 <delay>
	for (int i = 0; i <4; i++)
	{
		PORTB = 1<<(i*2);
		delay(10);
	}
	for (int i = 0; i <4; i++)
 248:	8b 81       	ldd	r24, Y+3	; 0x03
 24a:	9c 81       	ldd	r25, Y+4	; 0x04
 24c:	01 96       	adiw	r24, 0x01	; 1
 24e:	9c 83       	std	Y+4, r25	; 0x04
 250:	8b 83       	std	Y+3, r24	; 0x03
 252:	8b 81       	ldd	r24, Y+3	; 0x03
 254:	9c 81       	ldd	r25, Y+4	; 0x04
 256:	04 97       	sbiw	r24, 0x04	; 4
 258:	ec f2       	brlt	.-70     	; 0x214 <displayLock+0x52>
	{
		PORTB = 1<<(8-i*2);
		delay(10);
	}
	PORTB = 0x00;
 25a:	88 e3       	ldi	r24, 0x38	; 56
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	fc 01       	movw	r30, r24
 260:	10 82       	st	Z, r1
}
 262:	00 00       	nop
 264:	0f 90       	pop	r0
 266:	0f 90       	pop	r0
 268:	0f 90       	pop	r0
 26a:	0f 90       	pop	r0
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	08 95       	ret

00000272 <displayProgramming>:
//****************************************************************************************

//****************************************************************************************
//Programming mode LED sequence
void displayProgramming(void)
{
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	00 d0       	rcall	.+0      	; 0x278 <displayProgramming+0x6>
 278:	cd b7       	in	r28, 0x3d	; 61
 27a:	de b7       	in	r29, 0x3e	; 62
	for (int i = 0; i <10; i++)
 27c:	1a 82       	std	Y+2, r1	; 0x02
 27e:	19 82       	std	Y+1, r1	; 0x01
 280:	16 c0       	rjmp	.+44     	; 0x2ae <displayProgramming+0x3c>
	{
		PORTB = 0xFF;
 282:	88 e3       	ldi	r24, 0x38	; 56
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	2f ef       	ldi	r18, 0xFF	; 255
 288:	fc 01       	movw	r30, r24
 28a:	20 83       	st	Z, r18
		delay(10);
 28c:	8a e0       	ldi	r24, 0x0A	; 10
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	0e 94 49 00 	call	0x92	; 0x92 <delay>
		PORTB = 0x00;
 294:	88 e3       	ldi	r24, 0x38	; 56
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	fc 01       	movw	r30, r24
 29a:	10 82       	st	Z, r1
		delay(10);
 29c:	8a e0       	ldi	r24, 0x0A	; 10
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	0e 94 49 00 	call	0x92	; 0x92 <delay>

//****************************************************************************************
//Programming mode LED sequence
void displayProgramming(void)
{
	for (int i = 0; i <10; i++)
 2a4:	89 81       	ldd	r24, Y+1	; 0x01
 2a6:	9a 81       	ldd	r25, Y+2	; 0x02
 2a8:	01 96       	adiw	r24, 0x01	; 1
 2aa:	9a 83       	std	Y+2, r25	; 0x02
 2ac:	89 83       	std	Y+1, r24	; 0x01
 2ae:	89 81       	ldd	r24, Y+1	; 0x01
 2b0:	9a 81       	ldd	r25, Y+2	; 0x02
 2b2:	0a 97       	sbiw	r24, 0x0a	; 10
 2b4:	34 f3       	brlt	.-52     	; 0x282 <displayProgramming+0x10>
		PORTB = 0xFF;
		delay(10);
		PORTB = 0x00;
		delay(10);
	}
}
 2b6:	00 00       	nop
 2b8:	0f 90       	pop	r0
 2ba:	0f 90       	pop	r0
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	08 95       	ret

000002c2 <initLEDs>:
void initKeypad(void)
{
	DDRC = 0xF0;		// Set rows to inputs and columns to outputs
	PORTC = 0x0F;		// Enable the pull-up resistors on the row inputs 
	PORTC = 0xFF;		// Set the columns to all on (idle state) & ensure pull-ups are still enabled
}
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
 2c6:	cd b7       	in	r28, 0x3d	; 61
 2c8:	de b7       	in	r29, 0x3e	; 62
 2ca:	87 e3       	ldi	r24, 0x37	; 55
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	2f ef       	ldi	r18, 0xFF	; 255
 2d0:	fc 01       	movw	r30, r24
 2d2:	20 83       	st	Z, r18
 2d4:	88 e3       	ldi	r24, 0x38	; 56
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	fc 01       	movw	r30, r24
 2da:	10 82       	st	Z, r1
 2dc:	00 00       	nop
 2de:	df 91       	pop	r29
 2e0:	cf 91       	pop	r28
 2e2:	08 95       	ret

000002e4 <initTimers>:


//****************************************************************************************
//Initialise Timers
void initTimers(void)
{
 2e4:	cf 93       	push	r28
 2e6:	df 93       	push	r29
 2e8:	cd b7       	in	r28, 0x3d	; 61
 2ea:	de b7       	in	r29, 0x3e	; 62
	//set timer counter to 0
	TCNT0 = 0x00;
 2ec:	82 e5       	ldi	r24, 0x52	; 82
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	fc 01       	movw	r30, r24
 2f2:	10 82       	st	Z, r1
	//set clock prescaler to divide by 1024
	TCCR0 |= (1<<CS00) | (0<<CS01) | (1<<CS02);
 2f4:	83 e5       	ldi	r24, 0x53	; 83
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	23 e5       	ldi	r18, 0x53	; 83
 2fa:	30 e0       	ldi	r19, 0x00	; 0
 2fc:	f9 01       	movw	r30, r18
 2fe:	20 81       	ld	r18, Z
 300:	25 60       	ori	r18, 0x05	; 5
 302:	fc 01       	movw	r30, r24
 304:	20 83       	st	Z, r18
}
 306:	00 00       	nop
 308:	df 91       	pop	r29
 30a:	cf 91       	pop	r28
 30c:	08 95       	ret

0000030e <main>:

// Global variables
uint8_t debugCode = 0;

int main(void)
{
 30e:	cf 93       	push	r28
 310:	df 93       	push	r29
 312:	cd b7       	in	r28, 0x3d	; 61
 314:	de b7       	in	r29, 0x3e	; 62
	// Initialise everything
    initTimers();
 316:	0e 94 72 01 	call	0x2e4	; 0x2e4 <initTimers>
	initLEDs();
 31a:	0e 94 61 01 	call	0x2c2	; 0x2c2 <initLEDs>
	
	displayUnlock();		//testing LEDs and delays, should flash various sequences on OUSB
 31e:	0e 94 8a 00 	call	0x114	; 0x114 <displayUnlock>
	delay(100);
 322:	84 e6       	ldi	r24, 0x64	; 100
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	0e 94 49 00 	call	0x92	; 0x92 <delay>
	displayLock();
 32a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <displayLock>
	delay(100);
 32e:	84 e6       	ldi	r24, 0x64	; 100
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	0e 94 49 00 	call	0x92	; 0x92 <delay>
	displayProgramming();
 336:	0e 94 39 01 	call	0x272	; 0x272 <displayProgramming>
	delay(5958);	//one min delay
 33a:	86 e4       	ldi	r24, 0x46	; 70
 33c:	97 e1       	ldi	r25, 0x17	; 23
 33e:	0e 94 49 00 	call	0x92	; 0x92 <delay>
	
    while (1) 
    {
		PORTB = 0xFF;
 342:	88 e3       	ldi	r24, 0x38	; 56
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	2f ef       	ldi	r18, 0xFF	; 255
 348:	fc 01       	movw	r30, r24
 34a:	20 83       	st	Z, r18
		delay(10);
 34c:	8a e0       	ldi	r24, 0x0A	; 10
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	0e 94 49 00 	call	0x92	; 0x92 <delay>
		PORTB = 0x00;
 354:	88 e3       	ldi	r24, 0x38	; 56
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	fc 01       	movw	r30, r24
 35a:	10 82       	st	Z, r1
		delay(30);
 35c:	8e e1       	ldi	r24, 0x1E	; 30
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	0e 94 49 00 	call	0x92	; 0x92 <delay>
    }
 364:	ee cf       	rjmp	.-36     	; 0x342 <main+0x34>

00000366 <_exit>:
 366:	f8 94       	cli

00000368 <__stop_program>:
 368:	ff cf       	rjmp	.-2      	; 0x368 <__stop_program>
