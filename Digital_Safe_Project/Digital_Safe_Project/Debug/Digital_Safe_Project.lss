
Digital_Safe_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000e18  00000eac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800074  00800074  00000ec0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ec0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ef0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  00000f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f58  00000000  00000000  000010ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000988  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f35  00000000  00000000  0000298c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003f8  00000000  00000000  000038c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005bb  00000000  00000000  00003cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000075f  00000000  00000000  00004277  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  000049d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	5a 02       	muls	r21, r26
  56:	5c 02       	muls	r21, r28
  58:	5e 02       	muls	r21, r30
  5a:	60 02       	muls	r22, r16
  5c:	62 02       	muls	r22, r18
  5e:	64 02       	muls	r22, r20
  60:	66 02       	muls	r22, r22
  62:	68 02       	muls	r22, r24
  64:	6a 02       	muls	r22, r26
  66:	6c 02       	muls	r22, r28
  68:	70 02       	muls	r23, r16
  6a:	72 02       	muls	r23, r18
  6c:	74 02       	muls	r23, r20
  6e:	76 02       	muls	r23, r22
  70:	78 02       	muls	r23, r24
  72:	78 02       	muls	r23, r24
  74:	6e 02       	muls	r22, r30

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf e5       	ldi	r28, 0x5F	; 95
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
  82:	10 e0       	ldi	r17, 0x00	; 0
  84:	a0 e6       	ldi	r26, 0x60	; 96
  86:	b0 e0       	ldi	r27, 0x00	; 0
  88:	e8 e1       	ldi	r30, 0x18	; 24
  8a:	fe e0       	ldi	r31, 0x0E	; 14
  8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
  8e:	05 90       	lpm	r0, Z+
  90:	0d 92       	st	X+, r0
  92:	a4 37       	cpi	r26, 0x74	; 116
  94:	b1 07       	cpc	r27, r17
  96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
  98:	20 e0       	ldi	r18, 0x00	; 0
  9a:	a4 e7       	ldi	r26, 0x74	; 116
  9c:	b0 e0       	ldi	r27, 0x00	; 0
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a7 37       	cpi	r26, 0x77	; 119
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 ba 05 	call	0xb74	; 0xb74 <main>
  ac:	0c 94 0a 07 	jmp	0xe14	; 0xe14 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <delay_ms>:


// ****************************************************************************************
//Timer with minimum time of 0.001 seconds ie 1ms, max time of 65sec
void delay_ms(uint16_t delayTime)
{
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	00 d0       	rcall	.+0      	; 0xba <delay_ms+0x6>
  ba:	00 d0       	rcall	.+0      	; 0xbc <delay_ms+0x8>
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
  c0:	9c 83       	std	Y+4, r25	; 0x04
  c2:	8b 83       	std	Y+3, r24	; 0x03
	//12MHz divided by 1024 is 11.718KHz, or clock time of 85.3micro seconds
	//multiplied by 12 gives 0.001024 seconds or 1.024 milliseconds
	
	TCNT0 = 0x00;		//reset timer to 0
  c4:	82 e5       	ldi	r24, 0x52	; 82
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	fc 01       	movw	r30, r24
  ca:	10 82       	st	Z, r1
	OCR0 = 12;			//set compare register 
  cc:	8c e5       	ldi	r24, 0x5C	; 92
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	2c e0       	ldi	r18, 0x0C	; 12
  d2:	fc 01       	movw	r30, r24
  d4:	20 83       	st	Z, r18
	TIFR = (1<<OCF0);	//reset compare flag
  d6:	88 e5       	ldi	r24, 0x58	; 88
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	22 e0       	ldi	r18, 0x02	; 2
  dc:	fc 01       	movw	r30, r24
  de:	20 83       	st	Z, r18
	
	uint16_t overflowCounter = 0;
  e0:	1a 82       	std	Y+2, r1	; 0x02
  e2:	19 82       	std	Y+1, r1	; 0x01
	
	while (1)
	{
		while((TIFR & (1<<OCF0))==0);	//while OCF0, overflow flag is 0
  e4:	00 00       	nop
  e6:	88 e5       	ldi	r24, 0x58	; 88
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	fc 01       	movw	r30, r24
  ec:	80 81       	ld	r24, Z
  ee:	88 2f       	mov	r24, r24
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	82 70       	andi	r24, 0x02	; 2
  f4:	99 27       	eor	r25, r25
  f6:	89 2b       	or	r24, r25
  f8:	b1 f3       	breq	.-20     	; 0xe6 <delay_ms+0x32>
		TCNT0 = 0x00;					//reset timer to 0
  fa:	82 e5       	ldi	r24, 0x52	; 82
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	fc 01       	movw	r30, r24
 100:	10 82       	st	Z, r1
		TIFR = (1<<OCF0);				 //reset compare flag
 102:	88 e5       	ldi	r24, 0x58	; 88
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	22 e0       	ldi	r18, 0x02	; 2
 108:	fc 01       	movw	r30, r24
 10a:	20 83       	st	Z, r18
		overflowCounter++;
 10c:	89 81       	ldd	r24, Y+1	; 0x01
 10e:	9a 81       	ldd	r25, Y+2	; 0x02
 110:	01 96       	adiw	r24, 0x01	; 1
 112:	9a 83       	std	Y+2, r25	; 0x02
 114:	89 83       	std	Y+1, r24	; 0x01
		if (overflowCounter >= delayTime)	//check if correct number of milliseconds have passed
 116:	29 81       	ldd	r18, Y+1	; 0x01
 118:	3a 81       	ldd	r19, Y+2	; 0x02
 11a:	8b 81       	ldd	r24, Y+3	; 0x03
 11c:	9c 81       	ldd	r25, Y+4	; 0x04
 11e:	28 17       	cp	r18, r24
 120:	39 07       	cpc	r19, r25
 122:	08 f4       	brcc	.+2      	; 0x126 <delay_ms+0x72>
		{
			return;
		}
	}	
 124:	df cf       	rjmp	.-66     	; 0xe4 <delay_ms+0x30>
		TCNT0 = 0x00;					//reset timer to 0
		TIFR = (1<<OCF0);				 //reset compare flag
		overflowCounter++;
		if (overflowCounter >= delayTime)	//check if correct number of milliseconds have passed
		{
			return;
 126:	00 00       	nop
		}
	}	
}
 128:	0f 90       	pop	r0
 12a:	0f 90       	pop	r0
 12c:	0f 90       	pop	r0
 12e:	0f 90       	pop	r0
 130:	df 91       	pop	r29
 132:	cf 91       	pop	r28
 134:	08 95       	ret

00000136 <delay_sec>:
// ****************************************************************************************

// ****************************************************************************************
//Timer with minimum time of 1 second, max time of 18hours
void delay_sec(uint16_t delayTime)
{
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	00 d0       	rcall	.+0      	; 0x13c <delay_sec+0x6>
 13c:	00 d0       	rcall	.+0      	; 0x13e <delay_sec+0x8>
 13e:	cd b7       	in	r28, 0x3d	; 61
 140:	de b7       	in	r29, 0x3e	; 62
 142:	9c 83       	std	Y+4, r25	; 0x04
 144:	8b 83       	std	Y+3, r24	; 0x03
	//delayTime = delayTime * 1000;
	//12MHz divided by 1024 is 11.718KHz, or clock time of 85.3micro seconds
	//multiplied by 11719 gives 1.00002 seconds
	
	TCNT1 = 0x0000;			//reset timer to 0
 146:	8c e4       	ldi	r24, 0x4C	; 76
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	fc 01       	movw	r30, r24
 14c:	11 82       	std	Z+1, r1	; 0x01
 14e:	10 82       	st	Z, r1
	OCR1A = 11719;			//set compare register 
 150:	8a e4       	ldi	r24, 0x4A	; 74
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	27 ec       	ldi	r18, 0xC7	; 199
 156:	3d e2       	ldi	r19, 0x2D	; 45
 158:	fc 01       	movw	r30, r24
 15a:	31 83       	std	Z+1, r19	; 0x01
 15c:	20 83       	st	Z, r18
	TIFR = (1<<OCF1A);		//reset compare flag
 15e:	88 e5       	ldi	r24, 0x58	; 88
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	20 e1       	ldi	r18, 0x10	; 16
 164:	fc 01       	movw	r30, r24
 166:	20 83       	st	Z, r18
	
	uint16_t overflowCounter = 0;
 168:	1a 82       	std	Y+2, r1	; 0x02
 16a:	19 82       	std	Y+1, r1	; 0x01
	
	while (1)
	{
		while((TIFR & (1<<OCF1A))==0);	 //while OCF0, overflow flag is 0
 16c:	00 00       	nop
 16e:	88 e5       	ldi	r24, 0x58	; 88
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	fc 01       	movw	r30, r24
 174:	80 81       	ld	r24, Z
 176:	88 2f       	mov	r24, r24
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	80 71       	andi	r24, 0x10	; 16
 17c:	99 27       	eor	r25, r25
 17e:	89 2b       	or	r24, r25
 180:	b1 f3       	breq	.-20     	; 0x16e <delay_sec+0x38>
		TCNT1 = 0x00;					//reset timer to 0
 182:	8c e4       	ldi	r24, 0x4C	; 76
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	fc 01       	movw	r30, r24
 188:	11 82       	std	Z+1, r1	; 0x01
 18a:	10 82       	st	Z, r1
		TIFR = (1<<OCF1A);				//reset compare flag
 18c:	88 e5       	ldi	r24, 0x58	; 88
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	20 e1       	ldi	r18, 0x10	; 16
 192:	fc 01       	movw	r30, r24
 194:	20 83       	st	Z, r18
		overflowCounter++;
 196:	89 81       	ldd	r24, Y+1	; 0x01
 198:	9a 81       	ldd	r25, Y+2	; 0x02
 19a:	01 96       	adiw	r24, 0x01	; 1
 19c:	9a 83       	std	Y+2, r25	; 0x02
 19e:	89 83       	std	Y+1, r24	; 0x01
		if (overflowCounter >= delayTime)	//check if correct number of milliseconds have passed
 1a0:	29 81       	ldd	r18, Y+1	; 0x01
 1a2:	3a 81       	ldd	r19, Y+2	; 0x02
 1a4:	8b 81       	ldd	r24, Y+3	; 0x03
 1a6:	9c 81       	ldd	r25, Y+4	; 0x04
 1a8:	28 17       	cp	r18, r24
 1aa:	39 07       	cpc	r19, r25
 1ac:	08 f4       	brcc	.+2      	; 0x1b0 <delay_sec+0x7a>
		{
			return;
		}
	}	
 1ae:	de cf       	rjmp	.-68     	; 0x16c <delay_sec+0x36>
		TCNT1 = 0x00;					//reset timer to 0
		TIFR = (1<<OCF1A);				//reset compare flag
		overflowCounter++;
		if (overflowCounter >= delayTime)	//check if correct number of milliseconds have passed
		{
			return;
 1b0:	00 00       	nop
		}
	}	
}
 1b2:	0f 90       	pop	r0
 1b4:	0f 90       	pop	r0
 1b6:	0f 90       	pop	r0
 1b8:	0f 90       	pop	r0
 1ba:	df 91       	pop	r29
 1bc:	cf 91       	pop	r28
 1be:	08 95       	ret

000001c0 <displayUnlock>:
#include "Delay.h"

//****************************************************************************************
//unlock LED sequence
void displayUnlock (void)
{
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
 1c4:	00 d0       	rcall	.+0      	; 0x1c6 <displayUnlock+0x6>
 1c6:	00 d0       	rcall	.+0      	; 0x1c8 <displayUnlock+0x8>
 1c8:	cd b7       	in	r28, 0x3d	; 61
 1ca:	de b7       	in	r29, 0x3e	; 62
	for (int i = 0; i <4; i++)
 1cc:	1a 82       	std	Y+2, r1	; 0x02
 1ce:	19 82       	std	Y+1, r1	; 0x01
 1d0:	1b c0       	rjmp	.+54     	; 0x208 <displayUnlock+0x48>
	{
		PORTB = 1<<(1+i*2);
 1d2:	88 e3       	ldi	r24, 0x38	; 56
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	29 81       	ldd	r18, Y+1	; 0x01
 1d8:	3a 81       	ldd	r19, Y+2	; 0x02
 1da:	22 0f       	add	r18, r18
 1dc:	33 1f       	adc	r19, r19
 1de:	a9 01       	movw	r20, r18
 1e0:	4f 5f       	subi	r20, 0xFF	; 255
 1e2:	5f 4f       	sbci	r21, 0xFF	; 255
 1e4:	21 e0       	ldi	r18, 0x01	; 1
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <displayUnlock+0x2e>
 1ea:	22 0f       	add	r18, r18
 1ec:	33 1f       	adc	r19, r19
 1ee:	4a 95       	dec	r20
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <displayUnlock+0x2a>
 1f2:	fc 01       	movw	r30, r24
 1f4:	20 83       	st	Z, r18
		delay_ms(100);
 1f6:	84 e6       	ldi	r24, 0x64	; 100
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>

//****************************************************************************************
//unlock LED sequence
void displayUnlock (void)
{
	for (int i = 0; i <4; i++)
 1fe:	89 81       	ldd	r24, Y+1	; 0x01
 200:	9a 81       	ldd	r25, Y+2	; 0x02
 202:	01 96       	adiw	r24, 0x01	; 1
 204:	9a 83       	std	Y+2, r25	; 0x02
 206:	89 83       	std	Y+1, r24	; 0x01
 208:	89 81       	ldd	r24, Y+1	; 0x01
 20a:	9a 81       	ldd	r25, Y+2	; 0x02
 20c:	04 97       	sbiw	r24, 0x04	; 4
 20e:	0c f3       	brlt	.-62     	; 0x1d2 <displayUnlock+0x12>
	{
		PORTB = 1<<(1+i*2);
		delay_ms(100);
	}
	for (int i = 0; i <4; i++)
 210:	1c 82       	std	Y+4, r1	; 0x04
 212:	1b 82       	std	Y+3, r1	; 0x03
 214:	1c c0       	rjmp	.+56     	; 0x24e <displayUnlock+0x8e>
	{
		PORTB = 1<<(7-i*2);
 216:	88 e3       	ldi	r24, 0x38	; 56
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	2b 81       	ldd	r18, Y+3	; 0x03
 21c:	3c 81       	ldd	r19, Y+4	; 0x04
 21e:	22 0f       	add	r18, r18
 220:	33 1f       	adc	r19, r19
 222:	47 e0       	ldi	r20, 0x07	; 7
 224:	50 e0       	ldi	r21, 0x00	; 0
 226:	42 1b       	sub	r20, r18
 228:	53 0b       	sbc	r21, r19
 22a:	21 e0       	ldi	r18, 0x01	; 1
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	02 c0       	rjmp	.+4      	; 0x234 <displayUnlock+0x74>
 230:	22 0f       	add	r18, r18
 232:	33 1f       	adc	r19, r19
 234:	4a 95       	dec	r20
 236:	e2 f7       	brpl	.-8      	; 0x230 <displayUnlock+0x70>
 238:	fc 01       	movw	r30, r24
 23a:	20 83       	st	Z, r18
		delay_ms(100);
 23c:	84 e6       	ldi	r24, 0x64	; 100
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
	for (int i = 0; i <4; i++)
	{
		PORTB = 1<<(1+i*2);
		delay_ms(100);
	}
	for (int i = 0; i <4; i++)
 244:	8b 81       	ldd	r24, Y+3	; 0x03
 246:	9c 81       	ldd	r25, Y+4	; 0x04
 248:	01 96       	adiw	r24, 0x01	; 1
 24a:	9c 83       	std	Y+4, r25	; 0x04
 24c:	8b 83       	std	Y+3, r24	; 0x03
 24e:	8b 81       	ldd	r24, Y+3	; 0x03
 250:	9c 81       	ldd	r25, Y+4	; 0x04
 252:	04 97       	sbiw	r24, 0x04	; 4
 254:	04 f3       	brlt	.-64     	; 0x216 <displayUnlock+0x56>
	{
		PORTB = 1<<(7-i*2);
		delay_ms(100);
	}
	PORTB = 0x00;
 256:	88 e3       	ldi	r24, 0x38	; 56
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	fc 01       	movw	r30, r24
 25c:	10 82       	st	Z, r1
	delay_ms(100);
 25e:	84 e6       	ldi	r24, 0x64	; 100
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
	PORTB = 0xAA;
 266:	88 e3       	ldi	r24, 0x38	; 56
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	2a ea       	ldi	r18, 0xAA	; 170
 26c:	fc 01       	movw	r30, r24
 26e:	20 83       	st	Z, r18
}
 270:	00 00       	nop
 272:	0f 90       	pop	r0
 274:	0f 90       	pop	r0
 276:	0f 90       	pop	r0
 278:	0f 90       	pop	r0
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
 27e:	08 95       	ret

00000280 <displayUnlockProg>:
//****************************************************************************************

//****************************************************************************************
//unlock LED sequence 0 program mode
void displayUnlockProg (void)
{
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
 284:	00 d0       	rcall	.+0      	; 0x286 <displayUnlockProg+0x6>
 286:	00 d0       	rcall	.+0      	; 0x288 <displayUnlockProg+0x8>
 288:	cd b7       	in	r28, 0x3d	; 61
 28a:	de b7       	in	r29, 0x3e	; 62
	for (int i = 0; i <4; i++)
 28c:	1a 82       	std	Y+2, r1	; 0x02
 28e:	19 82       	std	Y+1, r1	; 0x01
 290:	1b c0       	rjmp	.+54     	; 0x2c8 <displayUnlockProg+0x48>
	{
		PORTB = 1<<(1+i*2);
 292:	88 e3       	ldi	r24, 0x38	; 56
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	29 81       	ldd	r18, Y+1	; 0x01
 298:	3a 81       	ldd	r19, Y+2	; 0x02
 29a:	22 0f       	add	r18, r18
 29c:	33 1f       	adc	r19, r19
 29e:	a9 01       	movw	r20, r18
 2a0:	4f 5f       	subi	r20, 0xFF	; 255
 2a2:	5f 4f       	sbci	r21, 0xFF	; 255
 2a4:	21 e0       	ldi	r18, 0x01	; 1
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <displayUnlockProg+0x2e>
 2aa:	22 0f       	add	r18, r18
 2ac:	33 1f       	adc	r19, r19
 2ae:	4a 95       	dec	r20
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <displayUnlockProg+0x2a>
 2b2:	fc 01       	movw	r30, r24
 2b4:	20 83       	st	Z, r18
		delay_ms(100);
 2b6:	84 e6       	ldi	r24, 0x64	; 100
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>

//****************************************************************************************
//unlock LED sequence 0 program mode
void displayUnlockProg (void)
{
	for (int i = 0; i <4; i++)
 2be:	89 81       	ldd	r24, Y+1	; 0x01
 2c0:	9a 81       	ldd	r25, Y+2	; 0x02
 2c2:	01 96       	adiw	r24, 0x01	; 1
 2c4:	9a 83       	std	Y+2, r25	; 0x02
 2c6:	89 83       	std	Y+1, r24	; 0x01
 2c8:	89 81       	ldd	r24, Y+1	; 0x01
 2ca:	9a 81       	ldd	r25, Y+2	; 0x02
 2cc:	04 97       	sbiw	r24, 0x04	; 4
 2ce:	0c f3       	brlt	.-62     	; 0x292 <displayUnlockProg+0x12>
	{
		PORTB = 1<<(1+i*2);
		delay_ms(100);
	}
	for (int i = 0; i <4; i++)
 2d0:	1c 82       	std	Y+4, r1	; 0x04
 2d2:	1b 82       	std	Y+3, r1	; 0x03
 2d4:	1c c0       	rjmp	.+56     	; 0x30e <displayUnlockProg+0x8e>
	{
		PORTB = 1<<(7-i*2);
 2d6:	88 e3       	ldi	r24, 0x38	; 56
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	2b 81       	ldd	r18, Y+3	; 0x03
 2dc:	3c 81       	ldd	r19, Y+4	; 0x04
 2de:	22 0f       	add	r18, r18
 2e0:	33 1f       	adc	r19, r19
 2e2:	47 e0       	ldi	r20, 0x07	; 7
 2e4:	50 e0       	ldi	r21, 0x00	; 0
 2e6:	42 1b       	sub	r20, r18
 2e8:	53 0b       	sbc	r21, r19
 2ea:	21 e0       	ldi	r18, 0x01	; 1
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <displayUnlockProg+0x74>
 2f0:	22 0f       	add	r18, r18
 2f2:	33 1f       	adc	r19, r19
 2f4:	4a 95       	dec	r20
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <displayUnlockProg+0x70>
 2f8:	fc 01       	movw	r30, r24
 2fa:	20 83       	st	Z, r18
		delay_ms(100);
 2fc:	84 e6       	ldi	r24, 0x64	; 100
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
	for (int i = 0; i <4; i++)
	{
		PORTB = 1<<(1+i*2);
		delay_ms(100);
	}
	for (int i = 0; i <4; i++)
 304:	8b 81       	ldd	r24, Y+3	; 0x03
 306:	9c 81       	ldd	r25, Y+4	; 0x04
 308:	01 96       	adiw	r24, 0x01	; 1
 30a:	9c 83       	std	Y+4, r25	; 0x04
 30c:	8b 83       	std	Y+3, r24	; 0x03
 30e:	8b 81       	ldd	r24, Y+3	; 0x03
 310:	9c 81       	ldd	r25, Y+4	; 0x04
 312:	04 97       	sbiw	r24, 0x04	; 4
 314:	04 f3       	brlt	.-64     	; 0x2d6 <displayUnlockProg+0x56>
	{
		PORTB = 1<<(7-i*2);
		delay_ms(100);
	}
	PORTB = 0x00;
 316:	88 e3       	ldi	r24, 0x38	; 56
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	fc 01       	movw	r30, r24
 31c:	10 82       	st	Z, r1
}
 31e:	00 00       	nop
 320:	0f 90       	pop	r0
 322:	0f 90       	pop	r0
 324:	0f 90       	pop	r0
 326:	0f 90       	pop	r0
 328:	df 91       	pop	r29
 32a:	cf 91       	pop	r28
 32c:	08 95       	ret

0000032e <displayLock>:
//****************************************************************************************

//****************************************************************************************
//unlock LED sequence
void displayLock (void)
{
 32e:	cf 93       	push	r28
 330:	df 93       	push	r29
 332:	00 d0       	rcall	.+0      	; 0x334 <displayLock+0x6>
 334:	00 d0       	rcall	.+0      	; 0x336 <displayLock+0x8>
 336:	cd b7       	in	r28, 0x3d	; 61
 338:	de b7       	in	r29, 0x3e	; 62
	for (int i = 0; i <4; i++)
 33a:	1a 82       	std	Y+2, r1	; 0x02
 33c:	19 82       	std	Y+1, r1	; 0x01
 33e:	19 c0       	rjmp	.+50     	; 0x372 <displayLock+0x44>
	{
		PORTB = 1<<(i*2);
 340:	88 e3       	ldi	r24, 0x38	; 56
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	29 81       	ldd	r18, Y+1	; 0x01
 346:	3a 81       	ldd	r19, Y+2	; 0x02
 348:	a9 01       	movw	r20, r18
 34a:	44 0f       	add	r20, r20
 34c:	55 1f       	adc	r21, r21
 34e:	21 e0       	ldi	r18, 0x01	; 1
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	02 c0       	rjmp	.+4      	; 0x358 <displayLock+0x2a>
 354:	22 0f       	add	r18, r18
 356:	33 1f       	adc	r19, r19
 358:	4a 95       	dec	r20
 35a:	e2 f7       	brpl	.-8      	; 0x354 <displayLock+0x26>
 35c:	fc 01       	movw	r30, r24
 35e:	20 83       	st	Z, r18
		delay_ms(100);
 360:	84 e6       	ldi	r24, 0x64	; 100
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>

//****************************************************************************************
//unlock LED sequence
void displayLock (void)
{
	for (int i = 0; i <4; i++)
 368:	89 81       	ldd	r24, Y+1	; 0x01
 36a:	9a 81       	ldd	r25, Y+2	; 0x02
 36c:	01 96       	adiw	r24, 0x01	; 1
 36e:	9a 83       	std	Y+2, r25	; 0x02
 370:	89 83       	std	Y+1, r24	; 0x01
 372:	89 81       	ldd	r24, Y+1	; 0x01
 374:	9a 81       	ldd	r25, Y+2	; 0x02
 376:	04 97       	sbiw	r24, 0x04	; 4
 378:	1c f3       	brlt	.-58     	; 0x340 <displayLock+0x12>
	{
		PORTB = 1<<(i*2);
		delay_ms(100);
	}
	for (int i = 0; i <5; i++)
 37a:	1c 82       	std	Y+4, r1	; 0x04
 37c:	1b 82       	std	Y+3, r1	; 0x03
 37e:	1f c0       	rjmp	.+62     	; 0x3be <displayLock+0x90>
	{
		PORTB = 1<<(8-i*2);
 380:	88 e3       	ldi	r24, 0x38	; 56
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	44 e0       	ldi	r20, 0x04	; 4
 386:	50 e0       	ldi	r21, 0x00	; 0
 388:	2b 81       	ldd	r18, Y+3	; 0x03
 38a:	3c 81       	ldd	r19, Y+4	; 0x04
 38c:	ba 01       	movw	r22, r20
 38e:	62 1b       	sub	r22, r18
 390:	73 0b       	sbc	r23, r19
 392:	9b 01       	movw	r18, r22
 394:	a9 01       	movw	r20, r18
 396:	44 0f       	add	r20, r20
 398:	55 1f       	adc	r21, r21
 39a:	21 e0       	ldi	r18, 0x01	; 1
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <displayLock+0x76>
 3a0:	22 0f       	add	r18, r18
 3a2:	33 1f       	adc	r19, r19
 3a4:	4a 95       	dec	r20
 3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <displayLock+0x72>
 3a8:	fc 01       	movw	r30, r24
 3aa:	20 83       	st	Z, r18
		delay_ms(100);
 3ac:	84 e6       	ldi	r24, 0x64	; 100
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
	for (int i = 0; i <4; i++)
	{
		PORTB = 1<<(i*2);
		delay_ms(100);
	}
	for (int i = 0; i <5; i++)
 3b4:	8b 81       	ldd	r24, Y+3	; 0x03
 3b6:	9c 81       	ldd	r25, Y+4	; 0x04
 3b8:	01 96       	adiw	r24, 0x01	; 1
 3ba:	9c 83       	std	Y+4, r25	; 0x04
 3bc:	8b 83       	std	Y+3, r24	; 0x03
 3be:	8b 81       	ldd	r24, Y+3	; 0x03
 3c0:	9c 81       	ldd	r25, Y+4	; 0x04
 3c2:	05 97       	sbiw	r24, 0x05	; 5
 3c4:	ec f2       	brlt	.-70     	; 0x380 <displayLock+0x52>
	{
		PORTB = 1<<(8-i*2);
		delay_ms(100);
	}
	PORTB = 0x00;
 3c6:	88 e3       	ldi	r24, 0x38	; 56
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	fc 01       	movw	r30, r24
 3cc:	10 82       	st	Z, r1
}
 3ce:	00 00       	nop
 3d0:	0f 90       	pop	r0
 3d2:	0f 90       	pop	r0
 3d4:	0f 90       	pop	r0
 3d6:	0f 90       	pop	r0
 3d8:	df 91       	pop	r29
 3da:	cf 91       	pop	r28
 3dc:	08 95       	ret

000003de <displayProgramming>:
//****************************************************************************************

//****************************************************************************************
//Programming mode LED sequence
void displayProgramming(void)
{
 3de:	cf 93       	push	r28
 3e0:	df 93       	push	r29
 3e2:	00 d0       	rcall	.+0      	; 0x3e4 <displayProgramming+0x6>
 3e4:	cd b7       	in	r28, 0x3d	; 61
 3e6:	de b7       	in	r29, 0x3e	; 62
	for (int i = 0; i <6; i++)
 3e8:	1a 82       	std	Y+2, r1	; 0x02
 3ea:	19 82       	std	Y+1, r1	; 0x01
 3ec:	16 c0       	rjmp	.+44     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
	{
		PORTB = 0xFF;
 3ee:	88 e3       	ldi	r24, 0x38	; 56
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	2f ef       	ldi	r18, 0xFF	; 255
 3f4:	fc 01       	movw	r30, r24
 3f6:	20 83       	st	Z, r18
		delay_ms(100);
 3f8:	84 e6       	ldi	r24, 0x64	; 100
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
		PORTB = 0x00;
 400:	88 e3       	ldi	r24, 0x38	; 56
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	fc 01       	movw	r30, r24
 406:	10 82       	st	Z, r1
		delay_ms(100);
 408:	84 e6       	ldi	r24, 0x64	; 100
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>

//****************************************************************************************
//Programming mode LED sequence
void displayProgramming(void)
{
	for (int i = 0; i <6; i++)
 410:	89 81       	ldd	r24, Y+1	; 0x01
 412:	9a 81       	ldd	r25, Y+2	; 0x02
 414:	01 96       	adiw	r24, 0x01	; 1
 416:	9a 83       	std	Y+2, r25	; 0x02
 418:	89 83       	std	Y+1, r24	; 0x01
 41a:	89 81       	ldd	r24, Y+1	; 0x01
 41c:	9a 81       	ldd	r25, Y+2	; 0x02
 41e:	06 97       	sbiw	r24, 0x06	; 6
 420:	34 f3       	brlt	.-52     	; 0x3ee <displayProgramming+0x10>
		PORTB = 0xFF;
		delay_ms(100);
		PORTB = 0x00;
		delay_ms(100);
	}
}
 422:	00 00       	nop
 424:	0f 90       	pop	r0
 426:	0f 90       	pop	r0
 428:	df 91       	pop	r29
 42a:	cf 91       	pop	r28
 42c:	08 95       	ret

0000042e <displayIncorrect>:
//****************************************************************************************

//****************************************************************************************
//Programming mode LED sequence
void displayIncorrect(void)
{
 42e:	cf 93       	push	r28
 430:	df 93       	push	r29
 432:	00 d0       	rcall	.+0      	; 0x434 <displayIncorrect+0x6>
 434:	cd b7       	in	r28, 0x3d	; 61
 436:	de b7       	in	r29, 0x3e	; 62
	for (int i = 0; i <4; i++)
 438:	1a 82       	std	Y+2, r1	; 0x02
 43a:	19 82       	std	Y+1, r1	; 0x01
 43c:	16 c0       	rjmp	.+44     	; 0x46a <displayIncorrect+0x3c>
	{
		PORTB = 0x55;
 43e:	88 e3       	ldi	r24, 0x38	; 56
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	25 e5       	ldi	r18, 0x55	; 85
 444:	fc 01       	movw	r30, r24
 446:	20 83       	st	Z, r18
		delay_ms(80);
 448:	80 e5       	ldi	r24, 0x50	; 80
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
		PORTB = 0x00;
 450:	88 e3       	ldi	r24, 0x38	; 56
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	fc 01       	movw	r30, r24
 456:	10 82       	st	Z, r1
		delay_ms(80);
 458:	80 e5       	ldi	r24, 0x50	; 80
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>

//****************************************************************************************
//Programming mode LED sequence
void displayIncorrect(void)
{
	for (int i = 0; i <4; i++)
 460:	89 81       	ldd	r24, Y+1	; 0x01
 462:	9a 81       	ldd	r25, Y+2	; 0x02
 464:	01 96       	adiw	r24, 0x01	; 1
 466:	9a 83       	std	Y+2, r25	; 0x02
 468:	89 83       	std	Y+1, r24	; 0x01
 46a:	89 81       	ldd	r24, Y+1	; 0x01
 46c:	9a 81       	ldd	r25, Y+2	; 0x02
 46e:	04 97       	sbiw	r24, 0x04	; 4
 470:	34 f3       	brlt	.-52     	; 0x43e <displayIncorrect+0x10>
		PORTB = 0x55;
		delay_ms(80);
		PORTB = 0x00;
		delay_ms(80);
	}
}
 472:	00 00       	nop
 474:	0f 90       	pop	r0
 476:	0f 90       	pop	r0
 478:	df 91       	pop	r29
 47a:	cf 91       	pop	r28
 47c:	08 95       	ret

0000047e <displayKeys>:
//****************************************************************************************

//****************************************************************************************
// Convert binary value to more realistic LED representation
uint8_t displayKeys(uint8_t keyValue)
{
 47e:	cf 93       	push	r28
 480:	df 93       	push	r29
 482:	1f 92       	push	r1
 484:	cd b7       	in	r28, 0x3d	; 61
 486:	de b7       	in	r29, 0x3e	; 62
 488:	89 83       	std	Y+1, r24	; 0x01
	switch(keyValue)
 48a:	89 81       	ldd	r24, Y+1	; 0x01
 48c:	88 2f       	mov	r24, r24
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	09 2e       	mov	r0, r25
 492:	00 0c       	add	r0, r0
 494:	aa 0b       	sbc	r26, r26
 496:	bb 0b       	sbc	r27, r27
 498:	40 e0       	ldi	r20, 0x00	; 0
 49a:	50 e0       	ldi	r21, 0x00	; 0
 49c:	20 e1       	ldi	r18, 0x10	; 16
 49e:	30 e0       	ldi	r19, 0x00	; 0
 4a0:	84 1b       	sub	r24, r20
 4a2:	95 0b       	sbc	r25, r21
 4a4:	28 17       	cp	r18, r24
 4a6:	39 07       	cpc	r19, r25
 4a8:	18 f1       	brcs	.+70     	; 0x4f0 <displayKeys+0x72>
 4aa:	86 5d       	subi	r24, 0xD6	; 214
 4ac:	9f 4f       	sbci	r25, 0xFF	; 255
 4ae:	fc 01       	movw	r30, r24
 4b0:	0c 94 04 07 	jmp	0xe08	; 0xe08 <__tablejump2__>
	{
		case 0x00:
		return 0x00;
 4b4:	80 e0       	ldi	r24, 0x00	; 0
 4b6:	1d c0       	rjmp	.+58     	; 0x4f2 <displayKeys+0x74>
		break;
		
		case 0x01:
		return 0x01;
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	1b c0       	rjmp	.+54     	; 0x4f2 <displayKeys+0x74>
		break;
		
		case 0x02:
		return 0x02;
 4bc:	82 e0       	ldi	r24, 0x02	; 2
 4be:	19 c0       	rjmp	.+50     	; 0x4f2 <displayKeys+0x74>
		break;
		
		case 0x03:
		return 0x04;
 4c0:	84 e0       	ldi	r24, 0x04	; 4
 4c2:	17 c0       	rjmp	.+46     	; 0x4f2 <displayKeys+0x74>
		break;
		
		case 0x04:
		return 0x08;
 4c4:	88 e0       	ldi	r24, 0x08	; 8
 4c6:	15 c0       	rjmp	.+42     	; 0x4f2 <displayKeys+0x74>
		break;
		
		case 0x05:
		return 0x10;
 4c8:	80 e1       	ldi	r24, 0x10	; 16
 4ca:	13 c0       	rjmp	.+38     	; 0x4f2 <displayKeys+0x74>
		break;
		
		case 0x06:
		return 0x20;
 4cc:	80 e2       	ldi	r24, 0x20	; 32
 4ce:	11 c0       	rjmp	.+34     	; 0x4f2 <displayKeys+0x74>
		break;
		
		case 0x07:
		return 0x40;
 4d0:	80 e4       	ldi	r24, 0x40	; 64
 4d2:	0f c0       	rjmp	.+30     	; 0x4f2 <displayKeys+0x74>
		break;
		
		case 0x08:
		return 0x80;
 4d4:	80 e8       	ldi	r24, 0x80	; 128
 4d6:	0d c0       	rjmp	.+26     	; 0x4f2 <displayKeys+0x74>
		break;
		
		case 0x09:	
		return 0x81;
 4d8:	81 e8       	ldi	r24, 0x81	; 129
 4da:	0b c0       	rjmp	.+22     	; 0x4f2 <displayKeys+0x74>
		break;
		
		case 0x10:
		return 0x10;
 4dc:	80 e1       	ldi	r24, 0x10	; 16
 4de:	09 c0       	rjmp	.+18     	; 0x4f2 <displayKeys+0x74>
		break;
		
		case 0x0A:
		return 0x03;
 4e0:	83 e0       	ldi	r24, 0x03	; 3
 4e2:	07 c0       	rjmp	.+14     	; 0x4f2 <displayKeys+0x74>
		break;
		
		case 0x0B:
		return 0x0C;
 4e4:	8c e0       	ldi	r24, 0x0C	; 12
 4e6:	05 c0       	rjmp	.+10     	; 0x4f2 <displayKeys+0x74>
		break;
		
		case 0x0C:
		return 0x30;
 4e8:	80 e3       	ldi	r24, 0x30	; 48
 4ea:	03 c0       	rjmp	.+6      	; 0x4f2 <displayKeys+0x74>
		break;
		
		case 0x0D:
		return 0xC0;
 4ec:	80 ec       	ldi	r24, 0xC0	; 192
 4ee:	01 c0       	rjmp	.+2      	; 0x4f2 <displayKeys+0x74>
		break;
		
		default:
		return 0;
 4f0:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 4f2:	0f 90       	pop	r0
 4f4:	df 91       	pop	r29
 4f6:	cf 91       	pop	r28
 4f8:	08 95       	ret

000004fa <displayLockout>:
//****************************************************************************************

//****************************************************************************************
void displayLockout(void)
{
 4fa:	cf 93       	push	r28
 4fc:	df 93       	push	r29
 4fe:	cd b7       	in	r28, 0x3d	; 61
 500:	de b7       	in	r29, 0x3e	; 62
	PORTB = 0x55;
 502:	88 e3       	ldi	r24, 0x38	; 56
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	25 e5       	ldi	r18, 0x55	; 85
 508:	fc 01       	movw	r30, r24
 50a:	20 83       	st	Z, r18
	delay_sec(120);
 50c:	88 e7       	ldi	r24, 0x78	; 120
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	0e 94 9b 00 	call	0x136	; 0x136 <delay_sec>
	PORTB =0;
 514:	88 e3       	ldi	r24, 0x38	; 56
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	fc 01       	movw	r30, r24
 51a:	10 82       	st	Z, r1
}
 51c:	00 00       	nop
 51e:	df 91       	pop	r29
 520:	cf 91       	pop	r28
 522:	08 95       	ret

00000524 <displayUser>:
//****************************************************************************************

//****************************************************************************************
void displayUser(uint8_t user)
{
 524:	cf 93       	push	r28
 526:	df 93       	push	r29
 528:	1f 92       	push	r1
 52a:	cd b7       	in	r28, 0x3d	; 61
 52c:	de b7       	in	r29, 0x3e	; 62
 52e:	89 83       	std	Y+1, r24	; 0x01
	switch(user)
 530:	89 81       	ldd	r24, Y+1	; 0x01
 532:	88 2f       	mov	r24, r24
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	8b 30       	cpi	r24, 0x0B	; 11
 538:	91 05       	cpc	r25, r1
 53a:	91 f0       	breq	.+36     	; 0x560 <displayUser+0x3c>
 53c:	8c 30       	cpi	r24, 0x0C	; 12
 53e:	91 05       	cpc	r25, r1
 540:	1c f4       	brge	.+6      	; 0x548 <displayUser+0x24>
 542:	0a 97       	sbiw	r24, 0x0a	; 10
 544:	39 f0       	breq	.+14     	; 0x554 <displayUser+0x30>
		case 0x0D:
		PORTB = 0xC0;
		break;
			
		default:
		return;
 546:	1e c0       	rjmp	.+60     	; 0x584 <displayUser+0x60>
//****************************************************************************************

//****************************************************************************************
void displayUser(uint8_t user)
{
	switch(user)
 548:	8c 30       	cpi	r24, 0x0C	; 12
 54a:	91 05       	cpc	r25, r1
 54c:	79 f0       	breq	.+30     	; 0x56c <displayUser+0x48>
 54e:	0d 97       	sbiw	r24, 0x0d	; 13
 550:	99 f0       	breq	.+38     	; 0x578 <displayUser+0x54>
		case 0x0D:
		PORTB = 0xC0;
		break;
			
		default:
		return;
 552:	18 c0       	rjmp	.+48     	; 0x584 <displayUser+0x60>
void displayUser(uint8_t user)
{
	switch(user)
	{
		case 0x0A:
		PORTB = 0x03;
 554:	88 e3       	ldi	r24, 0x38	; 56
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	23 e0       	ldi	r18, 0x03	; 3
 55a:	fc 01       	movw	r30, r24
 55c:	20 83       	st	Z, r18
		break;
 55e:	12 c0       	rjmp	.+36     	; 0x584 <displayUser+0x60>
		
		case 0x0B:
		PORTB = 0x0C;
 560:	88 e3       	ldi	r24, 0x38	; 56
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	2c e0       	ldi	r18, 0x0C	; 12
 566:	fc 01       	movw	r30, r24
 568:	20 83       	st	Z, r18
		break;
 56a:	0c c0       	rjmp	.+24     	; 0x584 <displayUser+0x60>
			
		case 0x0C:
		PORTB = 0x30;
 56c:	88 e3       	ldi	r24, 0x38	; 56
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	20 e3       	ldi	r18, 0x30	; 48
 572:	fc 01       	movw	r30, r24
 574:	20 83       	st	Z, r18
		break;
 576:	06 c0       	rjmp	.+12     	; 0x584 <displayUser+0x60>
				
		case 0x0D:
		PORTB = 0xC0;
 578:	88 e3       	ldi	r24, 0x38	; 56
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	20 ec       	ldi	r18, 0xC0	; 192
 57e:	fc 01       	movw	r30, r24
 580:	20 83       	st	Z, r18
		break;
 582:	00 00       	nop
			
		default:
		return;
	}
 584:	0f 90       	pop	r0
 586:	df 91       	pop	r29
 588:	cf 91       	pop	r28
 58a:	08 95       	ret

0000058c <write_EEPROM>:
//Write to EEPROM
//Takes in the address of the location to write to, and the data to write into that address
//returns nothing(error code flag set)

void write_EEPROM(uint8_t WriteData, uint16_t WriteAddress)
{
 58c:	cf 93       	push	r28
 58e:	df 93       	push	r29
 590:	00 d0       	rcall	.+0      	; 0x592 <write_EEPROM+0x6>
 592:	1f 92       	push	r1
 594:	cd b7       	in	r28, 0x3d	; 61
 596:	de b7       	in	r29, 0x3e	; 62
 598:	89 83       	std	Y+1, r24	; 0x01
 59a:	7b 83       	std	Y+3, r23	; 0x03
 59c:	6a 83       	std	Y+2, r22	; 0x02
//should disable global interrupts here if we use them
	
	//check if address is valid
	if(WriteAddress > 0x400)	//only 2^10 = 1024 = 0x0400 addresses
 59e:	8a 81       	ldd	r24, Y+2	; 0x02
 5a0:	9b 81       	ldd	r25, Y+3	; 0x03
 5a2:	81 30       	cpi	r24, 0x01	; 1
 5a4:	94 40       	sbci	r25, 0x04	; 4
 5a6:	d8 f4       	brcc	.+54     	; 0x5de <write_EEPROM+0x52>
			return;			
		}
	
	
	//Wait till previous write operation is completed(i.e. wait till EEWE becomes zero).
	while(EECR & (1 << EEWE));	//b 0000 0010
 5a8:	00 00       	nop
 5aa:	8c e3       	ldi	r24, 0x3C	; 60
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	fc 01       	movw	r30, r24
 5b0:	80 81       	ld	r24, Z
 5b2:	88 2f       	mov	r24, r24
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	82 70       	andi	r24, 0x02	; 2
 5b8:	99 27       	eor	r25, r25
 5ba:	89 2b       	or	r24, r25
 5bc:	b1 f7       	brne	.-20     	; 0x5aa <write_EEPROM+0x1e>
	//Wait until SPMEN in SPMCR becomes zero		Dont think this step is necessary
	// only relevant if the software contains a boot loader allowing the CPU to program the Flash. If the Flash is never being updated by the CPU, can be omitted

	//Load the EEPROM address into EEAR at which the data has to be stored.
	//high and low registers, high register will always be 0 for us.
	EEAR = WriteAddress;
 5be:	8e e3       	ldi	r24, 0x3E	; 62
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	2a 81       	ldd	r18, Y+2	; 0x02
 5c4:	3b 81       	ldd	r19, Y+3	; 0x03
 5c6:	fc 01       	movw	r30, r24
 5c8:	31 83       	std	Z+1, r19	; 0x01
 5ca:	20 83       	st	Z, r18

	//Load the data into EEDR which has to be stored in EEPROM.
	EEDR = WriteData;
 5cc:	8d e3       	ldi	r24, 0x3D	; 61
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	29 81       	ldd	r18, Y+1	; 0x01
 5d2:	fc 01       	movw	r30, r24
 5d4:	20 83       	st	Z, r18

	//Set the EEMWE (EEPROM Master Write Enable).
	asm("SBI 0x1C, 0x02");
 5d6:	e2 9a       	sbi	0x1c, 2	; 28

	//Within four clock cycles after 4th step, set EEWE(Eeprom Write Enable) to 1 to trigger the EEPROM Write Operation
	asm("SBI 0x1C, 0x01");
 5d8:	e1 9a       	sbi	0x1c, 1	; 28
return;
 5da:	00 00       	nop
 5dc:	01 c0       	rjmp	.+2      	; 0x5e0 <write_EEPROM+0x54>
	
	//check if address is valid
	if(WriteAddress > 0x400)	//only 2^10 = 1024 = 0x0400 addresses
		{
			//errorFlag =3;		//Set a debug flag
			return;			
 5de:	00 00       	nop
	asm("SBI 0x1C, 0x02");

	//Within four clock cycles after 4th step, set EEWE(Eeprom Write Enable) to 1 to trigger the EEPROM Write Operation
	asm("SBI 0x1C, 0x01");
return;
}
 5e0:	0f 90       	pop	r0
 5e2:	0f 90       	pop	r0
 5e4:	0f 90       	pop	r0
 5e6:	df 91       	pop	r29
 5e8:	cf 91       	pop	r28
 5ea:	08 95       	ret

000005ec <read_EEPROM>:
//****************************************************************************************

//****************************************************************************************
//Read EEPROM
uint8_t read_EEPROM(uint16_t readAddress)
{
 5ec:	cf 93       	push	r28
 5ee:	df 93       	push	r29
 5f0:	00 d0       	rcall	.+0      	; 0x5f2 <read_EEPROM+0x6>
 5f2:	cd b7       	in	r28, 0x3d	; 61
 5f4:	de b7       	in	r29, 0x3e	; 62
 5f6:	9a 83       	std	Y+2, r25	; 0x02
 5f8:	89 83       	std	Y+1, r24	; 0x01
	//check if address is valid
	if(readAddress > 0x400)	//only 2^10 = 1024 = 0x0400 addresses
 5fa:	89 81       	ldd	r24, Y+1	; 0x01
 5fc:	9a 81       	ldd	r25, Y+2	; 0x02
 5fe:	81 30       	cpi	r24, 0x01	; 1
 600:	94 40       	sbci	r25, 0x04	; 4
 602:	10 f0       	brcs	.+4      	; 0x608 <read_EEPROM+0x1c>
	{
		//errorFlag =3;		//Set some debug flag?
		return 0;			
 604:	80 e0       	ldi	r24, 0x00	; 0
 606:	1f c0       	rjmp	.+62     	; 0x646 <read_EEPROM+0x5a>
	}
	
	//WAit for completion of previous Write operation.
	while(EECR & (1 << EEWE));
 608:	00 00       	nop
 60a:	8c e3       	ldi	r24, 0x3C	; 60
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	fc 01       	movw	r30, r24
 610:	80 81       	ld	r24, Z
 612:	88 2f       	mov	r24, r24
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	82 70       	andi	r24, 0x02	; 2
 618:	99 27       	eor	r25, r25
 61a:	89 2b       	or	r24, r25
 61c:	b1 f7       	brne	.-20     	; 0x60a <read_EEPROM+0x1e>

	//Load the EEPROM address into EEAR from where the data needs to be read.
	EEAR = readAddress;
 61e:	8e e3       	ldi	r24, 0x3E	; 62
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	29 81       	ldd	r18, Y+1	; 0x01
 624:	3a 81       	ldd	r19, Y+2	; 0x02
 626:	fc 01       	movw	r30, r24
 628:	31 83       	std	Z+1, r19	; 0x01
 62a:	20 83       	st	Z, r18

	//Trigger the EEPROM read operation by setting EERE (EEPROM Read Enable).
	EECR |= (1 <<EERE);
 62c:	8c e3       	ldi	r24, 0x3C	; 60
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	2c e3       	ldi	r18, 0x3C	; 60
 632:	30 e0       	ldi	r19, 0x00	; 0
 634:	f9 01       	movw	r30, r18
 636:	20 81       	ld	r18, Z
 638:	21 60       	ori	r18, 0x01	; 1
 63a:	fc 01       	movw	r30, r24
 63c:	20 83       	st	Z, r18

	//Wait for some time (about 1ms) and collect the read data from EEDR.
	return EEDR;
 63e:	8d e3       	ldi	r24, 0x3D	; 61
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	fc 01       	movw	r30, r24
 644:	80 81       	ld	r24, Z
}
 646:	0f 90       	pop	r0
 648:	0f 90       	pop	r0
 64a:	df 91       	pop	r29
 64c:	cf 91       	pop	r28
 64e:	08 95       	ret

00000650 <storePasscode>:
//****************************************************************************************
//Store Passcode stores 4 bytes of passcode into memory location defined by the user.
//32 bit passcode must be divided into 4 bytes
//each byte is stored in location 0x00XY, where X is the hex value of the user, and Y is which byte is being stored
void storePasscode (unsigned long int Passcode, uint8_t user)
{
 650:	cf 93       	push	r28
 652:	df 93       	push	r29
 654:	cd b7       	in	r28, 0x3d	; 61
 656:	de b7       	in	r29, 0x3e	; 62
 658:	29 97       	sbiw	r28, 0x09	; 9
 65a:	0f b6       	in	r0, 0x3f	; 63
 65c:	f8 94       	cli
 65e:	de bf       	out	0x3e, r29	; 62
 660:	0f be       	out	0x3f, r0	; 63
 662:	cd bf       	out	0x3d, r28	; 61
 664:	6d 83       	std	Y+5, r22	; 0x05
 666:	7e 83       	std	Y+6, r23	; 0x06
 668:	8f 83       	std	Y+7, r24	; 0x07
 66a:	98 87       	std	Y+8, r25	; 0x08
 66c:	49 87       	std	Y+9, r20	; 0x09
	//check if user input is valid
	if (!isUser(user))
 66e:	89 85       	ldd	r24, Y+9	; 0x09
 670:	0e 94 40 05 	call	0xa80	; 0xa80 <isUser>
 674:	88 23       	and	r24, r24
 676:	21 f4       	brne	.+8      	; 0x680 <storePasscode+0x30>
	{
		//set some debug flag
		errorFlag = 2;
 678:	82 e0       	ldi	r24, 0x02	; 2
 67a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__data_end>
		return;
 67e:	3a c0       	rjmp	.+116    	; 0x6f4 <storePasscode+0xa4>
	
	//store each byte of passcode
	uint8_t passcodeByte;
	uint8_t passcodeAddress;
	
	for(int i = 0; i<4; i++)
 680:	1a 82       	std	Y+2, r1	; 0x02
 682:	19 82       	std	Y+1, r1	; 0x01
 684:	32 c0       	rjmp	.+100    	; 0x6ea <storePasscode+0x9a>
	{
		//store each byte of passcode into an array
		passcodeByte = Passcode>>(8*i);
 686:	89 81       	ldd	r24, Y+1	; 0x01
 688:	9a 81       	ldd	r25, Y+2	; 0x02
 68a:	9c 01       	movw	r18, r24
 68c:	22 0f       	add	r18, r18
 68e:	33 1f       	adc	r19, r19
 690:	22 0f       	add	r18, r18
 692:	33 1f       	adc	r19, r19
 694:	22 0f       	add	r18, r18
 696:	33 1f       	adc	r19, r19
 698:	8d 81       	ldd	r24, Y+5	; 0x05
 69a:	9e 81       	ldd	r25, Y+6	; 0x06
 69c:	af 81       	ldd	r26, Y+7	; 0x07
 69e:	b8 85       	ldd	r27, Y+8	; 0x08
 6a0:	04 c0       	rjmp	.+8      	; 0x6aa <storePasscode+0x5a>
 6a2:	b6 95       	lsr	r27
 6a4:	a7 95       	ror	r26
 6a6:	97 95       	ror	r25
 6a8:	87 95       	ror	r24
 6aa:	2a 95       	dec	r18
 6ac:	d2 f7       	brpl	.-12     	; 0x6a2 <storePasscode+0x52>
 6ae:	8b 83       	std	Y+3, r24	; 0x03
		//define the location to store the passcode in EEPROM
		passcodeAddress = (user<<4)|(4-i);
 6b0:	89 85       	ldd	r24, Y+9	; 0x09
 6b2:	88 2f       	mov	r24, r24
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	82 95       	swap	r24
 6b8:	92 95       	swap	r25
 6ba:	90 7f       	andi	r25, 0xF0	; 240
 6bc:	98 27       	eor	r25, r24
 6be:	80 7f       	andi	r24, 0xF0	; 240
 6c0:	98 27       	eor	r25, r24
 6c2:	28 2f       	mov	r18, r24
 6c4:	89 81       	ldd	r24, Y+1	; 0x01
 6c6:	94 e0       	ldi	r25, 0x04	; 4
 6c8:	39 2f       	mov	r19, r25
 6ca:	38 1b       	sub	r19, r24
 6cc:	83 2f       	mov	r24, r19
 6ce:	82 2b       	or	r24, r18
 6d0:	8c 83       	std	Y+4, r24	; 0x04
		//write the byte to the location in EEPROM
		write_EEPROM(passcodeByte,passcodeAddress);
 6d2:	8c 81       	ldd	r24, Y+4	; 0x04
 6d4:	88 2f       	mov	r24, r24
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	bc 01       	movw	r22, r24
 6da:	8b 81       	ldd	r24, Y+3	; 0x03
 6dc:	0e 94 c6 02 	call	0x58c	; 0x58c <write_EEPROM>
	
	//store each byte of passcode
	uint8_t passcodeByte;
	uint8_t passcodeAddress;
	
	for(int i = 0; i<4; i++)
 6e0:	89 81       	ldd	r24, Y+1	; 0x01
 6e2:	9a 81       	ldd	r25, Y+2	; 0x02
 6e4:	01 96       	adiw	r24, 0x01	; 1
 6e6:	9a 83       	std	Y+2, r25	; 0x02
 6e8:	89 83       	std	Y+1, r24	; 0x01
 6ea:	89 81       	ldd	r24, Y+1	; 0x01
 6ec:	9a 81       	ldd	r25, Y+2	; 0x02
 6ee:	04 97       	sbiw	r24, 0x04	; 4
 6f0:	54 f2       	brlt	.-108    	; 0x686 <storePasscode+0x36>
		//define the location to store the passcode in EEPROM
		passcodeAddress = (user<<4)|(4-i);
		//write the byte to the location in EEPROM
		write_EEPROM(passcodeByte,passcodeAddress);
	}
	return;
 6f2:	00 00       	nop
}
 6f4:	29 96       	adiw	r28, 0x09	; 9
 6f6:	0f b6       	in	r0, 0x3f	; 63
 6f8:	f8 94       	cli
 6fa:	de bf       	out	0x3e, r29	; 62
 6fc:	0f be       	out	0x3f, r0	; 63
 6fe:	cd bf       	out	0x3d, r28	; 61
 700:	df 91       	pop	r29
 702:	cf 91       	pop	r28
 704:	08 95       	ret

00000706 <RecallPasscode>:
//****************************************************************************************

//****************************************************************************************
//Reads the passcode from EEPROM and stores it into a long int
unsigned long int RecallPasscode(uint8_t user)
{
 706:	cf 93       	push	r28
 708:	df 93       	push	r29
 70a:	cd b7       	in	r28, 0x3d	; 61
 70c:	de b7       	in	r29, 0x3e	; 62
 70e:	29 97       	sbiw	r28, 0x09	; 9
 710:	0f b6       	in	r0, 0x3f	; 63
 712:	f8 94       	cli
 714:	de bf       	out	0x3e, r29	; 62
 716:	0f be       	out	0x3f, r0	; 63
 718:	cd bf       	out	0x3d, r28	; 61
 71a:	89 87       	std	Y+9, r24	; 0x09
unsigned int tempValue = 0;			//place to store each byte of passcode
 71c:	18 86       	std	Y+8, r1	; 0x08
 71e:	1f 82       	std	Y+7, r1	; 0x07
unsigned long int passcode = 0;	
 720:	19 82       	std	Y+1, r1	; 0x01
 722:	1a 82       	std	Y+2, r1	; 0x02
 724:	1b 82       	std	Y+3, r1	; 0x03
 726:	1c 82       	std	Y+4, r1	; 0x04
	for (int i = 0; i<4; i++)
 728:	1e 82       	std	Y+6, r1	; 0x06
 72a:	1d 82       	std	Y+5, r1	; 0x05
 72c:	3e c0       	rjmp	.+124    	; 0x7aa <RecallPasscode+0xa4>
	{
		//read the EEPROM value at location of user from LSB to MSB
		tempValue = read_EEPROM((user<<4)|(4-i));
 72e:	89 85       	ldd	r24, Y+9	; 0x09
 730:	88 2f       	mov	r24, r24
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	9c 01       	movw	r18, r24
 736:	22 95       	swap	r18
 738:	32 95       	swap	r19
 73a:	30 7f       	andi	r19, 0xF0	; 240
 73c:	32 27       	eor	r19, r18
 73e:	20 7f       	andi	r18, 0xF0	; 240
 740:	32 27       	eor	r19, r18
 742:	44 e0       	ldi	r20, 0x04	; 4
 744:	50 e0       	ldi	r21, 0x00	; 0
 746:	8d 81       	ldd	r24, Y+5	; 0x05
 748:	9e 81       	ldd	r25, Y+6	; 0x06
 74a:	ba 01       	movw	r22, r20
 74c:	68 1b       	sub	r22, r24
 74e:	79 0b       	sbc	r23, r25
 750:	cb 01       	movw	r24, r22
 752:	82 2b       	or	r24, r18
 754:	93 2b       	or	r25, r19
 756:	0e 94 f6 02 	call	0x5ec	; 0x5ec <read_EEPROM>
 75a:	88 2f       	mov	r24, r24
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	98 87       	std	Y+8, r25	; 0x08
 760:	8f 83       	std	Y+7, r24	; 0x07
		passcode |= tempValue<<(8*i);			//add each byte together to form a 4 byte passcode
 762:	8d 81       	ldd	r24, Y+5	; 0x05
 764:	9e 81       	ldd	r25, Y+6	; 0x06
 766:	9c 01       	movw	r18, r24
 768:	22 0f       	add	r18, r18
 76a:	33 1f       	adc	r19, r19
 76c:	22 0f       	add	r18, r18
 76e:	33 1f       	adc	r19, r19
 770:	22 0f       	add	r18, r18
 772:	33 1f       	adc	r19, r19
 774:	8f 81       	ldd	r24, Y+7	; 0x07
 776:	98 85       	ldd	r25, Y+8	; 0x08
 778:	02 c0       	rjmp	.+4      	; 0x77e <RecallPasscode+0x78>
 77a:	88 0f       	add	r24, r24
 77c:	99 1f       	adc	r25, r25
 77e:	2a 95       	dec	r18
 780:	e2 f7       	brpl	.-8      	; 0x77a <RecallPasscode+0x74>
 782:	cc 01       	movw	r24, r24
 784:	a0 e0       	ldi	r26, 0x00	; 0
 786:	b0 e0       	ldi	r27, 0x00	; 0
 788:	29 81       	ldd	r18, Y+1	; 0x01
 78a:	3a 81       	ldd	r19, Y+2	; 0x02
 78c:	4b 81       	ldd	r20, Y+3	; 0x03
 78e:	5c 81       	ldd	r21, Y+4	; 0x04
 790:	82 2b       	or	r24, r18
 792:	93 2b       	or	r25, r19
 794:	a4 2b       	or	r26, r20
 796:	b5 2b       	or	r27, r21
 798:	89 83       	std	Y+1, r24	; 0x01
 79a:	9a 83       	std	Y+2, r25	; 0x02
 79c:	ab 83       	std	Y+3, r26	; 0x03
 79e:	bc 83       	std	Y+4, r27	; 0x04
//Reads the passcode from EEPROM and stores it into a long int
unsigned long int RecallPasscode(uint8_t user)
{
unsigned int tempValue = 0;			//place to store each byte of passcode
unsigned long int passcode = 0;	
	for (int i = 0; i<4; i++)
 7a0:	8d 81       	ldd	r24, Y+5	; 0x05
 7a2:	9e 81       	ldd	r25, Y+6	; 0x06
 7a4:	01 96       	adiw	r24, 0x01	; 1
 7a6:	9e 83       	std	Y+6, r25	; 0x06
 7a8:	8d 83       	std	Y+5, r24	; 0x05
 7aa:	8d 81       	ldd	r24, Y+5	; 0x05
 7ac:	9e 81       	ldd	r25, Y+6	; 0x06
 7ae:	04 97       	sbiw	r24, 0x04	; 4
 7b0:	0c f4       	brge	.+2      	; 0x7b4 <RecallPasscode+0xae>
 7b2:	bd cf       	rjmp	.-134    	; 0x72e <RecallPasscode+0x28>
	{
		//read the EEPROM value at location of user from LSB to MSB
		tempValue = read_EEPROM((user<<4)|(4-i));
		passcode |= tempValue<<(8*i);			//add each byte together to form a 4 byte passcode
	}
	return passcode;
 7b4:	89 81       	ldd	r24, Y+1	; 0x01
 7b6:	9a 81       	ldd	r25, Y+2	; 0x02
 7b8:	ab 81       	ldd	r26, Y+3	; 0x03
 7ba:	bc 81       	ldd	r27, Y+4	; 0x04
}
 7bc:	bc 01       	movw	r22, r24
 7be:	cd 01       	movw	r24, r26
 7c0:	29 96       	adiw	r28, 0x09	; 9
 7c2:	0f b6       	in	r0, 0x3f	; 63
 7c4:	f8 94       	cli
 7c6:	de bf       	out	0x3e, r29	; 62
 7c8:	0f be       	out	0x3f, r0	; 63
 7ca:	cd bf       	out	0x3d, r28	; 61
 7cc:	df 91       	pop	r29
 7ce:	cf 91       	pop	r28
 7d0:	08 95       	ret

000007d2 <initLEDs>:
// START FUNCTIONS

//****************************************************************************************
//	Initialise output LEDs - PORTB
void initLEDs(void)
{
 7d2:	cf 93       	push	r28
 7d4:	df 93       	push	r29
 7d6:	cd b7       	in	r28, 0x3d	; 61
 7d8:	de b7       	in	r29, 0x3e	; 62
	DDRB = 0xFF;		// Set all LEDs to outputs
 7da:	87 e3       	ldi	r24, 0x37	; 55
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	2f ef       	ldi	r18, 0xFF	; 255
 7e0:	fc 01       	movw	r30, r24
 7e2:	20 83       	st	Z, r18
	PORTB = 0x00;		// Turn all LEDs off
 7e4:	88 e3       	ldi	r24, 0x38	; 56
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	fc 01       	movw	r30, r24
 7ea:	10 82       	st	Z, r1
}
 7ec:	00 00       	nop
 7ee:	df 91       	pop	r29
 7f0:	cf 91       	pop	r28
 7f2:	08 95       	ret

000007f4 <initKeypad>:


//****************************************************************************************
//	Initialise keypad - PORTC
void initKeypad(void)
{
 7f4:	cf 93       	push	r28
 7f6:	df 93       	push	r29
 7f8:	cd b7       	in	r28, 0x3d	; 61
 7fa:	de b7       	in	r29, 0x3e	; 62
	if(keypad3x4 == 1)
 7fc:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <keypad3x4>
 800:	81 30       	cpi	r24, 0x01	; 1
 802:	99 f4       	brne	.+38     	; 0x82a <initKeypad+0x36>
	{
		DDRC = 0x95;		// Set rows to inputs and columns to outputs
 804:	84 e3       	ldi	r24, 0x34	; 52
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	25 e9       	ldi	r18, 0x95	; 149
 80a:	fc 01       	movw	r30, r24
 80c:	20 83       	st	Z, r18
		PORTC = 0x6A;		// Enable the pull-up resistors on the row inputs
 80e:	85 e3       	ldi	r24, 0x35	; 53
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	2a e6       	ldi	r18, 0x6A	; 106
 814:	fc 01       	movw	r30, r24
 816:	20 83       	st	Z, r18
		PORTC = 0xFF;		// Set the columns to all on (idle state) & ensure pull-ups are still enabled
 818:	85 e3       	ldi	r24, 0x35	; 53
 81a:	90 e0       	ldi	r25, 0x00	; 0
 81c:	2f ef       	ldi	r18, 0xFF	; 255
 81e:	fc 01       	movw	r30, r24
 820:	20 83       	st	Z, r18
		
		AmountOfColumns =3;
 822:	83 e0       	ldi	r24, 0x03	; 3
 824:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <AmountOfColumns>
		PORTC = 0xFF;		// Set the columns to all on (idle state) & ensure pull-ups are still enabled
		
		AmountOfColumns =4;
	}

}
 828:	12 c0       	rjmp	.+36     	; 0x84e <initKeypad+0x5a>
		
		AmountOfColumns =3;
	}
	else
	{
		DDRC = 0xF0;		// Set rows to inputs and columns to outputs
 82a:	84 e3       	ldi	r24, 0x34	; 52
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	20 ef       	ldi	r18, 0xF0	; 240
 830:	fc 01       	movw	r30, r24
 832:	20 83       	st	Z, r18
		PORTC = 0x0F;		// Enable the pull-up resistors on the row inputs
 834:	85 e3       	ldi	r24, 0x35	; 53
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	2f e0       	ldi	r18, 0x0F	; 15
 83a:	fc 01       	movw	r30, r24
 83c:	20 83       	st	Z, r18
		PORTC = 0xFF;		// Set the columns to all on (idle state) & ensure pull-ups are still enabled
 83e:	85 e3       	ldi	r24, 0x35	; 53
 840:	90 e0       	ldi	r25, 0x00	; 0
 842:	2f ef       	ldi	r18, 0xFF	; 255
 844:	fc 01       	movw	r30, r24
 846:	20 83       	st	Z, r18
		
		AmountOfColumns =4;
 848:	84 e0       	ldi	r24, 0x04	; 4
 84a:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <AmountOfColumns>
	}

}
 84e:	00 00       	nop
 850:	df 91       	pop	r29
 852:	cf 91       	pop	r28
 854:	08 95       	ret

00000856 <initTimers>:


//****************************************************************************************
//Initialise Timers
void initTimers(void)
{
 856:	cf 93       	push	r28
 858:	df 93       	push	r29
 85a:	cd b7       	in	r28, 0x3d	; 61
 85c:	de b7       	in	r29, 0x3e	; 62
	//set timer0 counter to 0
	TCNT0 = 0x00;
 85e:	82 e5       	ldi	r24, 0x52	; 82
 860:	90 e0       	ldi	r25, 0x00	; 0
 862:	fc 01       	movw	r30, r24
 864:	10 82       	st	Z, r1
	//set clock prescaler to divide by 1024 of timer0
	TCCR0 |= (1<<CS00) | (0<<CS01) | (1<<CS02);
 866:	83 e5       	ldi	r24, 0x53	; 83
 868:	90 e0       	ldi	r25, 0x00	; 0
 86a:	23 e5       	ldi	r18, 0x53	; 83
 86c:	30 e0       	ldi	r19, 0x00	; 0
 86e:	f9 01       	movw	r30, r18
 870:	20 81       	ld	r18, Z
 872:	25 60       	ori	r18, 0x05	; 5
 874:	fc 01       	movw	r30, r24
 876:	20 83       	st	Z, r18
	
	//set time1 counter to 0;
	TCNT1 = 0x0000;
 878:	8c e4       	ldi	r24, 0x4C	; 76
 87a:	90 e0       	ldi	r25, 0x00	; 0
 87c:	fc 01       	movw	r30, r24
 87e:	11 82       	std	Z+1, r1	; 0x01
 880:	10 82       	st	Z, r1
	//set clock prescaler to divide by 1024 of timer1
	TCCR1B |= (1<<CS10) | (0<<CS11) | (1<<CS12);
 882:	8e e4       	ldi	r24, 0x4E	; 78
 884:	90 e0       	ldi	r25, 0x00	; 0
 886:	2e e4       	ldi	r18, 0x4E	; 78
 888:	30 e0       	ldi	r19, 0x00	; 0
 88a:	f9 01       	movw	r30, r18
 88c:	20 81       	ld	r18, Z
 88e:	25 60       	ori	r18, 0x05	; 5
 890:	fc 01       	movw	r30, r24
 892:	20 83       	st	Z, r18
}
 894:	00 00       	nop
 896:	df 91       	pop	r29
 898:	cf 91       	pop	r28
 89a:	08 95       	ret

0000089c <ReadOne>:
// START FUNCTIONS

//**************************************************************************************************************************************************
// Function that checks if one key has been pressed and returns it as a hex value corresponding to the button pressed
unsigned char ReadOne() 
{
 89c:	cf 93       	push	r28
 89e:	df 93       	push	r29
 8a0:	00 d0       	rcall	.+0      	; 0x8a2 <ReadOne+0x6>
 8a2:	00 d0       	rcall	.+0      	; 0x8a4 <ReadOne+0x8>
 8a4:	cd b7       	in	r28, 0x3d	; 61
 8a6:	de b7       	in	r29, 0x3e	; 62
	// Define relevant variables
	unsigned char key = 0xFF;
 8a8:	8f ef       	ldi	r24, 0xFF	; 255
 8aa:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char portCValue = 0xFF;
 8ac:	8f ef       	ldi	r24, 0xFF	; 255
 8ae:	8c 83       	std	Y+4, r24	; 0x04
	
	while(1)	//can get rid of while loop, it just keeps reading until a key is pressed instead of only reading once when its called
	{

		// Scanning column: write the column mask to port C
		for (uint8_t j=0; j<AmountOfColumns; j++)
 8b0:	19 82       	std	Y+1, r1	; 0x01
 8b2:	37 c0       	rjmp	.+110    	; 0x922 <ReadOne+0x86>
		{
			PORTC = col[j];				// Scan each column
 8b4:	85 e3       	ldi	r24, 0x35	; 53
 8b6:	90 e0       	ldi	r25, 0x00	; 0
 8b8:	29 81       	ldd	r18, Y+1	; 0x01
 8ba:	22 2f       	mov	r18, r18
 8bc:	30 e0       	ldi	r19, 0x00	; 0
 8be:	20 5a       	subi	r18, 0xA0	; 160
 8c0:	3f 4f       	sbci	r19, 0xFF	; 255
 8c2:	f9 01       	movw	r30, r18
 8c4:	20 81       	ld	r18, Z
 8c6:	fc 01       	movw	r30, r24
 8c8:	20 83       	st	Z, r18
			delay_ms(10);				// Delay for 0.01 sec
 8ca:	8a e0       	ldi	r24, 0x0A	; 10
 8cc:	90 e0       	ldi	r25, 0x00	; 0
 8ce:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
			portCValue = PINC;			// Read port value from pinC
 8d2:	83 e3       	ldi	r24, 0x33	; 51
 8d4:	90 e0       	ldi	r25, 0x00	; 0
 8d6:	fc 01       	movw	r30, r24
 8d8:	80 81       	ld	r24, Z
 8da:	8c 83       	std	Y+4, r24	; 0x04
		
			// Begin stepping through each column to check if row has logic 0
			if (portCValue != col[j])
 8dc:	89 81       	ldd	r24, Y+1	; 0x01
 8de:	88 2f       	mov	r24, r24
 8e0:	90 e0       	ldi	r25, 0x00	; 0
 8e2:	80 5a       	subi	r24, 0xA0	; 160
 8e4:	9f 4f       	sbci	r25, 0xFF	; 255
 8e6:	fc 01       	movw	r30, r24
 8e8:	90 81       	ld	r25, Z
 8ea:	8c 81       	ldd	r24, Y+4	; 0x04
 8ec:	98 17       	cp	r25, r24
 8ee:	b1 f0       	breq	.+44     	; 0x91c <ReadOne+0x80>
			{
				//Step through each key
				for(uint8_t k = 0; k < 16; k++)
 8f0:	1a 82       	std	Y+2, r1	; 0x02
 8f2:	11 c0       	rjmp	.+34     	; 0x916 <ReadOne+0x7a>
				{
					if(portCValue == Keys[k])
 8f4:	8a 81       	ldd	r24, Y+2	; 0x02
 8f6:	88 2f       	mov	r24, r24
 8f8:	90 e0       	ldi	r25, 0x00	; 0
 8fa:	8c 59       	subi	r24, 0x9C	; 156
 8fc:	9f 4f       	sbci	r25, 0xFF	; 255
 8fe:	fc 01       	movw	r30, r24
 900:	90 81       	ld	r25, Z
 902:	8c 81       	ldd	r24, Y+4	; 0x04
 904:	98 17       	cp	r25, r24
 906:	21 f4       	brne	.+8      	; 0x910 <ReadOne+0x74>
					{
						key = k;			//the index of keys is the value of the button pressed
 908:	8a 81       	ldd	r24, Y+2	; 0x02
 90a:	8b 83       	std	Y+3, r24	; 0x03
						return key;
 90c:	8b 81       	ldd	r24, Y+3	; 0x03
 90e:	0f c0       	rjmp	.+30     	; 0x92e <ReadOne+0x92>
		
			// Begin stepping through each column to check if row has logic 0
			if (portCValue != col[j])
			{
				//Step through each key
				for(uint8_t k = 0; k < 16; k++)
 910:	8a 81       	ldd	r24, Y+2	; 0x02
 912:	8f 5f       	subi	r24, 0xFF	; 255
 914:	8a 83       	std	Y+2, r24	; 0x02
 916:	8a 81       	ldd	r24, Y+2	; 0x02
 918:	80 31       	cpi	r24, 0x10	; 16
 91a:	60 f3       	brcs	.-40     	; 0x8f4 <ReadOne+0x58>
	
	while(1)	//can get rid of while loop, it just keeps reading until a key is pressed instead of only reading once when its called
	{

		// Scanning column: write the column mask to port C
		for (uint8_t j=0; j<AmountOfColumns; j++)
 91c:	89 81       	ldd	r24, Y+1	; 0x01
 91e:	8f 5f       	subi	r24, 0xFF	; 255
 920:	89 83       	std	Y+1, r24	; 0x01
 922:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <AmountOfColumns>
 926:	99 81       	ldd	r25, Y+1	; 0x01
 928:	98 17       	cp	r25, r24
 92a:	20 f2       	brcs	.-120    	; 0x8b4 <ReadOne+0x18>
						return key;
					}		
				}
			}
		}
	}
 92c:	c1 cf       	rjmp	.-126    	; 0x8b0 <ReadOne+0x14>
	return key;		//this should never execute
}
 92e:	0f 90       	pop	r0
 930:	0f 90       	pop	r0
 932:	0f 90       	pop	r0
 934:	0f 90       	pop	r0
 936:	df 91       	pop	r29
 938:	cf 91       	pop	r28
 93a:	08 95       	ret

0000093c <ReadNone>:
//**************************************************************************************************************************************************

//**************************************************************************************************************************************************
//Check if key has been lifted. ie debounce?
void ReadNone (void)
{
 93c:	cf 93       	push	r28
 93e:	df 93       	push	r29
 940:	cd b7       	in	r28, 0x3d	; 61
 942:	de b7       	in	r29, 0x3e	; 62
	if(keypad3x4==1)
 944:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <keypad3x4>
 948:	81 30       	cpi	r24, 0x01	; 1
 94a:	69 f4       	brne	.+26     	; 0x966 <ReadNone+0x2a>
	{
		while((PINC&0x6A)!=0x6A);	//exits when PINC inputs are all high 
 94c:	00 00       	nop
 94e:	83 e3       	ldi	r24, 0x33	; 51
 950:	90 e0       	ldi	r25, 0x00	; 0
 952:	fc 01       	movw	r30, r24
 954:	80 81       	ld	r24, Z
 956:	88 2f       	mov	r24, r24
 958:	90 e0       	ldi	r25, 0x00	; 0
 95a:	8a 76       	andi	r24, 0x6A	; 106
 95c:	99 27       	eor	r25, r25
 95e:	8a 36       	cpi	r24, 0x6A	; 106
 960:	91 05       	cpc	r25, r1
 962:	a9 f7       	brne	.-22     	; 0x94e <ReadNone+0x12>
	else
	{
		while((PINC&0x0F)!=0x0F);	//exits when PINC inputs are all high 
	}
	
}
 964:	0b c0       	rjmp	.+22     	; 0x97c <ReadNone+0x40>
	{
		while((PINC&0x6A)!=0x6A);	//exits when PINC inputs are all high 
	}
	else
	{
		while((PINC&0x0F)!=0x0F);	//exits when PINC inputs are all high 
 966:	00 00       	nop
 968:	83 e3       	ldi	r24, 0x33	; 51
 96a:	90 e0       	ldi	r25, 0x00	; 0
 96c:	fc 01       	movw	r30, r24
 96e:	80 81       	ld	r24, Z
 970:	88 2f       	mov	r24, r24
 972:	90 e0       	ldi	r25, 0x00	; 0
 974:	8f 70       	andi	r24, 0x0F	; 15
 976:	99 27       	eor	r25, r25
 978:	0f 97       	sbiw	r24, 0x0f	; 15
 97a:	b1 f7       	brne	.-20     	; 0x968 <ReadNone+0x2c>
	}
	
}
 97c:	00 00       	nop
 97e:	df 91       	pop	r29
 980:	cf 91       	pop	r28
 982:	08 95       	ret

00000984 <InputPasscode>:
//**************************************************************************************************************************************************

//**************************************************************************************************************************************************
//Combine 6-8 digits into a passcode
uint32_t InputPasscode (void)
{
 984:	0f 93       	push	r16
 986:	1f 93       	push	r17
 988:	cf 93       	push	r28
 98a:	df 93       	push	r29
 98c:	cd b7       	in	r28, 0x3d	; 61
 98e:	de b7       	in	r29, 0x3e	; 62
 990:	27 97       	sbiw	r28, 0x07	; 7
 992:	0f b6       	in	r0, 0x3f	; 63
 994:	f8 94       	cli
 996:	de bf       	out	0x3e, r29	; 62
 998:	0f be       	out	0x3f, r0	; 63
 99a:	cd bf       	out	0x3d, r28	; 61
	uint32_t passcode = 0;
 99c:	19 82       	std	Y+1, r1	; 0x01
 99e:	1a 82       	std	Y+2, r1	; 0x02
 9a0:	1b 82       	std	Y+3, r1	; 0x03
 9a2:	1c 82       	std	Y+4, r1	; 0x04
	for (int i =0; i<8; i++)
 9a4:	1e 82       	std	Y+6, r1	; 0x06
 9a6:	1d 82       	std	Y+5, r1	; 0x05
 9a8:	4d c0       	rjmp	.+154    	; 0xa44 <InputPasscode+0xc0>
	{
		uint8_t keyValue = ReadOne();	//store digit pressed by user
 9aa:	0e 94 4e 04 	call	0x89c	; 0x89c <ReadOne>
 9ae:	8f 83       	std	Y+7, r24	; 0x07
		
		if(keyValue==0xF)					//if # is pressed
 9b0:	8f 81       	ldd	r24, Y+7	; 0x07
 9b2:	8f 30       	cpi	r24, 0x0F	; 15
 9b4:	29 f4       	brne	.+10     	; 0x9c0 <InputPasscode+0x3c>
		{
			return passcode;
 9b6:	89 81       	ldd	r24, Y+1	; 0x01
 9b8:	9a 81       	ldd	r25, Y+2	; 0x02
 9ba:	ab 81       	ldd	r26, Y+3	; 0x03
 9bc:	bc 81       	ldd	r27, Y+4	; 0x04
 9be:	53 c0       	rjmp	.+166    	; 0xa66 <InputPasscode+0xe2>
		}
		
		//check if key pressed is a digit
		if(isDigit(keyValue))
 9c0:	8f 81       	ldd	r24, Y+7	; 0x07
 9c2:	0e 94 53 05 	call	0xaa6	; 0xaa6 <isDigit>
 9c6:	88 23       	and	r24, r24
 9c8:	89 f1       	breq	.+98     	; 0xa2c <InputPasscode+0xa8>
		{
			PORTB = displayKeys(keyValue);	// output key being pressed to LEDs
 9ca:	08 e3       	ldi	r16, 0x38	; 56
 9cc:	10 e0       	ldi	r17, 0x00	; 0
 9ce:	8f 81       	ldd	r24, Y+7	; 0x07
 9d0:	0e 94 3f 02 	call	0x47e	; 0x47e <displayKeys>
 9d4:	f8 01       	movw	r30, r16
 9d6:	80 83       	st	Z, r24
			ReadNone();						//waits until finger is lifted off button
 9d8:	0e 94 9e 04 	call	0x93c	; 0x93c <ReadNone>
			PORTB = 0x00;
 9dc:	88 e3       	ldi	r24, 0x38	; 56
 9de:	90 e0       	ldi	r25, 0x00	; 0
 9e0:	fc 01       	movw	r30, r24
 9e2:	10 82       	st	Z, r1
			
			passcode = passcode*10 + keyValue;	//add each digit into a long int
 9e4:	89 81       	ldd	r24, Y+1	; 0x01
 9e6:	9a 81       	ldd	r25, Y+2	; 0x02
 9e8:	ab 81       	ldd	r26, Y+3	; 0x03
 9ea:	bc 81       	ldd	r27, Y+4	; 0x04
 9ec:	88 0f       	add	r24, r24
 9ee:	99 1f       	adc	r25, r25
 9f0:	aa 1f       	adc	r26, r26
 9f2:	bb 1f       	adc	r27, r27
 9f4:	9c 01       	movw	r18, r24
 9f6:	ad 01       	movw	r20, r26
 9f8:	22 0f       	add	r18, r18
 9fa:	33 1f       	adc	r19, r19
 9fc:	44 1f       	adc	r20, r20
 9fe:	55 1f       	adc	r21, r21
 a00:	22 0f       	add	r18, r18
 a02:	33 1f       	adc	r19, r19
 a04:	44 1f       	adc	r20, r20
 a06:	55 1f       	adc	r21, r21
 a08:	28 0f       	add	r18, r24
 a0a:	39 1f       	adc	r19, r25
 a0c:	4a 1f       	adc	r20, r26
 a0e:	5b 1f       	adc	r21, r27
 a10:	8f 81       	ldd	r24, Y+7	; 0x07
 a12:	88 2f       	mov	r24, r24
 a14:	90 e0       	ldi	r25, 0x00	; 0
 a16:	a0 e0       	ldi	r26, 0x00	; 0
 a18:	b0 e0       	ldi	r27, 0x00	; 0
 a1a:	82 0f       	add	r24, r18
 a1c:	93 1f       	adc	r25, r19
 a1e:	a4 1f       	adc	r26, r20
 a20:	b5 1f       	adc	r27, r21
 a22:	89 83       	std	Y+1, r24	; 0x01
 a24:	9a 83       	std	Y+2, r25	; 0x02
 a26:	ab 83       	std	Y+3, r26	; 0x03
 a28:	bc 83       	std	Y+4, r27	; 0x04
 a2a:	07 c0       	rjmp	.+14     	; 0xa3a <InputPasscode+0xb6>
		}
		else
		{
			//not a valid input
			i--;		//dont increment length counter if not valid
 a2c:	8d 81       	ldd	r24, Y+5	; 0x05
 a2e:	9e 81       	ldd	r25, Y+6	; 0x06
 a30:	01 97       	sbiw	r24, 0x01	; 1
 a32:	9e 83       	std	Y+6, r25	; 0x06
 a34:	8d 83       	std	Y+5, r24	; 0x05
			displayIncorrect();
 a36:	0e 94 17 02 	call	0x42e	; 0x42e <displayIncorrect>
//**************************************************************************************************************************************************
//Combine 6-8 digits into a passcode
uint32_t InputPasscode (void)
{
	uint32_t passcode = 0;
	for (int i =0; i<8; i++)
 a3a:	8d 81       	ldd	r24, Y+5	; 0x05
 a3c:	9e 81       	ldd	r25, Y+6	; 0x06
 a3e:	01 96       	adiw	r24, 0x01	; 1
 a40:	9e 83       	std	Y+6, r25	; 0x06
 a42:	8d 83       	std	Y+5, r24	; 0x05
 a44:	8d 81       	ldd	r24, Y+5	; 0x05
 a46:	9e 81       	ldd	r25, Y+6	; 0x06
 a48:	08 97       	sbiw	r24, 0x08	; 8
 a4a:	0c f4       	brge	.+2      	; 0xa4e <InputPasscode+0xca>
 a4c:	ae cf       	rjmp	.-164    	; 0x9aa <InputPasscode+0x26>
	}
	/*
	while(!(ReadOne()==0xF));		//wait until reads a *
	return passcode	; */
	
	if((ReadOne()==0xF))		//if next key is a #
 a4e:	0e 94 4e 04 	call	0x89c	; 0x89c <ReadOne>
 a52:	8f 30       	cpi	r24, 0x0F	; 15
 a54:	29 f4       	brne	.+10     	; 0xa60 <InputPasscode+0xdc>
	{
		return passcode	;
 a56:	89 81       	ldd	r24, Y+1	; 0x01
 a58:	9a 81       	ldd	r25, Y+2	; 0x02
 a5a:	ab 81       	ldd	r26, Y+3	; 0x03
 a5c:	bc 81       	ldd	r27, Y+4	; 0x04
 a5e:	03 c0       	rjmp	.+6      	; 0xa66 <InputPasscode+0xe2>
	}
	else
	{
		return 0;
 a60:	80 e0       	ldi	r24, 0x00	; 0
 a62:	90 e0       	ldi	r25, 0x00	; 0
 a64:	dc 01       	movw	r26, r24
	}	
}
 a66:	bc 01       	movw	r22, r24
 a68:	cd 01       	movw	r24, r26
 a6a:	27 96       	adiw	r28, 0x07	; 7
 a6c:	0f b6       	in	r0, 0x3f	; 63
 a6e:	f8 94       	cli
 a70:	de bf       	out	0x3e, r29	; 62
 a72:	0f be       	out	0x3f, r0	; 63
 a74:	cd bf       	out	0x3d, r28	; 61
 a76:	df 91       	pop	r29
 a78:	cf 91       	pop	r28
 a7a:	1f 91       	pop	r17
 a7c:	0f 91       	pop	r16
 a7e:	08 95       	ret

00000a80 <isUser>:
//**************************************************************************************************************************************************

//**************************************************************************************************************************************************
//is the input a letter, a,b,c, or d. returns 1 if a valid user code
uint8_t isUser (uint8_t buttonPressed)
{
 a80:	cf 93       	push	r28
 a82:	df 93       	push	r29
 a84:	1f 92       	push	r1
 a86:	cd b7       	in	r28, 0x3d	; 61
 a88:	de b7       	in	r29, 0x3e	; 62
 a8a:	89 83       	std	Y+1, r24	; 0x01
	switch(buttonPressed)
 a8c:	89 81       	ldd	r24, Y+1	; 0x01
 a8e:	88 2f       	mov	r24, r24
 a90:	90 e0       	ldi	r25, 0x00	; 0
 a92:	0a 97       	sbiw	r24, 0x0a	; 10
 a94:	04 97       	sbiw	r24, 0x04	; 4
 a96:	10 f4       	brcc	.+4      	; 0xa9c <isUser+0x1c>
	{
		case 0x0A:
		case 0x0B:
		case 0x0C:
		case 0x0D:
		return 1;
 a98:	81 e0       	ldi	r24, 0x01	; 1
 a9a:	01 c0       	rjmp	.+2      	; 0xa9e <isUser+0x1e>
		
		default:	//invalid user code		Set some debug flag here
		return 0;
 a9c:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 a9e:	0f 90       	pop	r0
 aa0:	df 91       	pop	r29
 aa2:	cf 91       	pop	r28
 aa4:	08 95       	ret

00000aa6 <isDigit>:
//**************************************************************************************************************************************************

//**************************************************************************************************************************************************
//is the user input a digit. returns 1 if value is a digit
uint8_t isDigit (uint8_t buttonPressed)
{
 aa6:	cf 93       	push	r28
 aa8:	df 93       	push	r29
 aaa:	1f 92       	push	r1
 aac:	cd b7       	in	r28, 0x3d	; 61
 aae:	de b7       	in	r29, 0x3e	; 62
 ab0:	89 83       	std	Y+1, r24	; 0x01
	switch(buttonPressed)
 ab2:	89 81       	ldd	r24, Y+1	; 0x01
 ab4:	88 2f       	mov	r24, r24
 ab6:	90 e0       	ldi	r25, 0x00	; 0
 ab8:	0a 97       	sbiw	r24, 0x0a	; 10
 aba:	10 f4       	brcc	.+4      	; 0xac0 <isDigit+0x1a>
		case 0x05:
		case 0x06:
		case 0x07:
		case 0x08:
		case 0x09:
		return 1;
 abc:	81 e0       	ldi	r24, 0x01	; 1
 abe:	01 c0       	rjmp	.+2      	; 0xac2 <isDigit+0x1c>
		
		default:	//invalid user code		Set some debug flag here
		return 0;
 ac0:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 ac2:	0f 90       	pop	r0
 ac4:	df 91       	pop	r29
 ac6:	cf 91       	pop	r28
 ac8:	08 95       	ret

00000aca <isHeld3s>:
//**************************************************************************************************************************************************

//**************************************************************************************************************************************************
//Return one if the selected key has been held for 3 seconds. return 0 if not
uint8_t isHeld3s (void)
{
 aca:	cf 93       	push	r28
 acc:	df 93       	push	r29
 ace:	1f 92       	push	r1
 ad0:	cd b7       	in	r28, 0x3d	; 61
 ad2:	de b7       	in	r29, 0x3e	; 62
	for(uint8_t i = 0; i<255; i++)
 ad4:	19 82       	std	Y+1, r1	; 0x01
 ad6:	13 c0       	rjmp	.+38     	; 0xafe <isHeld3s+0x34>
	{
		delay_ms(12);			//0.012*255 =3.06secs
 ad8:	8c e0       	ldi	r24, 0x0C	; 12
 ada:	90 e0       	ldi	r25, 0x00	; 0
 adc:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
		if((PINC&0x0F)==0x0F)
 ae0:	83 e3       	ldi	r24, 0x33	; 51
 ae2:	90 e0       	ldi	r25, 0x00	; 0
 ae4:	fc 01       	movw	r30, r24
 ae6:	80 81       	ld	r24, Z
 ae8:	88 2f       	mov	r24, r24
 aea:	90 e0       	ldi	r25, 0x00	; 0
 aec:	8f 70       	andi	r24, 0x0F	; 15
 aee:	99 27       	eor	r25, r25
 af0:	0f 97       	sbiw	r24, 0x0f	; 15
 af2:	11 f4       	brne	.+4      	; 0xaf8 <isHeld3s+0x2e>
		{
			return 0;
 af4:	80 e0       	ldi	r24, 0x00	; 0
 af6:	07 c0       	rjmp	.+14     	; 0xb06 <isHeld3s+0x3c>

//**************************************************************************************************************************************************
//Return one if the selected key has been held for 3 seconds. return 0 if not
uint8_t isHeld3s (void)
{
	for(uint8_t i = 0; i<255; i++)
 af8:	89 81       	ldd	r24, Y+1	; 0x01
 afa:	8f 5f       	subi	r24, 0xFF	; 255
 afc:	89 83       	std	Y+1, r24	; 0x01
 afe:	89 81       	ldd	r24, Y+1	; 0x01
 b00:	8f 3f       	cpi	r24, 0xFF	; 255
 b02:	51 f7       	brne	.-44     	; 0xad8 <isHeld3s+0xe>
		if((PINC&0x0F)==0x0F)
		{
			return 0;
		}
	}
	return 1;
 b04:	81 e0       	ldi	r24, 0x01	; 1
}
 b06:	0f 90       	pop	r0
 b08:	df 91       	pop	r29
 b0a:	cf 91       	pop	r28
 b0c:	08 95       	ret

00000b0e <DigitCount>:
//**************************************************************************************************************************************************

//**************************************************************************************************************************************************
uint8_t DigitCount(uint32_t NewPasscode)
{
 b0e:	cf 93       	push	r28
 b10:	df 93       	push	r29
 b12:	00 d0       	rcall	.+0      	; 0xb14 <DigitCount+0x6>
 b14:	00 d0       	rcall	.+0      	; 0xb16 <DigitCount+0x8>
 b16:	1f 92       	push	r1
 b18:	cd b7       	in	r28, 0x3d	; 61
 b1a:	de b7       	in	r29, 0x3e	; 62
 b1c:	6a 83       	std	Y+2, r22	; 0x02
 b1e:	7b 83       	std	Y+3, r23	; 0x03
 b20:	8c 83       	std	Y+4, r24	; 0x04
 b22:	9d 83       	std	Y+5, r25	; 0x05
	uint8_t count = 0;
 b24:	19 82       	std	Y+1, r1	; 0x01
	while (NewPasscode != 0)
 b26:	15 c0       	rjmp	.+42     	; 0xb52 <DigitCount+0x44>
	{
		NewPasscode /= 10;
 b28:	8a 81       	ldd	r24, Y+2	; 0x02
 b2a:	9b 81       	ldd	r25, Y+3	; 0x03
 b2c:	ac 81       	ldd	r26, Y+4	; 0x04
 b2e:	bd 81       	ldd	r27, Y+5	; 0x05
 b30:	2a e0       	ldi	r18, 0x0A	; 10
 b32:	30 e0       	ldi	r19, 0x00	; 0
 b34:	40 e0       	ldi	r20, 0x00	; 0
 b36:	50 e0       	ldi	r21, 0x00	; 0
 b38:	bc 01       	movw	r22, r24
 b3a:	cd 01       	movw	r24, r26
 b3c:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <__udivmodsi4>
 b40:	da 01       	movw	r26, r20
 b42:	c9 01       	movw	r24, r18
 b44:	8a 83       	std	Y+2, r24	; 0x02
 b46:	9b 83       	std	Y+3, r25	; 0x03
 b48:	ac 83       	std	Y+4, r26	; 0x04
 b4a:	bd 83       	std	Y+5, r27	; 0x05
		++count;
 b4c:	89 81       	ldd	r24, Y+1	; 0x01
 b4e:	8f 5f       	subi	r24, 0xFF	; 255
 b50:	89 83       	std	Y+1, r24	; 0x01

//**************************************************************************************************************************************************
uint8_t DigitCount(uint32_t NewPasscode)
{
	uint8_t count = 0;
	while (NewPasscode != 0)
 b52:	8a 81       	ldd	r24, Y+2	; 0x02
 b54:	9b 81       	ldd	r25, Y+3	; 0x03
 b56:	ac 81       	ldd	r26, Y+4	; 0x04
 b58:	bd 81       	ldd	r27, Y+5	; 0x05
 b5a:	89 2b       	or	r24, r25
 b5c:	8a 2b       	or	r24, r26
 b5e:	8b 2b       	or	r24, r27
 b60:	19 f7       	brne	.-58     	; 0xb28 <DigitCount+0x1a>
	{
		NewPasscode /= 10;
		++count;
	}
	return count;
 b62:	89 81       	ldd	r24, Y+1	; 0x01
}
 b64:	0f 90       	pop	r0
 b66:	0f 90       	pop	r0
 b68:	0f 90       	pop	r0
 b6a:	0f 90       	pop	r0
 b6c:	0f 90       	pop	r0
 b6e:	df 91       	pop	r29
 b70:	cf 91       	pop	r28
 b72:	08 95       	ret

00000b74 <main>:

// Global variables
uint8_t debugCode = 0;

int main(void)
{
 b74:	cf 93       	push	r28
 b76:	df 93       	push	r29
 b78:	cd b7       	in	r28, 0x3d	; 61
 b7a:	de b7       	in	r29, 0x3e	; 62
 b7c:	27 97       	sbiw	r28, 0x07	; 7
 b7e:	0f b6       	in	r0, 0x3f	; 63
 b80:	f8 94       	cli
 b82:	de bf       	out	0x3e, r29	; 62
 b84:	0f be       	out	0x3f, r0	; 63
 b86:	cd bf       	out	0x3d, r28	; 61
	// Initialise everything
    initTimers();
 b88:	0e 94 2b 04 	call	0x856	; 0x856 <initTimers>
	initLEDs();
 b8c:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <initLEDs>
	initKeypad();
 b90:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <initKeypad>
		//storePasscode(00000000, 0xA+i);		//stores the password 00000000 into user slot if no previous code has been set
	//}

	

	uint8_t noOfAttempts = 0;	// Set number of attempts to 0
 b94:	19 82       	std	Y+1, r1	; 0x01
	uint8_t previousUser = 0;	//store what the previous user was
 b96:	1a 82       	std	Y+2, r1	; 0x02
	uint32_t attemptPasscode;	//stores the passcode input by the user

	// Start infinite loop
    while (1) 
    {
		uint8_t user = ReadOne();		//determines the first key pressed, may not always be a user
 b98:	0e 94 4e 04 	call	0x89c	; 0x89c <ReadOne>
 b9c:	8b 83       	std	Y+3, r24	; 0x03
		
		if (previousUser != user)		//reset the attempts if a different user is pressed
 b9e:	9a 81       	ldd	r25, Y+2	; 0x02
 ba0:	8b 81       	ldd	r24, Y+3	; 0x03
 ba2:	98 17       	cp	r25, r24
 ba4:	09 f0       	breq	.+2      	; 0xba8 <main+0x34>
		{
			noOfAttempts = 0;
 ba6:	19 82       	std	Y+1, r1	; 0x01
		}
		
		
		if (isUser(user))	// Check if user A B C or D is chosen
 ba8:	8b 81       	ldd	r24, Y+3	; 0x03
 baa:	0e 94 40 05 	call	0xa80	; 0xa80 <isUser>
 bae:	88 23       	and	r24, r24
 bb0:	09 f4       	brne	.+2      	; 0xbb4 <main+0x40>
 bb2:	44 c0       	rjmp	.+136    	; 0xc3c <main+0xc8>
		{
			displayUser(user);	//write the corresponding user LED pattern to the LEDs
 bb4:	8b 81       	ldd	r24, Y+3	; 0x03
 bb6:	0e 94 92 02 	call	0x524	; 0x524 <displayUser>
			ReadNone();			//wait until a key is lifted
 bba:	0e 94 9e 04 	call	0x93c	; 0x93c <ReadNone>
			PORTB = 0;
 bbe:	88 e3       	ldi	r24, 0x38	; 56
 bc0:	90 e0       	ldi	r25, 0x00	; 0
 bc2:	fc 01       	movw	r30, r24
 bc4:	10 82       	st	Z, r1
			
			previousUser = user;					//store the user, used to check if that user has had 3 attempts
 bc6:	8b 81       	ldd	r24, Y+3	; 0x03
 bc8:	8a 83       	std	Y+2, r24	; 0x02
			attemptPasscode = InputPasscode();		// Read the passcode from the keypad
 bca:	0e 94 c2 04 	call	0x984	; 0x984 <InputPasscode>
 bce:	dc 01       	movw	r26, r24
 bd0:	cb 01       	movw	r24, r22
 bd2:	8c 83       	std	Y+4, r24	; 0x04
 bd4:	9d 83       	std	Y+5, r25	; 0x05
 bd6:	ae 83       	std	Y+6, r26	; 0x06
 bd8:	bf 83       	std	Y+7, r27	; 0x07
				
			// UNLOCK // If the attempted passcode is equal to the stored passcode for the user specified
			if (RecallPasscode(user) == attemptPasscode)	
 bda:	8b 81       	ldd	r24, Y+3	; 0x03
 bdc:	0e 94 83 03 	call	0x706	; 0x706 <RecallPasscode>
 be0:	9b 01       	movw	r18, r22
 be2:	ac 01       	movw	r20, r24
 be4:	8c 81       	ldd	r24, Y+4	; 0x04
 be6:	9d 81       	ldd	r25, Y+5	; 0x05
 be8:	ae 81       	ldd	r26, Y+6	; 0x06
 bea:	bf 81       	ldd	r27, Y+7	; 0x07
 bec:	28 17       	cp	r18, r24
 bee:	39 07       	cpc	r19, r25
 bf0:	4a 07       	cpc	r20, r26
 bf2:	5b 07       	cpc	r21, r27
 bf4:	99 f4       	brne	.+38     	; 0xc1c <main+0xa8>
			{
				delay_ms(100);					//delay to make unlock sequence easier to see
 bf6:	84 e6       	ldi	r24, 0x64	; 100
 bf8:	90 e0       	ldi	r25, 0x00	; 0
 bfa:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
				displayUnlock();
 bfe:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <displayUnlock>
				
				while(ReadOne()!= 0x0F);		//wait until # is pressed to lock the safe
 c02:	00 00       	nop
 c04:	0e 94 4e 04 	call	0x89c	; 0x89c <ReadOne>
 c08:	8f 30       	cpi	r24, 0x0F	; 15
 c0a:	e1 f7       	brne	.-8      	; 0xc04 <main+0x90>
				ReadNone();
 c0c:	0e 94 9e 04 	call	0x93c	; 0x93c <ReadNone>
				PORTB = 0x00;
 c10:	88 e3       	ldi	r24, 0x38	; 56
 c12:	90 e0       	ldi	r25, 0x00	; 0
 c14:	fc 01       	movw	r30, r24
 c16:	10 82       	st	Z, r1
				noOfAttempts =0;				//reset the number of attempts on a succeful passcode
 c18:	19 82       	std	Y+1, r1	; 0x01
 c1a:	be cf       	rjmp	.-132    	; 0xb98 <main+0x24>
			}
			
			// LOCK // If passcode is incorrect
			else		
			{
				delay_ms(100);						//delay to make lock sequence easier to see
 c1c:	84 e6       	ldi	r24, 0x64	; 100
 c1e:	90 e0       	ldi	r25, 0x00	; 0
 c20:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
				displayLock();
 c24:	0e 94 97 01 	call	0x32e	; 0x32e <displayLock>
				noOfAttempts = noOfAttempts + 1;	// Increment number of attempts by 1
 c28:	89 81       	ldd	r24, Y+1	; 0x01
 c2a:	8f 5f       	subi	r24, 0xFF	; 255
 c2c:	89 83       	std	Y+1, r24	; 0x01
					
				if (noOfAttempts >= 3)				// Ensure number of passcode attempts < 3
 c2e:	89 81       	ldd	r24, Y+1	; 0x01
 c30:	83 30       	cpi	r24, 0x03	; 3
 c32:	08 f4       	brcc	.+2      	; 0xc36 <main+0xc2>
 c34:	b1 cf       	rjmp	.-158    	; 0xb98 <main+0x24>
				{
					// LOCKOUT // when number of attempts is more than 3
					displayLockout();
 c36:	0e 94 7d 02 	call	0x4fa	; 0x4fa <displayLockout>
 c3a:	ae cf       	rjmp	.-164    	; 0xb98 <main+0x24>
				}
			}	
		}
			
			
		else if (user == 0x0E)		// If the * is pressed
 c3c:	8b 81       	ldd	r24, Y+3	; 0x03
 c3e:	8e 30       	cpi	r24, 0x0E	; 14
 c40:	c9 f4       	brne	.+50     	; 0xc74 <main+0x100>
		{
			PORTB = 0xFF;
 c42:	88 e3       	ldi	r24, 0x38	; 56
 c44:	90 e0       	ldi	r25, 0x00	; 0
 c46:	2f ef       	ldi	r18, 0xFF	; 255
 c48:	fc 01       	movw	r30, r24
 c4a:	20 83       	st	Z, r18
			if(isHeld3s())			//check if the button is held for 3 seconds
 c4c:	0e 94 65 05 	call	0xaca	; 0xaca <isHeld3s>
 c50:	88 23       	and	r24, r24
 c52:	49 f0       	breq	.+18     	; 0xc66 <main+0xf2>
			{
				displayProgramming();	//flash the LEDs to indicate entering programming mode
 c54:	0e 94 ef 01 	call	0x3de	; 0x3de <displayProgramming>
				PORTB = 0xFF;
 c58:	88 e3       	ldi	r24, 0x38	; 56
 c5a:	90 e0       	ldi	r25, 0x00	; 0
 c5c:	2f ef       	ldi	r18, 0xFF	; 255
 c5e:	fc 01       	movw	r30, r24
 c60:	20 83       	st	Z, r18
				// ENTER PROGRAMMING MODE //
				ProgramMode();
 c62:	0e 94 41 06 	call	0xc82	; 0xc82 <ProgramMode>
			}	
			
			ReadNone();	//if * isnt held turn of the LEDs and exit
 c66:	0e 94 9e 04 	call	0x93c	; 0x93c <ReadNone>
			PORTB = 0;
 c6a:	88 e3       	ldi	r24, 0x38	; 56
 c6c:	90 e0       	ldi	r25, 0x00	; 0
 c6e:	fc 01       	movw	r30, r24
 c70:	10 82       	st	Z, r1
 c72:	92 cf       	rjmp	.-220    	; 0xb98 <main+0x24>
		}
			
		else // If any other key is pressed
		{
			delay_ms(100);
 c74:	84 e6       	ldi	r24, 0x64	; 100
 c76:	90 e0       	ldi	r25, 0x00	; 0
 c78:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
			displayIncorrect();
 c7c:	0e 94 17 02 	call	0x42e	; 0x42e <displayIncorrect>
		}		
    }
 c80:	8b cf       	rjmp	.-234    	; 0xb98 <main+0x24>

00000c82 <ProgramMode>:
}

//**************************************************************************************************************************************************
//Same functionality as the general mode but with the LEDs indicating the user is in PROGRAMMING mode and passcodes can be stored into EEPROM
void ProgramMode(void)
{
 c82:	cf 93       	push	r28
 c84:	df 93       	push	r29
 c86:	cd b7       	in	r28, 0x3d	; 61
 c88:	de b7       	in	r29, 0x3e	; 62
 c8a:	2b 97       	sbiw	r28, 0x0b	; 11
 c8c:	0f b6       	in	r0, 0x3f	; 63
 c8e:	f8 94       	cli
 c90:	de bf       	out	0x3e, r29	; 62
 c92:	0f be       	out	0x3f, r0	; 63
 c94:	cd bf       	out	0x3d, r28	; 61
	ReadNone();						//wait until nothing is pressed, otherwise user could still be holding *
 c96:	0e 94 9e 04 	call	0x93c	; 0x93c <ReadNone>
	uint8_t noOfAttempts = 0;		// Set number of attempts to 0
 c9a:	19 82       	std	Y+1, r1	; 0x01
	
	while(1)
	{
	
		uint8_t user = ReadOne();		//determines the first key pressed, may not always be a user
 c9c:	0e 94 4e 04 	call	0x89c	; 0x89c <ReadOne>
 ca0:	8a 83       	std	Y+2, r24	; 0x02
		uint32_t attemptPasscode;
	
	
		if (isUser(user))	// Check if user A B C or D is chosen
 ca2:	8a 81       	ldd	r24, Y+2	; 0x02
 ca4:	0e 94 40 05 	call	0xa80	; 0xa80 <isUser>
 ca8:	88 23       	and	r24, r24
 caa:	09 f4       	brne	.+2      	; 0xcae <ProgramMode+0x2c>
 cac:	76 c0       	rjmp	.+236    	; 0xd9a <ProgramMode+0x118>
		{
			displayUser(user);	//write the corresponding user LED pattern to the LEDs
 cae:	8a 81       	ldd	r24, Y+2	; 0x02
 cb0:	0e 94 92 02 	call	0x524	; 0x524 <displayUser>
			ReadNone();
 cb4:	0e 94 9e 04 	call	0x93c	; 0x93c <ReadNone>
			PORTB = 0xFF;
 cb8:	88 e3       	ldi	r24, 0x38	; 56
 cba:	90 e0       	ldi	r25, 0x00	; 0
 cbc:	2f ef       	ldi	r18, 0xFF	; 255
 cbe:	fc 01       	movw	r30, r24
 cc0:	20 83       	st	Z, r18
		
			attemptPasscode = InputPasscode();		// Read the passcode from the keypad
 cc2:	0e 94 c2 04 	call	0x984	; 0x984 <InputPasscode>
 cc6:	dc 01       	movw	r26, r24
 cc8:	cb 01       	movw	r24, r22
 cca:	8b 83       	std	Y+3, r24	; 0x03
 ccc:	9c 83       	std	Y+4, r25	; 0x04
 cce:	ad 83       	std	Y+5, r26	; 0x05
 cd0:	be 83       	std	Y+6, r27	; 0x06
			
			
			if (RecallPasscode(user) == attemptPasscode)	// If the attempted passcode is equal to the stored passcode, UNLOCK
 cd2:	8a 81       	ldd	r24, Y+2	; 0x02
 cd4:	0e 94 83 03 	call	0x706	; 0x706 <RecallPasscode>
 cd8:	9b 01       	movw	r18, r22
 cda:	ac 01       	movw	r20, r24
 cdc:	8b 81       	ldd	r24, Y+3	; 0x03
 cde:	9c 81       	ldd	r25, Y+4	; 0x04
 ce0:	ad 81       	ldd	r26, Y+5	; 0x05
 ce2:	be 81       	ldd	r27, Y+6	; 0x06
 ce4:	28 17       	cp	r18, r24
 ce6:	39 07       	cpc	r19, r25
 ce8:	4a 07       	cpc	r20, r26
 cea:	5b 07       	cpc	r21, r27
 cec:	09 f0       	breq	.+2      	; 0xcf0 <ProgramMode+0x6e>
 cee:	3e c0       	rjmp	.+124    	; 0xd6c <ProgramMode+0xea>
			{
				delay_ms(100);
 cf0:	84 e6       	ldi	r24, 0x64	; 100
 cf2:	90 e0       	ldi	r25, 0x00	; 0
 cf4:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
				displayUnlockProg();
 cf8:	0e 94 40 01 	call	0x280	; 0x280 <displayUnlockProg>
				ReadNone();
 cfc:	0e 94 9e 04 	call	0x93c	; 0x93c <ReadNone>
				PORTB =0xff;
 d00:	88 e3       	ldi	r24, 0x38	; 56
 d02:	90 e0       	ldi	r25, 0x00	; 0
 d04:	2f ef       	ldi	r18, 0xFF	; 255
 d06:	fc 01       	movw	r30, r24
 d08:	20 83       	st	Z, r18
					
				/////////////////////////////////////////////////////////
				uint32_t NewPassword = InputPasscode();
 d0a:	0e 94 c2 04 	call	0x984	; 0x984 <InputPasscode>
 d0e:	dc 01       	movw	r26, r24
 d10:	cb 01       	movw	r24, r22
 d12:	8f 83       	std	Y+7, r24	; 0x07
 d14:	98 87       	std	Y+8, r25	; 0x08
 d16:	a9 87       	std	Y+9, r26	; 0x09
 d18:	ba 87       	std	Y+10, r27	; 0x0a
				uint8_t NewPasswordSize = DigitCount(NewPassword);
 d1a:	8f 81       	ldd	r24, Y+7	; 0x07
 d1c:	98 85       	ldd	r25, Y+8	; 0x08
 d1e:	a9 85       	ldd	r26, Y+9	; 0x09
 d20:	ba 85       	ldd	r27, Y+10	; 0x0a
 d22:	bc 01       	movw	r22, r24
 d24:	cd 01       	movw	r24, r26
 d26:	0e 94 87 05 	call	0xb0e	; 0xb0e <DigitCount>
 d2a:	8b 87       	std	Y+11, r24	; 0x0b
					
				if((NewPasswordSize >= 6)&& (NewPasswordSize <= 8))
 d2c:	8b 85       	ldd	r24, Y+11	; 0x0b
 d2e:	86 30       	cpi	r24, 0x06	; 6
 d30:	08 f4       	brcc	.+2      	; 0xd34 <ProgramMode+0xb2>
 d32:	b4 cf       	rjmp	.-152    	; 0xc9c <ProgramMode+0x1a>
 d34:	8b 85       	ldd	r24, Y+11	; 0x0b
 d36:	89 30       	cpi	r24, 0x09	; 9
 d38:	08 f0       	brcs	.+2      	; 0xd3c <ProgramMode+0xba>
 d3a:	b0 cf       	rjmp	.-160    	; 0xc9c <ProgramMode+0x1a>
				{
					storePasscode(NewPassword,user);
 d3c:	8f 81       	ldd	r24, Y+7	; 0x07
 d3e:	98 85       	ldd	r25, Y+8	; 0x08
 d40:	a9 85       	ldd	r26, Y+9	; 0x09
 d42:	ba 85       	ldd	r27, Y+10	; 0x0a
 d44:	4a 81       	ldd	r20, Y+2	; 0x02
 d46:	bc 01       	movw	r22, r24
 d48:	cd 01       	movw	r24, r26
 d4a:	0e 94 28 03 	call	0x650	; 0x650 <storePasscode>
					displayUnlock();
 d4e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <displayUnlock>
					while(ReadOne()!= 0x0F);		//wait until # is pressed to lock the safe
 d52:	00 00       	nop
 d54:	0e 94 4e 04 	call	0x89c	; 0x89c <ReadOne>
 d58:	8f 30       	cpi	r24, 0x0F	; 15
 d5a:	e1 f7       	brne	.-8      	; 0xd54 <ProgramMode+0xd2>
					ReadNone();
 d5c:	0e 94 9e 04 	call	0x93c	; 0x93c <ReadNone>
					PORTB = 0x00;
 d60:	88 e3       	ldi	r24, 0x38	; 56
 d62:	90 e0       	ldi	r25, 0x00	; 0
 d64:	fc 01       	movw	r30, r24
 d66:	10 82       	st	Z, r1
					noOfAttempts = 0;
 d68:	19 82       	std	Y+1, r1	; 0x01
					return;
 d6a:	23 c0       	rjmp	.+70     	; 0xdb2 <ProgramMode+0x130>
				}
			}
			
			else		// If incorrect, display LOCK
			{
				delay_ms(100);
 d6c:	84 e6       	ldi	r24, 0x64	; 100
 d6e:	90 e0       	ldi	r25, 0x00	; 0
 d70:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
				displayLock();
 d74:	0e 94 97 01 	call	0x32e	; 0x32e <displayLock>
				ReadNone();
 d78:	0e 94 9e 04 	call	0x93c	; 0x93c <ReadNone>
				PORTB =0xff;
 d7c:	88 e3       	ldi	r24, 0x38	; 56
 d7e:	90 e0       	ldi	r25, 0x00	; 0
 d80:	2f ef       	ldi	r18, 0xFF	; 255
 d82:	fc 01       	movw	r30, r24
 d84:	20 83       	st	Z, r18
				
				noOfAttempts = noOfAttempts + 1;	// Increment number of attempts by 1
 d86:	89 81       	ldd	r24, Y+1	; 0x01
 d88:	8f 5f       	subi	r24, 0xFF	; 255
 d8a:	89 83       	std	Y+1, r24	; 0x01
					
				if (noOfAttempts >= 3)	// Ensure number of passcode attempts < 3
 d8c:	89 81       	ldd	r24, Y+1	; 0x01
 d8e:	83 30       	cpi	r24, 0x03	; 3
 d90:	08 f4       	brcc	.+2      	; 0xd94 <ProgramMode+0x112>
 d92:	84 cf       	rjmp	.-248    	; 0xc9c <ProgramMode+0x1a>
				{
					// LOCKOUT when number of attempts is more than 3
					displayLockout();
 d94:	0e 94 7d 02 	call	0x4fa	; 0x4fa <displayLockout>
					return;
 d98:	0c c0       	rjmp	.+24     	; 0xdb2 <ProgramMode+0x130>
		}
		
		
		else // If any other key is pressed
		{
			delay_ms(100);
 d9a:	84 e6       	ldi	r24, 0x64	; 100
 d9c:	90 e0       	ldi	r25, 0x00	; 0
 d9e:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
			displayIncorrect();
 da2:	0e 94 17 02 	call	0x42e	; 0x42e <displayIncorrect>
			PORTB = 0xFF;
 da6:	88 e3       	ldi	r24, 0x38	; 56
 da8:	90 e0       	ldi	r25, 0x00	; 0
 daa:	2f ef       	ldi	r18, 0xFF	; 255
 dac:	fc 01       	movw	r30, r24
 dae:	20 83       	st	Z, r18
		}
	}
 db0:	75 cf       	rjmp	.-278    	; 0xc9c <ProgramMode+0x1a>
 db2:	2b 96       	adiw	r28, 0x0b	; 11
 db4:	0f b6       	in	r0, 0x3f	; 63
 db6:	f8 94       	cli
 db8:	de bf       	out	0x3e, r29	; 62
 dba:	0f be       	out	0x3f, r0	; 63
 dbc:	cd bf       	out	0x3d, r28	; 61
 dbe:	df 91       	pop	r29
 dc0:	cf 91       	pop	r28
 dc2:	08 95       	ret

00000dc4 <__udivmodsi4>:
 dc4:	a1 e2       	ldi	r26, 0x21	; 33
 dc6:	1a 2e       	mov	r1, r26
 dc8:	aa 1b       	sub	r26, r26
 dca:	bb 1b       	sub	r27, r27
 dcc:	fd 01       	movw	r30, r26
 dce:	0d c0       	rjmp	.+26     	; 0xdea <__udivmodsi4_ep>

00000dd0 <__udivmodsi4_loop>:
 dd0:	aa 1f       	adc	r26, r26
 dd2:	bb 1f       	adc	r27, r27
 dd4:	ee 1f       	adc	r30, r30
 dd6:	ff 1f       	adc	r31, r31
 dd8:	a2 17       	cp	r26, r18
 dda:	b3 07       	cpc	r27, r19
 ddc:	e4 07       	cpc	r30, r20
 dde:	f5 07       	cpc	r31, r21
 de0:	20 f0       	brcs	.+8      	; 0xdea <__udivmodsi4_ep>
 de2:	a2 1b       	sub	r26, r18
 de4:	b3 0b       	sbc	r27, r19
 de6:	e4 0b       	sbc	r30, r20
 de8:	f5 0b       	sbc	r31, r21

00000dea <__udivmodsi4_ep>:
 dea:	66 1f       	adc	r22, r22
 dec:	77 1f       	adc	r23, r23
 dee:	88 1f       	adc	r24, r24
 df0:	99 1f       	adc	r25, r25
 df2:	1a 94       	dec	r1
 df4:	69 f7       	brne	.-38     	; 0xdd0 <__udivmodsi4_loop>
 df6:	60 95       	com	r22
 df8:	70 95       	com	r23
 dfa:	80 95       	com	r24
 dfc:	90 95       	com	r25
 dfe:	9b 01       	movw	r18, r22
 e00:	ac 01       	movw	r20, r24
 e02:	bd 01       	movw	r22, r26
 e04:	cf 01       	movw	r24, r30
 e06:	08 95       	ret

00000e08 <__tablejump2__>:
 e08:	ee 0f       	add	r30, r30
 e0a:	ff 1f       	adc	r31, r31
 e0c:	05 90       	lpm	r0, Z+
 e0e:	f4 91       	lpm	r31, Z
 e10:	e0 2d       	mov	r30, r0
 e12:	09 94       	ijmp

00000e14 <_exit>:
 e14:	f8 94       	cli

00000e16 <__stop_program>:
 e16:	ff cf       	rjmp	.-2      	; 0xe16 <__stop_program>
