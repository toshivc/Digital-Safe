
Digital_Safe_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000354  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000414  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000809  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000655  00000000  00000000  00000cbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005d7  00000000  00000000  00001312  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000150  00000000  00000000  000018ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a1  00000000  00000000  00001a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000020c  00000000  00000000  00001ddd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00001fe9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <main>
  74:	0c 94 a8 01 	jmp	0x350	; 0x350 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <delay>:


//****************************************************************************************
//Timer with minimum time of 0.01 seconds, max time of 11mins
void delay(uint16_t delayTime)
{
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	00 d0       	rcall	.+0      	; 0x82 <delay+0x6>
  82:	00 d0       	rcall	.+0      	; 0x84 <delay+0x8>
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
  88:	9c 83       	std	Y+4, r25	; 0x04
  8a:	8b 83       	std	Y+3, r24	; 0x03
	//12MHz divided by 1024 is 11.718KHz, or clock time of 85.3micro seconds
	//multiplied by 118 gives 0.010069 seconds
	
	TCNT0 = 0x00;		//reset timer to 0
  8c:	82 e5       	ldi	r24, 0x52	; 82
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	fc 01       	movw	r30, r24
  92:	10 82       	st	Z, r1
	OCR0 = 118;			//set compare register 
  94:	8c e5       	ldi	r24, 0x5C	; 92
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	26 e7       	ldi	r18, 0x76	; 118
  9a:	fc 01       	movw	r30, r24
  9c:	20 83       	st	Z, r18
	TIFR = (1<<OCF0);	//reset compare flag
  9e:	88 e5       	ldi	r24, 0x58	; 88
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	22 e0       	ldi	r18, 0x02	; 2
  a4:	fc 01       	movw	r30, r24
  a6:	20 83       	st	Z, r18
	
	uint16_t overflowCounter = 0;
  a8:	1a 82       	std	Y+2, r1	; 0x02
  aa:	19 82       	std	Y+1, r1	; 0x01
	
	while (1)
	{
		while((TIFR & (1<<OCF0))==0); //while OCF0, overflow flag is 0
  ac:	00 00       	nop
  ae:	88 e5       	ldi	r24, 0x58	; 88
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	fc 01       	movw	r30, r24
  b4:	80 81       	ld	r24, Z
  b6:	88 2f       	mov	r24, r24
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	82 70       	andi	r24, 0x02	; 2
  bc:	99 27       	eor	r25, r25
  be:	89 2b       	or	r24, r25
  c0:	b1 f3       	breq	.-20     	; 0xae <delay+0x32>
		TCNT0 = 0x00;		//reset timer to 0
  c2:	82 e5       	ldi	r24, 0x52	; 82
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	fc 01       	movw	r30, r24
  c8:	10 82       	st	Z, r1
		TIFR = (1<<OCF0); //reset compare flag
  ca:	88 e5       	ldi	r24, 0x58	; 88
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	22 e0       	ldi	r18, 0x02	; 2
  d0:	fc 01       	movw	r30, r24
  d2:	20 83       	st	Z, r18
		overflowCounter++;
  d4:	89 81       	ldd	r24, Y+1	; 0x01
  d6:	9a 81       	ldd	r25, Y+2	; 0x02
  d8:	01 96       	adiw	r24, 0x01	; 1
  da:	9a 83       	std	Y+2, r25	; 0x02
  dc:	89 83       	std	Y+1, r24	; 0x01
		if (overflowCounter >= delayTime)
  de:	29 81       	ldd	r18, Y+1	; 0x01
  e0:	3a 81       	ldd	r19, Y+2	; 0x02
  e2:	8b 81       	ldd	r24, Y+3	; 0x03
  e4:	9c 81       	ldd	r25, Y+4	; 0x04
  e6:	28 17       	cp	r18, r24
  e8:	39 07       	cpc	r19, r25
  ea:	08 f4       	brcc	.+2      	; 0xee <delay+0x72>
		{
			return;
		}
	}	
  ec:	df cf       	rjmp	.-66     	; 0xac <delay+0x30>
		TCNT0 = 0x00;		//reset timer to 0
		TIFR = (1<<OCF0); //reset compare flag
		overflowCounter++;
		if (overflowCounter >= delayTime)
		{
			return;
  ee:	00 00       	nop
		}
	}	
}
  f0:	0f 90       	pop	r0
  f2:	0f 90       	pop	r0
  f4:	0f 90       	pop	r0
  f6:	0f 90       	pop	r0
  f8:	df 91       	pop	r29
  fa:	cf 91       	pop	r28
  fc:	08 95       	ret

000000fe <displayUnlock>:
#include "Delay.h"


//unlock LED sequence
void displayUnlock (void)
{
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
 102:	00 d0       	rcall	.+0      	; 0x104 <displayUnlock+0x6>
 104:	00 d0       	rcall	.+0      	; 0x106 <displayUnlock+0x8>
 106:	cd b7       	in	r28, 0x3d	; 61
 108:	de b7       	in	r29, 0x3e	; 62
	for (int i = 0; i <4; i++)
 10a:	1a 82       	std	Y+2, r1	; 0x02
 10c:	19 82       	std	Y+1, r1	; 0x01
 10e:	1b c0       	rjmp	.+54     	; 0x146 <displayUnlock+0x48>
	{
		PORTB = 1<<(1+i*2);
 110:	88 e3       	ldi	r24, 0x38	; 56
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	29 81       	ldd	r18, Y+1	; 0x01
 116:	3a 81       	ldd	r19, Y+2	; 0x02
 118:	22 0f       	add	r18, r18
 11a:	33 1f       	adc	r19, r19
 11c:	a9 01       	movw	r20, r18
 11e:	4f 5f       	subi	r20, 0xFF	; 255
 120:	5f 4f       	sbci	r21, 0xFF	; 255
 122:	21 e0       	ldi	r18, 0x01	; 1
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	02 c0       	rjmp	.+4      	; 0x12c <displayUnlock+0x2e>
 128:	22 0f       	add	r18, r18
 12a:	33 1f       	adc	r19, r19
 12c:	4a 95       	dec	r20
 12e:	e2 f7       	brpl	.-8      	; 0x128 <displayUnlock+0x2a>
 130:	fc 01       	movw	r30, r24
 132:	20 83       	st	Z, r18
		delay(10);
 134:	8a e0       	ldi	r24, 0x0A	; 10
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 3e 00 	call	0x7c	; 0x7c <delay>


//unlock LED sequence
void displayUnlock (void)
{
	for (int i = 0; i <4; i++)
 13c:	89 81       	ldd	r24, Y+1	; 0x01
 13e:	9a 81       	ldd	r25, Y+2	; 0x02
 140:	01 96       	adiw	r24, 0x01	; 1
 142:	9a 83       	std	Y+2, r25	; 0x02
 144:	89 83       	std	Y+1, r24	; 0x01
 146:	89 81       	ldd	r24, Y+1	; 0x01
 148:	9a 81       	ldd	r25, Y+2	; 0x02
 14a:	04 97       	sbiw	r24, 0x04	; 4
 14c:	0c f3       	brlt	.-62     	; 0x110 <displayUnlock+0x12>
	{
		PORTB = 1<<(1+i*2);
		delay(10);
	}
	for (int i = 0; i <4; i++)
 14e:	1c 82       	std	Y+4, r1	; 0x04
 150:	1b 82       	std	Y+3, r1	; 0x03
 152:	1c c0       	rjmp	.+56     	; 0x18c <displayUnlock+0x8e>
	{
		PORTB = 1<<(7-i*2);
 154:	88 e3       	ldi	r24, 0x38	; 56
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	2b 81       	ldd	r18, Y+3	; 0x03
 15a:	3c 81       	ldd	r19, Y+4	; 0x04
 15c:	22 0f       	add	r18, r18
 15e:	33 1f       	adc	r19, r19
 160:	47 e0       	ldi	r20, 0x07	; 7
 162:	50 e0       	ldi	r21, 0x00	; 0
 164:	42 1b       	sub	r20, r18
 166:	53 0b       	sbc	r21, r19
 168:	21 e0       	ldi	r18, 0x01	; 1
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	02 c0       	rjmp	.+4      	; 0x172 <displayUnlock+0x74>
 16e:	22 0f       	add	r18, r18
 170:	33 1f       	adc	r19, r19
 172:	4a 95       	dec	r20
 174:	e2 f7       	brpl	.-8      	; 0x16e <displayUnlock+0x70>
 176:	fc 01       	movw	r30, r24
 178:	20 83       	st	Z, r18
		delay(10);
 17a:	8a e0       	ldi	r24, 0x0A	; 10
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 3e 00 	call	0x7c	; 0x7c <delay>
	for (int i = 0; i <4; i++)
	{
		PORTB = 1<<(1+i*2);
		delay(10);
	}
	for (int i = 0; i <4; i++)
 182:	8b 81       	ldd	r24, Y+3	; 0x03
 184:	9c 81       	ldd	r25, Y+4	; 0x04
 186:	01 96       	adiw	r24, 0x01	; 1
 188:	9c 83       	std	Y+4, r25	; 0x04
 18a:	8b 83       	std	Y+3, r24	; 0x03
 18c:	8b 81       	ldd	r24, Y+3	; 0x03
 18e:	9c 81       	ldd	r25, Y+4	; 0x04
 190:	04 97       	sbiw	r24, 0x04	; 4
 192:	04 f3       	brlt	.-64     	; 0x154 <displayUnlock+0x56>
	{
		PORTB = 1<<(7-i*2);
		delay(10);
	}
	PORTB = 0x00;
 194:	88 e3       	ldi	r24, 0x38	; 56
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	fc 01       	movw	r30, r24
 19a:	10 82       	st	Z, r1
}
 19c:	00 00       	nop
 19e:	0f 90       	pop	r0
 1a0:	0f 90       	pop	r0
 1a2:	0f 90       	pop	r0
 1a4:	0f 90       	pop	r0
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	08 95       	ret

000001ac <displayLock>:
//****************************************************************************************

//****************************************************************************************
//unlock LED sequence
void displayLock (void)
{
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
 1b0:	00 d0       	rcall	.+0      	; 0x1b2 <displayLock+0x6>
 1b2:	00 d0       	rcall	.+0      	; 0x1b4 <displayLock+0x8>
 1b4:	cd b7       	in	r28, 0x3d	; 61
 1b6:	de b7       	in	r29, 0x3e	; 62
	for (int i = 0; i <4; i++)
 1b8:	1a 82       	std	Y+2, r1	; 0x02
 1ba:	19 82       	std	Y+1, r1	; 0x01
 1bc:	19 c0       	rjmp	.+50     	; 0x1f0 <displayLock+0x44>
	{
		PORTB = 1<<(i*2);
 1be:	88 e3       	ldi	r24, 0x38	; 56
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	29 81       	ldd	r18, Y+1	; 0x01
 1c4:	3a 81       	ldd	r19, Y+2	; 0x02
 1c6:	a9 01       	movw	r20, r18
 1c8:	44 0f       	add	r20, r20
 1ca:	55 1f       	adc	r21, r21
 1cc:	21 e0       	ldi	r18, 0x01	; 1
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <displayLock+0x2a>
 1d2:	22 0f       	add	r18, r18
 1d4:	33 1f       	adc	r19, r19
 1d6:	4a 95       	dec	r20
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <displayLock+0x26>
 1da:	fc 01       	movw	r30, r24
 1dc:	20 83       	st	Z, r18
		delay(10);
 1de:	8a e0       	ldi	r24, 0x0A	; 10
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 3e 00 	call	0x7c	; 0x7c <delay>

//****************************************************************************************
//unlock LED sequence
void displayLock (void)
{
	for (int i = 0; i <4; i++)
 1e6:	89 81       	ldd	r24, Y+1	; 0x01
 1e8:	9a 81       	ldd	r25, Y+2	; 0x02
 1ea:	01 96       	adiw	r24, 0x01	; 1
 1ec:	9a 83       	std	Y+2, r25	; 0x02
 1ee:	89 83       	std	Y+1, r24	; 0x01
 1f0:	89 81       	ldd	r24, Y+1	; 0x01
 1f2:	9a 81       	ldd	r25, Y+2	; 0x02
 1f4:	04 97       	sbiw	r24, 0x04	; 4
 1f6:	1c f3       	brlt	.-58     	; 0x1be <displayLock+0x12>
	{
		PORTB = 1<<(i*2);
		delay(10);
	}
	for (int i = 0; i <4; i++)
 1f8:	1c 82       	std	Y+4, r1	; 0x04
 1fa:	1b 82       	std	Y+3, r1	; 0x03
 1fc:	1f c0       	rjmp	.+62     	; 0x23c <displayLock+0x90>
	{
		PORTB = 1<<(8-i*2);
 1fe:	88 e3       	ldi	r24, 0x38	; 56
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	44 e0       	ldi	r20, 0x04	; 4
 204:	50 e0       	ldi	r21, 0x00	; 0
 206:	2b 81       	ldd	r18, Y+3	; 0x03
 208:	3c 81       	ldd	r19, Y+4	; 0x04
 20a:	ba 01       	movw	r22, r20
 20c:	62 1b       	sub	r22, r18
 20e:	73 0b       	sbc	r23, r19
 210:	9b 01       	movw	r18, r22
 212:	a9 01       	movw	r20, r18
 214:	44 0f       	add	r20, r20
 216:	55 1f       	adc	r21, r21
 218:	21 e0       	ldi	r18, 0x01	; 1
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	02 c0       	rjmp	.+4      	; 0x222 <displayLock+0x76>
 21e:	22 0f       	add	r18, r18
 220:	33 1f       	adc	r19, r19
 222:	4a 95       	dec	r20
 224:	e2 f7       	brpl	.-8      	; 0x21e <displayLock+0x72>
 226:	fc 01       	movw	r30, r24
 228:	20 83       	st	Z, r18
		delay(10);
 22a:	8a e0       	ldi	r24, 0x0A	; 10
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 3e 00 	call	0x7c	; 0x7c <delay>
	for (int i = 0; i <4; i++)
	{
		PORTB = 1<<(i*2);
		delay(10);
	}
	for (int i = 0; i <4; i++)
 232:	8b 81       	ldd	r24, Y+3	; 0x03
 234:	9c 81       	ldd	r25, Y+4	; 0x04
 236:	01 96       	adiw	r24, 0x01	; 1
 238:	9c 83       	std	Y+4, r25	; 0x04
 23a:	8b 83       	std	Y+3, r24	; 0x03
 23c:	8b 81       	ldd	r24, Y+3	; 0x03
 23e:	9c 81       	ldd	r25, Y+4	; 0x04
 240:	04 97       	sbiw	r24, 0x04	; 4
 242:	ec f2       	brlt	.-70     	; 0x1fe <displayLock+0x52>
	{
		PORTB = 1<<(8-i*2);
		delay(10);
	}
	PORTB = 0x00;
 244:	88 e3       	ldi	r24, 0x38	; 56
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	fc 01       	movw	r30, r24
 24a:	10 82       	st	Z, r1
}
 24c:	00 00       	nop
 24e:	0f 90       	pop	r0
 250:	0f 90       	pop	r0
 252:	0f 90       	pop	r0
 254:	0f 90       	pop	r0
 256:	df 91       	pop	r29
 258:	cf 91       	pop	r28
 25a:	08 95       	ret

0000025c <displayProgramming>:
//****************************************************************************************

//****************************************************************************************
//Programming mode LED sequence
void displayProgramming(void)
{
 25c:	cf 93       	push	r28
 25e:	df 93       	push	r29
 260:	00 d0       	rcall	.+0      	; 0x262 <displayProgramming+0x6>
 262:	cd b7       	in	r28, 0x3d	; 61
 264:	de b7       	in	r29, 0x3e	; 62
	for (int i = 0; i <10; i++)
 266:	1a 82       	std	Y+2, r1	; 0x02
 268:	19 82       	std	Y+1, r1	; 0x01
 26a:	16 c0       	rjmp	.+44     	; 0x298 <displayProgramming+0x3c>
	{
		PORTB = 0xFF;
 26c:	88 e3       	ldi	r24, 0x38	; 56
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	2f ef       	ldi	r18, 0xFF	; 255
 272:	fc 01       	movw	r30, r24
 274:	20 83       	st	Z, r18
		delay(10);
 276:	8a e0       	ldi	r24, 0x0A	; 10
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	0e 94 3e 00 	call	0x7c	; 0x7c <delay>
		PORTB = 0x00;
 27e:	88 e3       	ldi	r24, 0x38	; 56
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	fc 01       	movw	r30, r24
 284:	10 82       	st	Z, r1
		delay(10);
 286:	8a e0       	ldi	r24, 0x0A	; 10
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	0e 94 3e 00 	call	0x7c	; 0x7c <delay>

//****************************************************************************************
//Programming mode LED sequence
void displayProgramming(void)
{
	for (int i = 0; i <10; i++)
 28e:	89 81       	ldd	r24, Y+1	; 0x01
 290:	9a 81       	ldd	r25, Y+2	; 0x02
 292:	01 96       	adiw	r24, 0x01	; 1
 294:	9a 83       	std	Y+2, r25	; 0x02
 296:	89 83       	std	Y+1, r24	; 0x01
 298:	89 81       	ldd	r24, Y+1	; 0x01
 29a:	9a 81       	ldd	r25, Y+2	; 0x02
 29c:	0a 97       	sbiw	r24, 0x0a	; 10
 29e:	34 f3       	brlt	.-52     	; 0x26c <displayProgramming+0x10>
		PORTB = 0xFF;
		delay(10);
		PORTB = 0x00;
		delay(10);
	}
}
 2a0:	00 00       	nop
 2a2:	0f 90       	pop	r0
 2a4:	0f 90       	pop	r0
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	08 95       	ret

000002ac <initLEDs>:
void initKeypad(void)
{
	DDRC = 0xF0;		// Set rows to inputs and columns to outputs
	PORTC = 0x0F;		// Enable the pull-up resistors on the row inputs 
	PORTC = 0xFF;		// Set the columns to all on (idle state) & ensure pull-ups are still enabled
}
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
 2b0:	cd b7       	in	r28, 0x3d	; 61
 2b2:	de b7       	in	r29, 0x3e	; 62
 2b4:	87 e3       	ldi	r24, 0x37	; 55
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	2f ef       	ldi	r18, 0xFF	; 255
 2ba:	fc 01       	movw	r30, r24
 2bc:	20 83       	st	Z, r18
 2be:	88 e3       	ldi	r24, 0x38	; 56
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	fc 01       	movw	r30, r24
 2c4:	10 82       	st	Z, r1
 2c6:	00 00       	nop
 2c8:	df 91       	pop	r29
 2ca:	cf 91       	pop	r28
 2cc:	08 95       	ret

000002ce <initTimers>:


//****************************************************************************************
//Initialise Timers
void initTimers(void)
{
 2ce:	cf 93       	push	r28
 2d0:	df 93       	push	r29
 2d2:	cd b7       	in	r28, 0x3d	; 61
 2d4:	de b7       	in	r29, 0x3e	; 62
	//set timer counter to 0
	TCNT0 = 0x00;
 2d6:	82 e5       	ldi	r24, 0x52	; 82
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	fc 01       	movw	r30, r24
 2dc:	10 82       	st	Z, r1
	//set clock prescaler to divide by 1024
	TCCR0 |= (1<<CS00) | (0<<CS01) | (1<<CS02);
 2de:	83 e5       	ldi	r24, 0x53	; 83
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	23 e5       	ldi	r18, 0x53	; 83
 2e4:	30 e0       	ldi	r19, 0x00	; 0
 2e6:	f9 01       	movw	r30, r18
 2e8:	20 81       	ld	r18, Z
 2ea:	25 60       	ori	r18, 0x05	; 5
 2ec:	fc 01       	movw	r30, r24
 2ee:	20 83       	st	Z, r18
}
 2f0:	00 00       	nop
 2f2:	df 91       	pop	r29
 2f4:	cf 91       	pop	r28
 2f6:	08 95       	ret

000002f8 <main>:

// Global variables
uint8_t debugCode = 0;

int main(void)
{
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29
 2fc:	cd b7       	in	r28, 0x3d	; 61
 2fe:	de b7       	in	r29, 0x3e	; 62
	//initialise everything
    initTimers();
 300:	0e 94 67 01 	call	0x2ce	; 0x2ce <initTimers>
	initLEDs();
 304:	0e 94 56 01 	call	0x2ac	; 0x2ac <initLEDs>
	
	displayUnlock();		//testing LEDs and delays, should flash various sequences on OUSB
 308:	0e 94 7f 00 	call	0xfe	; 0xfe <displayUnlock>
	delay(100);
 30c:	84 e6       	ldi	r24, 0x64	; 100
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	0e 94 3e 00 	call	0x7c	; 0x7c <delay>
	displayLock();
 314:	0e 94 d6 00 	call	0x1ac	; 0x1ac <displayLock>
	delay(100);
 318:	84 e6       	ldi	r24, 0x64	; 100
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 3e 00 	call	0x7c	; 0x7c <delay>
	displayProgramming();
 320:	0e 94 2e 01 	call	0x25c	; 0x25c <displayProgramming>
	delay(5958);	//one min delay
 324:	86 e4       	ldi	r24, 0x46	; 70
 326:	97 e1       	ldi	r25, 0x17	; 23
 328:	0e 94 3e 00 	call	0x7c	; 0x7c <delay>
	
    while (1) 
    {
		PORTB = 0xFF;
 32c:	88 e3       	ldi	r24, 0x38	; 56
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	2f ef       	ldi	r18, 0xFF	; 255
 332:	fc 01       	movw	r30, r24
 334:	20 83       	st	Z, r18
		delay(10);
 336:	8a e0       	ldi	r24, 0x0A	; 10
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	0e 94 3e 00 	call	0x7c	; 0x7c <delay>
		PORTB = 0x00;
 33e:	88 e3       	ldi	r24, 0x38	; 56
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	fc 01       	movw	r30, r24
 344:	10 82       	st	Z, r1
		delay(30);
 346:	8e e1       	ldi	r24, 0x1E	; 30
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	0e 94 3e 00 	call	0x7c	; 0x7c <delay>
	
    }
 34e:	ee cf       	rjmp	.-36     	; 0x32c <main+0x34>

00000350 <_exit>:
 350:	f8 94       	cli

00000352 <__stop_program>:
 352:	ff cf       	rjmp	.-2      	; 0x352 <__stop_program>
