
Digital_Safe_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e3c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00000e3c  00000ed0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800076  00800076  00000ee6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ee6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f18  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00000f54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fc2  00000000  00000000  000010dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009bc  00000000  00000000  0000209e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f32  00000000  00000000  00002a5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000418  00000000  00000000  0000398c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005bd  00000000  00000000  00003da4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007a8  00000000  00000000  00004361  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00004b09  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	59 02       	muls	r21, r25
  56:	5b 02       	muls	r21, r27
  58:	5d 02       	muls	r21, r29
  5a:	5f 02       	muls	r21, r31
  5c:	61 02       	muls	r22, r17
  5e:	63 02       	muls	r22, r19
  60:	65 02       	muls	r22, r21
  62:	67 02       	muls	r22, r23
  64:	69 02       	muls	r22, r25
  66:	6b 02       	muls	r22, r27
  68:	6f 02       	muls	r22, r31
  6a:	71 02       	muls	r23, r17
  6c:	73 02       	muls	r23, r19
  6e:	75 02       	muls	r23, r21
  70:	77 02       	muls	r23, r23
  72:	77 02       	muls	r23, r23
  74:	6d 02       	muls	r22, r29

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf e5       	ldi	r28, 0x5F	; 95
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
  82:	10 e0       	ldi	r17, 0x00	; 0
  84:	a0 e6       	ldi	r26, 0x60	; 96
  86:	b0 e0       	ldi	r27, 0x00	; 0
  88:	ec e3       	ldi	r30, 0x3C	; 60
  8a:	fe e0       	ldi	r31, 0x0E	; 14
  8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
  8e:	05 90       	lpm	r0, Z+
  90:	0d 92       	st	X+, r0
  92:	a6 37       	cpi	r26, 0x76	; 118
  94:	b1 07       	cpc	r27, r17
  96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
  98:	20 e0       	ldi	r18, 0x00	; 0
  9a:	a6 e7       	ldi	r26, 0x76	; 118
  9c:	b0 e0       	ldi	r27, 0x00	; 0
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	aa 37       	cpi	r26, 0x7A	; 122
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <main>
  ac:	0c 94 1c 07 	jmp	0xe38	; 0xe38 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <delay_ms>:


// ****************************************************************************************
//Timer with minimum time of 0.001 seconds ie 1ms, max time of 65sec
void delay_ms(uint16_t delayTime)
{
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	00 d0       	rcall	.+0      	; 0xba <delay_ms+0x6>
  ba:	00 d0       	rcall	.+0      	; 0xbc <delay_ms+0x8>
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
  c0:	9c 83       	std	Y+4, r25	; 0x04
  c2:	8b 83       	std	Y+3, r24	; 0x03
	//12MHz divided by 1024 is 11.718KHz, or clock time of 85.3micro seconds
	//multiplied by 12 gives 0.001024 seconds
	
	TCNT0 = 0x00;		//reset timer to 0
  c4:	82 e5       	ldi	r24, 0x52	; 82
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	fc 01       	movw	r30, r24
  ca:	10 82       	st	Z, r1
	OCR0 = 12;			//set compare register 
  cc:	8c e5       	ldi	r24, 0x5C	; 92
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	2c e0       	ldi	r18, 0x0C	; 12
  d2:	fc 01       	movw	r30, r24
  d4:	20 83       	st	Z, r18
	TIFR = (1<<OCF0);	//reset compare flag
  d6:	88 e5       	ldi	r24, 0x58	; 88
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	22 e0       	ldi	r18, 0x02	; 2
  dc:	fc 01       	movw	r30, r24
  de:	20 83       	st	Z, r18
	
	uint16_t overflowCounter = 0;
  e0:	1a 82       	std	Y+2, r1	; 0x02
  e2:	19 82       	std	Y+1, r1	; 0x01
	
	while (1)
	{
		while((TIFR & (1<<OCF0))==0); //while OCF0, overflow flag is 0
  e4:	00 00       	nop
  e6:	88 e5       	ldi	r24, 0x58	; 88
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	fc 01       	movw	r30, r24
  ec:	80 81       	ld	r24, Z
  ee:	88 2f       	mov	r24, r24
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	82 70       	andi	r24, 0x02	; 2
  f4:	99 27       	eor	r25, r25
  f6:	89 2b       	or	r24, r25
  f8:	b1 f3       	breq	.-20     	; 0xe6 <delay_ms+0x32>
		TCNT0 = 0x00;		//reset timer to 0
  fa:	82 e5       	ldi	r24, 0x52	; 82
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	fc 01       	movw	r30, r24
 100:	10 82       	st	Z, r1
		TIFR = (1<<OCF0); //reset compare flag
 102:	88 e5       	ldi	r24, 0x58	; 88
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	22 e0       	ldi	r18, 0x02	; 2
 108:	fc 01       	movw	r30, r24
 10a:	20 83       	st	Z, r18
		overflowCounter++;
 10c:	89 81       	ldd	r24, Y+1	; 0x01
 10e:	9a 81       	ldd	r25, Y+2	; 0x02
 110:	01 96       	adiw	r24, 0x01	; 1
 112:	9a 83       	std	Y+2, r25	; 0x02
 114:	89 83       	std	Y+1, r24	; 0x01
		if (overflowCounter >= delayTime)
 116:	29 81       	ldd	r18, Y+1	; 0x01
 118:	3a 81       	ldd	r19, Y+2	; 0x02
 11a:	8b 81       	ldd	r24, Y+3	; 0x03
 11c:	9c 81       	ldd	r25, Y+4	; 0x04
 11e:	28 17       	cp	r18, r24
 120:	39 07       	cpc	r19, r25
 122:	08 f4       	brcc	.+2      	; 0x126 <delay_ms+0x72>
		{
			return;
		}
	}	
 124:	df cf       	rjmp	.-66     	; 0xe4 <delay_ms+0x30>
		TCNT0 = 0x00;		//reset timer to 0
		TIFR = (1<<OCF0); //reset compare flag
		overflowCounter++;
		if (overflowCounter >= delayTime)
		{
			return;
 126:	00 00       	nop
		}
	}	
}
 128:	0f 90       	pop	r0
 12a:	0f 90       	pop	r0
 12c:	0f 90       	pop	r0
 12e:	0f 90       	pop	r0
 130:	df 91       	pop	r29
 132:	cf 91       	pop	r28
 134:	08 95       	ret

00000136 <delay_sec>:
// ****************************************************************************************

// ****************************************************************************************
//Timer with minimum time of 1 second, max time of 18hours
void delay_sec(uint16_t delayTime)
{
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	00 d0       	rcall	.+0      	; 0x13c <delay_sec+0x6>
 13c:	00 d0       	rcall	.+0      	; 0x13e <delay_sec+0x8>
 13e:	cd b7       	in	r28, 0x3d	; 61
 140:	de b7       	in	r29, 0x3e	; 62
 142:	9c 83       	std	Y+4, r25	; 0x04
 144:	8b 83       	std	Y+3, r24	; 0x03
	//delayTime = delayTime * 1000;
	//12MHz divided by 1024 is 11.718KHz, or clock time of 85.3micro seconds
	//multiplied by 11719 gives 1.00002 seconds
	
	TCNT1 = 0x0000;		//reset timer to 0
 146:	8c e4       	ldi	r24, 0x4C	; 76
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	fc 01       	movw	r30, r24
 14c:	11 82       	std	Z+1, r1	; 0x01
 14e:	10 82       	st	Z, r1
	OCR1A = 11719;			//set compare register 
 150:	8a e4       	ldi	r24, 0x4A	; 74
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	27 ec       	ldi	r18, 0xC7	; 199
 156:	3d e2       	ldi	r19, 0x2D	; 45
 158:	fc 01       	movw	r30, r24
 15a:	31 83       	std	Z+1, r19	; 0x01
 15c:	20 83       	st	Z, r18
	TIFR = (1<<OCF0);	//reset compare flag
 15e:	88 e5       	ldi	r24, 0x58	; 88
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	22 e0       	ldi	r18, 0x02	; 2
 164:	fc 01       	movw	r30, r24
 166:	20 83       	st	Z, r18
	
	uint16_t overflowCounter = 0;
 168:	1a 82       	std	Y+2, r1	; 0x02
 16a:	19 82       	std	Y+1, r1	; 0x01
	
	while (1)
	{
		while((TIFR & (1<<OCF1A))==0); //while OCF0, overflow flag is 0
 16c:	00 00       	nop
 16e:	88 e5       	ldi	r24, 0x58	; 88
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	fc 01       	movw	r30, r24
 174:	80 81       	ld	r24, Z
 176:	88 2f       	mov	r24, r24
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	80 71       	andi	r24, 0x10	; 16
 17c:	99 27       	eor	r25, r25
 17e:	89 2b       	or	r24, r25
 180:	b1 f3       	breq	.-20     	; 0x16e <delay_sec+0x38>
		TCNT0 = 0x00;		//reset timer to 0
 182:	82 e5       	ldi	r24, 0x52	; 82
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	fc 01       	movw	r30, r24
 188:	10 82       	st	Z, r1
		TIFR = (1<<OCF1A); //reset compare flag
 18a:	88 e5       	ldi	r24, 0x58	; 88
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	20 e1       	ldi	r18, 0x10	; 16
 190:	fc 01       	movw	r30, r24
 192:	20 83       	st	Z, r18
		overflowCounter++;
 194:	89 81       	ldd	r24, Y+1	; 0x01
 196:	9a 81       	ldd	r25, Y+2	; 0x02
 198:	01 96       	adiw	r24, 0x01	; 1
 19a:	9a 83       	std	Y+2, r25	; 0x02
 19c:	89 83       	std	Y+1, r24	; 0x01
		if (overflowCounter >= delayTime)
 19e:	29 81       	ldd	r18, Y+1	; 0x01
 1a0:	3a 81       	ldd	r19, Y+2	; 0x02
 1a2:	8b 81       	ldd	r24, Y+3	; 0x03
 1a4:	9c 81       	ldd	r25, Y+4	; 0x04
 1a6:	28 17       	cp	r18, r24
 1a8:	39 07       	cpc	r19, r25
 1aa:	08 f4       	brcc	.+2      	; 0x1ae <delay_sec+0x78>
		{
			return;
		}
	}	
 1ac:	df cf       	rjmp	.-66     	; 0x16c <delay_sec+0x36>
		TCNT0 = 0x00;		//reset timer to 0
		TIFR = (1<<OCF1A); //reset compare flag
		overflowCounter++;
		if (overflowCounter >= delayTime)
		{
			return;
 1ae:	00 00       	nop
		}
	}	
}
 1b0:	0f 90       	pop	r0
 1b2:	0f 90       	pop	r0
 1b4:	0f 90       	pop	r0
 1b6:	0f 90       	pop	r0
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	08 95       	ret

000001be <displayUnlock>:
#include "Delay.h"

//****************************************************************************************
//unlock LED sequence
void displayUnlock (void)
{
 1be:	cf 93       	push	r28
 1c0:	df 93       	push	r29
 1c2:	00 d0       	rcall	.+0      	; 0x1c4 <displayUnlock+0x6>
 1c4:	00 d0       	rcall	.+0      	; 0x1c6 <displayUnlock+0x8>
 1c6:	cd b7       	in	r28, 0x3d	; 61
 1c8:	de b7       	in	r29, 0x3e	; 62
	for (int i = 0; i <4; i++)
 1ca:	1a 82       	std	Y+2, r1	; 0x02
 1cc:	19 82       	std	Y+1, r1	; 0x01
 1ce:	1b c0       	rjmp	.+54     	; 0x206 <displayUnlock+0x48>
	{
		PORTB = 1<<(1+i*2);
 1d0:	88 e3       	ldi	r24, 0x38	; 56
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	29 81       	ldd	r18, Y+1	; 0x01
 1d6:	3a 81       	ldd	r19, Y+2	; 0x02
 1d8:	22 0f       	add	r18, r18
 1da:	33 1f       	adc	r19, r19
 1dc:	a9 01       	movw	r20, r18
 1de:	4f 5f       	subi	r20, 0xFF	; 255
 1e0:	5f 4f       	sbci	r21, 0xFF	; 255
 1e2:	21 e0       	ldi	r18, 0x01	; 1
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <displayUnlock+0x2e>
 1e8:	22 0f       	add	r18, r18
 1ea:	33 1f       	adc	r19, r19
 1ec:	4a 95       	dec	r20
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <displayUnlock+0x2a>
 1f0:	fc 01       	movw	r30, r24
 1f2:	20 83       	st	Z, r18
		delay_ms(100);
 1f4:	84 e6       	ldi	r24, 0x64	; 100
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>

//****************************************************************************************
//unlock LED sequence
void displayUnlock (void)
{
	for (int i = 0; i <4; i++)
 1fc:	89 81       	ldd	r24, Y+1	; 0x01
 1fe:	9a 81       	ldd	r25, Y+2	; 0x02
 200:	01 96       	adiw	r24, 0x01	; 1
 202:	9a 83       	std	Y+2, r25	; 0x02
 204:	89 83       	std	Y+1, r24	; 0x01
 206:	89 81       	ldd	r24, Y+1	; 0x01
 208:	9a 81       	ldd	r25, Y+2	; 0x02
 20a:	04 97       	sbiw	r24, 0x04	; 4
 20c:	0c f3       	brlt	.-62     	; 0x1d0 <displayUnlock+0x12>
	{
		PORTB = 1<<(1+i*2);
		delay_ms(100);
	}
	for (int i = 0; i <4; i++)
 20e:	1c 82       	std	Y+4, r1	; 0x04
 210:	1b 82       	std	Y+3, r1	; 0x03
 212:	1c c0       	rjmp	.+56     	; 0x24c <displayUnlock+0x8e>
	{
		PORTB = 1<<(7-i*2);
 214:	88 e3       	ldi	r24, 0x38	; 56
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	2b 81       	ldd	r18, Y+3	; 0x03
 21a:	3c 81       	ldd	r19, Y+4	; 0x04
 21c:	22 0f       	add	r18, r18
 21e:	33 1f       	adc	r19, r19
 220:	47 e0       	ldi	r20, 0x07	; 7
 222:	50 e0       	ldi	r21, 0x00	; 0
 224:	42 1b       	sub	r20, r18
 226:	53 0b       	sbc	r21, r19
 228:	21 e0       	ldi	r18, 0x01	; 1
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	02 c0       	rjmp	.+4      	; 0x232 <displayUnlock+0x74>
 22e:	22 0f       	add	r18, r18
 230:	33 1f       	adc	r19, r19
 232:	4a 95       	dec	r20
 234:	e2 f7       	brpl	.-8      	; 0x22e <displayUnlock+0x70>
 236:	fc 01       	movw	r30, r24
 238:	20 83       	st	Z, r18
		delay_ms(100);
 23a:	84 e6       	ldi	r24, 0x64	; 100
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
	for (int i = 0; i <4; i++)
	{
		PORTB = 1<<(1+i*2);
		delay_ms(100);
	}
	for (int i = 0; i <4; i++)
 242:	8b 81       	ldd	r24, Y+3	; 0x03
 244:	9c 81       	ldd	r25, Y+4	; 0x04
 246:	01 96       	adiw	r24, 0x01	; 1
 248:	9c 83       	std	Y+4, r25	; 0x04
 24a:	8b 83       	std	Y+3, r24	; 0x03
 24c:	8b 81       	ldd	r24, Y+3	; 0x03
 24e:	9c 81       	ldd	r25, Y+4	; 0x04
 250:	04 97       	sbiw	r24, 0x04	; 4
 252:	04 f3       	brlt	.-64     	; 0x214 <displayUnlock+0x56>
	{
		PORTB = 1<<(7-i*2);
		delay_ms(100);
	}
	PORTB = 0x00;
 254:	88 e3       	ldi	r24, 0x38	; 56
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	fc 01       	movw	r30, r24
 25a:	10 82       	st	Z, r1
	delay_ms(100);
 25c:	84 e6       	ldi	r24, 0x64	; 100
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
	PORTB = 0xAA;
 264:	88 e3       	ldi	r24, 0x38	; 56
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	2a ea       	ldi	r18, 0xAA	; 170
 26a:	fc 01       	movw	r30, r24
 26c:	20 83       	st	Z, r18
}
 26e:	00 00       	nop
 270:	0f 90       	pop	r0
 272:	0f 90       	pop	r0
 274:	0f 90       	pop	r0
 276:	0f 90       	pop	r0
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	08 95       	ret

0000027e <displayUnlockProg>:
//****************************************************************************************

//****************************************************************************************
//unlock LED sequence 0 program mode
void displayUnlockProg (void)
{
 27e:	cf 93       	push	r28
 280:	df 93       	push	r29
 282:	00 d0       	rcall	.+0      	; 0x284 <displayUnlockProg+0x6>
 284:	00 d0       	rcall	.+0      	; 0x286 <displayUnlockProg+0x8>
 286:	cd b7       	in	r28, 0x3d	; 61
 288:	de b7       	in	r29, 0x3e	; 62
	for (int i = 0; i <4; i++)
 28a:	1a 82       	std	Y+2, r1	; 0x02
 28c:	19 82       	std	Y+1, r1	; 0x01
 28e:	1b c0       	rjmp	.+54     	; 0x2c6 <displayUnlockProg+0x48>
	{
		PORTB = 1<<(1+i*2);
 290:	88 e3       	ldi	r24, 0x38	; 56
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	29 81       	ldd	r18, Y+1	; 0x01
 296:	3a 81       	ldd	r19, Y+2	; 0x02
 298:	22 0f       	add	r18, r18
 29a:	33 1f       	adc	r19, r19
 29c:	a9 01       	movw	r20, r18
 29e:	4f 5f       	subi	r20, 0xFF	; 255
 2a0:	5f 4f       	sbci	r21, 0xFF	; 255
 2a2:	21 e0       	ldi	r18, 0x01	; 1
 2a4:	30 e0       	ldi	r19, 0x00	; 0
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <displayUnlockProg+0x2e>
 2a8:	22 0f       	add	r18, r18
 2aa:	33 1f       	adc	r19, r19
 2ac:	4a 95       	dec	r20
 2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <displayUnlockProg+0x2a>
 2b0:	fc 01       	movw	r30, r24
 2b2:	20 83       	st	Z, r18
		delay_ms(100);
 2b4:	84 e6       	ldi	r24, 0x64	; 100
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>

//****************************************************************************************
//unlock LED sequence 0 program mode
void displayUnlockProg (void)
{
	for (int i = 0; i <4; i++)
 2bc:	89 81       	ldd	r24, Y+1	; 0x01
 2be:	9a 81       	ldd	r25, Y+2	; 0x02
 2c0:	01 96       	adiw	r24, 0x01	; 1
 2c2:	9a 83       	std	Y+2, r25	; 0x02
 2c4:	89 83       	std	Y+1, r24	; 0x01
 2c6:	89 81       	ldd	r24, Y+1	; 0x01
 2c8:	9a 81       	ldd	r25, Y+2	; 0x02
 2ca:	04 97       	sbiw	r24, 0x04	; 4
 2cc:	0c f3       	brlt	.-62     	; 0x290 <displayUnlockProg+0x12>
	{
		PORTB = 1<<(1+i*2);
		delay_ms(100);
	}
	for (int i = 0; i <4; i++)
 2ce:	1c 82       	std	Y+4, r1	; 0x04
 2d0:	1b 82       	std	Y+3, r1	; 0x03
 2d2:	1c c0       	rjmp	.+56     	; 0x30c <displayUnlockProg+0x8e>
	{
		PORTB = 1<<(7-i*2);
 2d4:	88 e3       	ldi	r24, 0x38	; 56
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	2b 81       	ldd	r18, Y+3	; 0x03
 2da:	3c 81       	ldd	r19, Y+4	; 0x04
 2dc:	22 0f       	add	r18, r18
 2de:	33 1f       	adc	r19, r19
 2e0:	47 e0       	ldi	r20, 0x07	; 7
 2e2:	50 e0       	ldi	r21, 0x00	; 0
 2e4:	42 1b       	sub	r20, r18
 2e6:	53 0b       	sbc	r21, r19
 2e8:	21 e0       	ldi	r18, 0x01	; 1
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <displayUnlockProg+0x74>
 2ee:	22 0f       	add	r18, r18
 2f0:	33 1f       	adc	r19, r19
 2f2:	4a 95       	dec	r20
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <displayUnlockProg+0x70>
 2f6:	fc 01       	movw	r30, r24
 2f8:	20 83       	st	Z, r18
		delay_ms(100);
 2fa:	84 e6       	ldi	r24, 0x64	; 100
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
	for (int i = 0; i <4; i++)
	{
		PORTB = 1<<(1+i*2);
		delay_ms(100);
	}
	for (int i = 0; i <4; i++)
 302:	8b 81       	ldd	r24, Y+3	; 0x03
 304:	9c 81       	ldd	r25, Y+4	; 0x04
 306:	01 96       	adiw	r24, 0x01	; 1
 308:	9c 83       	std	Y+4, r25	; 0x04
 30a:	8b 83       	std	Y+3, r24	; 0x03
 30c:	8b 81       	ldd	r24, Y+3	; 0x03
 30e:	9c 81       	ldd	r25, Y+4	; 0x04
 310:	04 97       	sbiw	r24, 0x04	; 4
 312:	04 f3       	brlt	.-64     	; 0x2d4 <displayUnlockProg+0x56>
	{
		PORTB = 1<<(7-i*2);
		delay_ms(100);
	}
	PORTB = 0x00;
 314:	88 e3       	ldi	r24, 0x38	; 56
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	fc 01       	movw	r30, r24
 31a:	10 82       	st	Z, r1
}
 31c:	00 00       	nop
 31e:	0f 90       	pop	r0
 320:	0f 90       	pop	r0
 322:	0f 90       	pop	r0
 324:	0f 90       	pop	r0
 326:	df 91       	pop	r29
 328:	cf 91       	pop	r28
 32a:	08 95       	ret

0000032c <displayLock>:
//****************************************************************************************

//****************************************************************************************
//unlock LED sequence
void displayLock (void)
{
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
 330:	00 d0       	rcall	.+0      	; 0x332 <displayLock+0x6>
 332:	00 d0       	rcall	.+0      	; 0x334 <displayLock+0x8>
 334:	cd b7       	in	r28, 0x3d	; 61
 336:	de b7       	in	r29, 0x3e	; 62
	for (int i = 0; i <4; i++)
 338:	1a 82       	std	Y+2, r1	; 0x02
 33a:	19 82       	std	Y+1, r1	; 0x01
 33c:	19 c0       	rjmp	.+50     	; 0x370 <displayLock+0x44>
	{
		PORTB = 1<<(i*2);
 33e:	88 e3       	ldi	r24, 0x38	; 56
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	29 81       	ldd	r18, Y+1	; 0x01
 344:	3a 81       	ldd	r19, Y+2	; 0x02
 346:	a9 01       	movw	r20, r18
 348:	44 0f       	add	r20, r20
 34a:	55 1f       	adc	r21, r21
 34c:	21 e0       	ldi	r18, 0x01	; 1
 34e:	30 e0       	ldi	r19, 0x00	; 0
 350:	02 c0       	rjmp	.+4      	; 0x356 <displayLock+0x2a>
 352:	22 0f       	add	r18, r18
 354:	33 1f       	adc	r19, r19
 356:	4a 95       	dec	r20
 358:	e2 f7       	brpl	.-8      	; 0x352 <displayLock+0x26>
 35a:	fc 01       	movw	r30, r24
 35c:	20 83       	st	Z, r18
		delay_ms(100);
 35e:	84 e6       	ldi	r24, 0x64	; 100
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>

//****************************************************************************************
//unlock LED sequence
void displayLock (void)
{
	for (int i = 0; i <4; i++)
 366:	89 81       	ldd	r24, Y+1	; 0x01
 368:	9a 81       	ldd	r25, Y+2	; 0x02
 36a:	01 96       	adiw	r24, 0x01	; 1
 36c:	9a 83       	std	Y+2, r25	; 0x02
 36e:	89 83       	std	Y+1, r24	; 0x01
 370:	89 81       	ldd	r24, Y+1	; 0x01
 372:	9a 81       	ldd	r25, Y+2	; 0x02
 374:	04 97       	sbiw	r24, 0x04	; 4
 376:	1c f3       	brlt	.-58     	; 0x33e <displayLock+0x12>
	{
		PORTB = 1<<(i*2);
		delay_ms(100);
	}
	for (int i = 0; i <4; i++)
 378:	1c 82       	std	Y+4, r1	; 0x04
 37a:	1b 82       	std	Y+3, r1	; 0x03
 37c:	1f c0       	rjmp	.+62     	; 0x3bc <displayLock+0x90>
	{
		PORTB = 1<<(8-i*2);
 37e:	88 e3       	ldi	r24, 0x38	; 56
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	44 e0       	ldi	r20, 0x04	; 4
 384:	50 e0       	ldi	r21, 0x00	; 0
 386:	2b 81       	ldd	r18, Y+3	; 0x03
 388:	3c 81       	ldd	r19, Y+4	; 0x04
 38a:	ba 01       	movw	r22, r20
 38c:	62 1b       	sub	r22, r18
 38e:	73 0b       	sbc	r23, r19
 390:	9b 01       	movw	r18, r22
 392:	a9 01       	movw	r20, r18
 394:	44 0f       	add	r20, r20
 396:	55 1f       	adc	r21, r21
 398:	21 e0       	ldi	r18, 0x01	; 1
 39a:	30 e0       	ldi	r19, 0x00	; 0
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <displayLock+0x76>
 39e:	22 0f       	add	r18, r18
 3a0:	33 1f       	adc	r19, r19
 3a2:	4a 95       	dec	r20
 3a4:	e2 f7       	brpl	.-8      	; 0x39e <displayLock+0x72>
 3a6:	fc 01       	movw	r30, r24
 3a8:	20 83       	st	Z, r18
		delay_ms(100);
 3aa:	84 e6       	ldi	r24, 0x64	; 100
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
	for (int i = 0; i <4; i++)
	{
		PORTB = 1<<(i*2);
		delay_ms(100);
	}
	for (int i = 0; i <4; i++)
 3b2:	8b 81       	ldd	r24, Y+3	; 0x03
 3b4:	9c 81       	ldd	r25, Y+4	; 0x04
 3b6:	01 96       	adiw	r24, 0x01	; 1
 3b8:	9c 83       	std	Y+4, r25	; 0x04
 3ba:	8b 83       	std	Y+3, r24	; 0x03
 3bc:	8b 81       	ldd	r24, Y+3	; 0x03
 3be:	9c 81       	ldd	r25, Y+4	; 0x04
 3c0:	04 97       	sbiw	r24, 0x04	; 4
 3c2:	ec f2       	brlt	.-70     	; 0x37e <displayLock+0x52>
	{
		PORTB = 1<<(8-i*2);
		delay_ms(100);
	}
	PORTB = 0x00;
 3c4:	88 e3       	ldi	r24, 0x38	; 56
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	fc 01       	movw	r30, r24
 3ca:	10 82       	st	Z, r1
}
 3cc:	00 00       	nop
 3ce:	0f 90       	pop	r0
 3d0:	0f 90       	pop	r0
 3d2:	0f 90       	pop	r0
 3d4:	0f 90       	pop	r0
 3d6:	df 91       	pop	r29
 3d8:	cf 91       	pop	r28
 3da:	08 95       	ret

000003dc <displayProgramming>:
//****************************************************************************************

//****************************************************************************************
//Programming mode LED sequence
void displayProgramming(void)
{
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
 3e0:	00 d0       	rcall	.+0      	; 0x3e2 <displayProgramming+0x6>
 3e2:	cd b7       	in	r28, 0x3d	; 61
 3e4:	de b7       	in	r29, 0x3e	; 62
	for (int i = 0; i <10; i++)
 3e6:	1a 82       	std	Y+2, r1	; 0x02
 3e8:	19 82       	std	Y+1, r1	; 0x01
 3ea:	16 c0       	rjmp	.+44     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
	{
		PORTB = 0xFF;
 3ec:	88 e3       	ldi	r24, 0x38	; 56
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	2f ef       	ldi	r18, 0xFF	; 255
 3f2:	fc 01       	movw	r30, r24
 3f4:	20 83       	st	Z, r18
		delay_ms(100);
 3f6:	84 e6       	ldi	r24, 0x64	; 100
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
		PORTB = 0x00;
 3fe:	88 e3       	ldi	r24, 0x38	; 56
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	fc 01       	movw	r30, r24
 404:	10 82       	st	Z, r1
		delay_ms(100);
 406:	84 e6       	ldi	r24, 0x64	; 100
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>

//****************************************************************************************
//Programming mode LED sequence
void displayProgramming(void)
{
	for (int i = 0; i <10; i++)
 40e:	89 81       	ldd	r24, Y+1	; 0x01
 410:	9a 81       	ldd	r25, Y+2	; 0x02
 412:	01 96       	adiw	r24, 0x01	; 1
 414:	9a 83       	std	Y+2, r25	; 0x02
 416:	89 83       	std	Y+1, r24	; 0x01
 418:	89 81       	ldd	r24, Y+1	; 0x01
 41a:	9a 81       	ldd	r25, Y+2	; 0x02
 41c:	0a 97       	sbiw	r24, 0x0a	; 10
 41e:	34 f3       	brlt	.-52     	; 0x3ec <displayProgramming+0x10>
		PORTB = 0xFF;
		delay_ms(100);
		PORTB = 0x00;
		delay_ms(100);
	}
}
 420:	00 00       	nop
 422:	0f 90       	pop	r0
 424:	0f 90       	pop	r0
 426:	df 91       	pop	r29
 428:	cf 91       	pop	r28
 42a:	08 95       	ret

0000042c <displayIncorrect>:
//****************************************************************************************

//****************************************************************************************
//Programming mode LED sequence
void displayIncorrect(void)
{
 42c:	cf 93       	push	r28
 42e:	df 93       	push	r29
 430:	00 d0       	rcall	.+0      	; 0x432 <displayIncorrect+0x6>
 432:	cd b7       	in	r28, 0x3d	; 61
 434:	de b7       	in	r29, 0x3e	; 62
	for (int i = 0; i <4; i++)
 436:	1a 82       	std	Y+2, r1	; 0x02
 438:	19 82       	std	Y+1, r1	; 0x01
 43a:	16 c0       	rjmp	.+44     	; 0x468 <displayIncorrect+0x3c>
	{
		PORTB = 0x55;
 43c:	88 e3       	ldi	r24, 0x38	; 56
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	25 e5       	ldi	r18, 0x55	; 85
 442:	fc 01       	movw	r30, r24
 444:	20 83       	st	Z, r18
		delay_ms(80);
 446:	80 e5       	ldi	r24, 0x50	; 80
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
		PORTB = 0x00;
 44e:	88 e3       	ldi	r24, 0x38	; 56
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	fc 01       	movw	r30, r24
 454:	10 82       	st	Z, r1
		delay_ms(80);
 456:	80 e5       	ldi	r24, 0x50	; 80
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>

//****************************************************************************************
//Programming mode LED sequence
void displayIncorrect(void)
{
	for (int i = 0; i <4; i++)
 45e:	89 81       	ldd	r24, Y+1	; 0x01
 460:	9a 81       	ldd	r25, Y+2	; 0x02
 462:	01 96       	adiw	r24, 0x01	; 1
 464:	9a 83       	std	Y+2, r25	; 0x02
 466:	89 83       	std	Y+1, r24	; 0x01
 468:	89 81       	ldd	r24, Y+1	; 0x01
 46a:	9a 81       	ldd	r25, Y+2	; 0x02
 46c:	04 97       	sbiw	r24, 0x04	; 4
 46e:	34 f3       	brlt	.-52     	; 0x43c <displayIncorrect+0x10>
		PORTB = 0x55;
		delay_ms(80);
		PORTB = 0x00;
		delay_ms(80);
	}
}
 470:	00 00       	nop
 472:	0f 90       	pop	r0
 474:	0f 90       	pop	r0
 476:	df 91       	pop	r29
 478:	cf 91       	pop	r28
 47a:	08 95       	ret

0000047c <displayKeys>:
//****************************************************************************************

//****************************************************************************************
// Convert binary value to more realistic LED representation
uint8_t displayKeys(uint8_t keyValue)
{
 47c:	cf 93       	push	r28
 47e:	df 93       	push	r29
 480:	1f 92       	push	r1
 482:	cd b7       	in	r28, 0x3d	; 61
 484:	de b7       	in	r29, 0x3e	; 62
 486:	89 83       	std	Y+1, r24	; 0x01
	switch(keyValue)
 488:	89 81       	ldd	r24, Y+1	; 0x01
 48a:	88 2f       	mov	r24, r24
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	09 2e       	mov	r0, r25
 490:	00 0c       	add	r0, r0
 492:	aa 0b       	sbc	r26, r26
 494:	bb 0b       	sbc	r27, r27
 496:	40 e0       	ldi	r20, 0x00	; 0
 498:	50 e0       	ldi	r21, 0x00	; 0
 49a:	20 e1       	ldi	r18, 0x10	; 16
 49c:	30 e0       	ldi	r19, 0x00	; 0
 49e:	84 1b       	sub	r24, r20
 4a0:	95 0b       	sbc	r25, r21
 4a2:	28 17       	cp	r18, r24
 4a4:	39 07       	cpc	r19, r25
 4a6:	18 f1       	brcs	.+70     	; 0x4ee <displayKeys+0x72>
 4a8:	86 5d       	subi	r24, 0xD6	; 214
 4aa:	9f 4f       	sbci	r25, 0xFF	; 255
 4ac:	fc 01       	movw	r30, r24
 4ae:	0c 94 16 07 	jmp	0xe2c	; 0xe2c <__tablejump2__>
	{
		case 0x00:
		return 0x00;
 4b2:	80 e0       	ldi	r24, 0x00	; 0
 4b4:	1d c0       	rjmp	.+58     	; 0x4f0 <displayKeys+0x74>
		break;
		
		case 0x01:
		return 0x01;
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	1b c0       	rjmp	.+54     	; 0x4f0 <displayKeys+0x74>
		break;
		
		case 0x02:
		return 0x02;
 4ba:	82 e0       	ldi	r24, 0x02	; 2
 4bc:	19 c0       	rjmp	.+50     	; 0x4f0 <displayKeys+0x74>
		break;
		
		case 0x03:
		return 0x04;
 4be:	84 e0       	ldi	r24, 0x04	; 4
 4c0:	17 c0       	rjmp	.+46     	; 0x4f0 <displayKeys+0x74>
		break;
		
		case 0x04:
		return 0x08;
 4c2:	88 e0       	ldi	r24, 0x08	; 8
 4c4:	15 c0       	rjmp	.+42     	; 0x4f0 <displayKeys+0x74>
		break;
		
		case 0x05:
		return 0x10;
 4c6:	80 e1       	ldi	r24, 0x10	; 16
 4c8:	13 c0       	rjmp	.+38     	; 0x4f0 <displayKeys+0x74>
		break;
		
		case 0x06:
		return 0x20;
 4ca:	80 e2       	ldi	r24, 0x20	; 32
 4cc:	11 c0       	rjmp	.+34     	; 0x4f0 <displayKeys+0x74>
		break;
		
		case 0x07:
		return 0x40;
 4ce:	80 e4       	ldi	r24, 0x40	; 64
 4d0:	0f c0       	rjmp	.+30     	; 0x4f0 <displayKeys+0x74>
		break;
		
		case 0x08:
		return 0x80;
 4d2:	80 e8       	ldi	r24, 0x80	; 128
 4d4:	0d c0       	rjmp	.+26     	; 0x4f0 <displayKeys+0x74>
		break;
		
		case 0x09:	
		return 0x81;
 4d6:	81 e8       	ldi	r24, 0x81	; 129
 4d8:	0b c0       	rjmp	.+22     	; 0x4f0 <displayKeys+0x74>
		break;
		
		case 0x10:
		return 0x10;
 4da:	80 e1       	ldi	r24, 0x10	; 16
 4dc:	09 c0       	rjmp	.+18     	; 0x4f0 <displayKeys+0x74>
		break;
		
		case 0x0A:
		return 0x03;
 4de:	83 e0       	ldi	r24, 0x03	; 3
 4e0:	07 c0       	rjmp	.+14     	; 0x4f0 <displayKeys+0x74>
		break;
		
		case 0x0B:
		return 0x0C;
 4e2:	8c e0       	ldi	r24, 0x0C	; 12
 4e4:	05 c0       	rjmp	.+10     	; 0x4f0 <displayKeys+0x74>
		break;
		
		case 0x0C:
		return 0x30;
 4e6:	80 e3       	ldi	r24, 0x30	; 48
 4e8:	03 c0       	rjmp	.+6      	; 0x4f0 <displayKeys+0x74>
		break;
		
		case 0x0D:
		return 0xC0;
 4ea:	80 ec       	ldi	r24, 0xC0	; 192
 4ec:	01 c0       	rjmp	.+2      	; 0x4f0 <displayKeys+0x74>
		break;
		
		default:
		return 0;
 4ee:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 4f0:	0f 90       	pop	r0
 4f2:	df 91       	pop	r29
 4f4:	cf 91       	pop	r28
 4f6:	08 95       	ret

000004f8 <displayLockout>:
//****************************************************************************************

//****************************************************************************************
void displayLockout(void)
{
 4f8:	cf 93       	push	r28
 4fa:	df 93       	push	r29
 4fc:	cd b7       	in	r28, 0x3d	; 61
 4fe:	de b7       	in	r29, 0x3e	; 62
	PORTB = 0x55;
 500:	88 e3       	ldi	r24, 0x38	; 56
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	25 e5       	ldi	r18, 0x55	; 85
 506:	fc 01       	movw	r30, r24
 508:	20 83       	st	Z, r18
	delay_sec(120);
 50a:	88 e7       	ldi	r24, 0x78	; 120
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	0e 94 9b 00 	call	0x136	; 0x136 <delay_sec>
	PORTB =0;
 512:	88 e3       	ldi	r24, 0x38	; 56
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	fc 01       	movw	r30, r24
 518:	10 82       	st	Z, r1
}
 51a:	00 00       	nop
 51c:	df 91       	pop	r29
 51e:	cf 91       	pop	r28
 520:	08 95       	ret

00000522 <displayUser>:
//****************************************************************************************

//****************************************************************************************
void displayUser(uint8_t user)
{
 522:	cf 93       	push	r28
 524:	df 93       	push	r29
 526:	1f 92       	push	r1
 528:	cd b7       	in	r28, 0x3d	; 61
 52a:	de b7       	in	r29, 0x3e	; 62
 52c:	89 83       	std	Y+1, r24	; 0x01
	switch(user)
 52e:	89 81       	ldd	r24, Y+1	; 0x01
 530:	88 2f       	mov	r24, r24
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	8b 30       	cpi	r24, 0x0B	; 11
 536:	91 05       	cpc	r25, r1
 538:	91 f0       	breq	.+36     	; 0x55e <displayUser+0x3c>
 53a:	8c 30       	cpi	r24, 0x0C	; 12
 53c:	91 05       	cpc	r25, r1
 53e:	1c f4       	brge	.+6      	; 0x546 <displayUser+0x24>
 540:	0a 97       	sbiw	r24, 0x0a	; 10
 542:	39 f0       	breq	.+14     	; 0x552 <displayUser+0x30>
		case 0x0D:
		PORTB = 0xC0;
		break;
			
		default:
		return 0;
 544:	1e c0       	rjmp	.+60     	; 0x582 <displayUser+0x60>
//****************************************************************************************

//****************************************************************************************
void displayUser(uint8_t user)
{
	switch(user)
 546:	8c 30       	cpi	r24, 0x0C	; 12
 548:	91 05       	cpc	r25, r1
 54a:	79 f0       	breq	.+30     	; 0x56a <displayUser+0x48>
 54c:	0d 97       	sbiw	r24, 0x0d	; 13
 54e:	99 f0       	breq	.+38     	; 0x576 <displayUser+0x54>
		case 0x0D:
		PORTB = 0xC0;
		break;
			
		default:
		return 0;
 550:	18 c0       	rjmp	.+48     	; 0x582 <displayUser+0x60>
void displayUser(uint8_t user)
{
	switch(user)
	{
		case 0x0A:
		PORTB = 0x03;
 552:	88 e3       	ldi	r24, 0x38	; 56
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	23 e0       	ldi	r18, 0x03	; 3
 558:	fc 01       	movw	r30, r24
 55a:	20 83       	st	Z, r18
		break;
 55c:	12 c0       	rjmp	.+36     	; 0x582 <displayUser+0x60>
		
		case 0x0B:
		PORTB = 0x0C;
 55e:	88 e3       	ldi	r24, 0x38	; 56
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	2c e0       	ldi	r18, 0x0C	; 12
 564:	fc 01       	movw	r30, r24
 566:	20 83       	st	Z, r18
		break;
 568:	0c c0       	rjmp	.+24     	; 0x582 <displayUser+0x60>
			
		case 0x0C:
		PORTB = 0x30;
 56a:	88 e3       	ldi	r24, 0x38	; 56
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	20 e3       	ldi	r18, 0x30	; 48
 570:	fc 01       	movw	r30, r24
 572:	20 83       	st	Z, r18
		break;
 574:	06 c0       	rjmp	.+12     	; 0x582 <displayUser+0x60>
				
		case 0x0D:
		PORTB = 0xC0;
 576:	88 e3       	ldi	r24, 0x38	; 56
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	20 ec       	ldi	r18, 0xC0	; 192
 57c:	fc 01       	movw	r30, r24
 57e:	20 83       	st	Z, r18
		break;
 580:	00 00       	nop
			
		default:
		return 0;
	}
 582:	0f 90       	pop	r0
 584:	df 91       	pop	r29
 586:	cf 91       	pop	r28
 588:	08 95       	ret

0000058a <write_EEPROM>:
//Takes in the address of the location to write to, and the data to write into that address
//returns nothing(error code flag set?)

//do we need to use ware leveling(using multiple addresses so as not to damage EEPROM)
void write_EEPROM(uint8_t WriteData, uint16_t WriteAddress)
{
 58a:	cf 93       	push	r28
 58c:	df 93       	push	r29
 58e:	00 d0       	rcall	.+0      	; 0x590 <write_EEPROM+0x6>
 590:	1f 92       	push	r1
 592:	cd b7       	in	r28, 0x3d	; 61
 594:	de b7       	in	r29, 0x3e	; 62
 596:	89 83       	std	Y+1, r24	; 0x01
 598:	7b 83       	std	Y+3, r23	; 0x03
 59a:	6a 83       	std	Y+2, r22	; 0x02
//should disable global interrupts here if we use them
	
	//check if address is valid
	if(WriteAddress > 0x400)	//only 2^10 = 1024 addresses
 59c:	8a 81       	ldd	r24, Y+2	; 0x02
 59e:	9b 81       	ldd	r25, Y+3	; 0x03
 5a0:	81 30       	cpi	r24, 0x01	; 1
 5a2:	94 40       	sbci	r25, 0x04	; 4
 5a4:	20 f0       	brcs	.+8      	; 0x5ae <write_EEPROM+0x24>
		{
			errorFlag =3;
 5a6:	83 e0       	ldi	r24, 0x03	; 3
 5a8:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
			return;			//Set some debug flag?
 5ac:	1a c0       	rjmp	.+52     	; 0x5e2 <write_EEPROM+0x58>
		}
	
	
	//Wait till previous write operation is completed(i.e. wait till EEWE becomes zero).
	while(EECR & (1 << EEWE));	//b 0000 0010
 5ae:	00 00       	nop
 5b0:	8c e3       	ldi	r24, 0x3C	; 60
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	fc 01       	movw	r30, r24
 5b6:	80 81       	ld	r24, Z
 5b8:	88 2f       	mov	r24, r24
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	82 70       	andi	r24, 0x02	; 2
 5be:	99 27       	eor	r25, r25
 5c0:	89 2b       	or	r24, r25
 5c2:	b1 f7       	brne	.-20     	; 0x5b0 <write_EEPROM+0x26>
	//Wait until SPMEN in SPMCR becomes zero		Dont think this step is necessary
	// only relevant if the software contains a boot loader allowing the CPU to program the Flash. If the Flash is never being updated by the CPU, can be omitted

	//Load the EEPROM address into EEAR at which the data has to be stored.
	//high and low registers, high register will always be 0 for us.
	EEAR = WriteAddress;
 5c4:	8e e3       	ldi	r24, 0x3E	; 62
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	2a 81       	ldd	r18, Y+2	; 0x02
 5ca:	3b 81       	ldd	r19, Y+3	; 0x03
 5cc:	fc 01       	movw	r30, r24
 5ce:	31 83       	std	Z+1, r19	; 0x01
 5d0:	20 83       	st	Z, r18

	//Load the data into EEDR which has to be stored in EEPROM.
	EEDR = WriteData;
 5d2:	8d e3       	ldi	r24, 0x3D	; 61
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	29 81       	ldd	r18, Y+1	; 0x01
 5d8:	fc 01       	movw	r30, r24
 5da:	20 83       	st	Z, r18

	//Set the EEMWE (EEPROM Master Write Enable).
	asm("SBI 0x1C, 0x02");
 5dc:	e2 9a       	sbi	0x1c, 2	; 28
	//set EEWE in EECR to 0			Dont think this step is necessary. Why is it listed?

	//Within four clock cycles after 4th step, set EEWE(Eeprom Write Enable) to 1 to trigger the EEPROM Write Operation
	asm("SBI 0x1C, 0x01");
 5de:	e1 9a       	sbi	0x1c, 1	; 28
return;
 5e0:	00 00       	nop
}
 5e2:	0f 90       	pop	r0
 5e4:	0f 90       	pop	r0
 5e6:	0f 90       	pop	r0
 5e8:	df 91       	pop	r29
 5ea:	cf 91       	pop	r28
 5ec:	08 95       	ret

000005ee <read_EEPROM>:
//****************************************************************************************

//****************************************************************************************
//Read EEPROM
uint8_t read_EEPROM(uint16_t readAddress)
{
 5ee:	cf 93       	push	r28
 5f0:	df 93       	push	r29
 5f2:	00 d0       	rcall	.+0      	; 0x5f4 <read_EEPROM+0x6>
 5f4:	cd b7       	in	r28, 0x3d	; 61
 5f6:	de b7       	in	r29, 0x3e	; 62
 5f8:	9a 83       	std	Y+2, r25	; 0x02
 5fa:	89 83       	std	Y+1, r24	; 0x01
	//check if address is valid
	if(readAddress > 0x400)	//only 2^10 = 1024 addresses
 5fc:	89 81       	ldd	r24, Y+1	; 0x01
 5fe:	9a 81       	ldd	r25, Y+2	; 0x02
 600:	81 30       	cpi	r24, 0x01	; 1
 602:	94 40       	sbci	r25, 0x04	; 4
 604:	10 f0       	brcs	.+4      	; 0x60a <read_EEPROM+0x1c>
	{
		return 0;			//Set some debug flag?
 606:	80 e0       	ldi	r24, 0x00	; 0
 608:	1f c0       	rjmp	.+62     	; 0x648 <read_EEPROM+0x5a>
	}
	
	//WAit for completion of previous Write operation.
	while(EECR & (1 << EEWE));
 60a:	00 00       	nop
 60c:	8c e3       	ldi	r24, 0x3C	; 60
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	fc 01       	movw	r30, r24
 612:	80 81       	ld	r24, Z
 614:	88 2f       	mov	r24, r24
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	82 70       	andi	r24, 0x02	; 2
 61a:	99 27       	eor	r25, r25
 61c:	89 2b       	or	r24, r25
 61e:	b1 f7       	brne	.-20     	; 0x60c <read_EEPROM+0x1e>

	//Load the EEPROM address into EEAR from where the data needs to be read.
	EEAR = readAddress;
 620:	8e e3       	ldi	r24, 0x3E	; 62
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	29 81       	ldd	r18, Y+1	; 0x01
 626:	3a 81       	ldd	r19, Y+2	; 0x02
 628:	fc 01       	movw	r30, r24
 62a:	31 83       	std	Z+1, r19	; 0x01
 62c:	20 83       	st	Z, r18

	//Trigger the EEPROM read operation by setting EERE (EEPROM Read Enable).
	EECR |= (1 <<EERE);
 62e:	8c e3       	ldi	r24, 0x3C	; 60
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	2c e3       	ldi	r18, 0x3C	; 60
 634:	30 e0       	ldi	r19, 0x00	; 0
 636:	f9 01       	movw	r30, r18
 638:	20 81       	ld	r18, Z
 63a:	21 60       	ori	r18, 0x01	; 1
 63c:	fc 01       	movw	r30, r24
 63e:	20 83       	st	Z, r18

	//Wait for some time (about 1ms) and collect the read data from EEDR.
	return EEDR;
 640:	8d e3       	ldi	r24, 0x3D	; 61
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	fc 01       	movw	r30, r24
 646:	80 81       	ld	r24, Z
}
 648:	0f 90       	pop	r0
 64a:	0f 90       	pop	r0
 64c:	df 91       	pop	r29
 64e:	cf 91       	pop	r28
 650:	08 95       	ret

00000652 <storePasscode>:
//****************************************************************************************
//Store Passcode stores 4 bytes of passcode into memory location defined by the user.
//32 bit passcode must be divided into 4 bytes
//each byte is stored in location 0x00XY, where X is the hex value of the user, and Y is which byte is being stored
void storePasscode (unsigned long int Passcode, uint8_t user)
{
 652:	cf 93       	push	r28
 654:	df 93       	push	r29
 656:	cd b7       	in	r28, 0x3d	; 61
 658:	de b7       	in	r29, 0x3e	; 62
 65a:	63 97       	sbiw	r28, 0x13	; 19
 65c:	0f b6       	in	r0, 0x3f	; 63
 65e:	f8 94       	cli
 660:	de bf       	out	0x3e, r29	; 62
 662:	0f be       	out	0x3f, r0	; 63
 664:	cd bf       	out	0x3d, r28	; 61
 666:	6f 87       	std	Y+15, r22	; 0x0f
 668:	78 8b       	std	Y+16, r23	; 0x10
 66a:	89 8b       	std	Y+17, r24	; 0x11
 66c:	9a 8b       	std	Y+18, r25	; 0x12
 66e:	4b 8b       	std	Y+19, r20	; 0x13
	//check if user input is valid
	if (!isUser(user))
 670:	8b 89       	ldd	r24, Y+19	; 0x13
 672:	0e 94 79 05 	call	0xaf2	; 0xaf2 <isUser>
 676:	88 23       	and	r24, r24
 678:	21 f4       	brne	.+8      	; 0x682 <storePasscode+0x30>
	{
		//set some debug flag
		errorFlag = 2;
 67a:	82 e0       	ldi	r24, 0x02	; 2
 67c:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
		return;
 680:	67 c0       	rjmp	.+206    	; 0x750 <storePasscode+0xfe>
	
	//store each byte of passcode
	uint8_t passcodeByte[4];
	uint16_t passcodeAddress[4];
	
	for(int i = 0; i<4; i++)
 682:	1a 82       	std	Y+2, r1	; 0x02
 684:	19 82       	std	Y+1, r1	; 0x01
 686:	5e c0       	rjmp	.+188    	; 0x744 <storePasscode+0xf2>
	{
		//store each byte of passcode into an array
		passcodeByte[i] = Passcode>>(8*i);
 688:	89 81       	ldd	r24, Y+1	; 0x01
 68a:	9a 81       	ldd	r25, Y+2	; 0x02
 68c:	9c 01       	movw	r18, r24
 68e:	22 0f       	add	r18, r18
 690:	33 1f       	adc	r19, r19
 692:	22 0f       	add	r18, r18
 694:	33 1f       	adc	r19, r19
 696:	22 0f       	add	r18, r18
 698:	33 1f       	adc	r19, r19
 69a:	8f 85       	ldd	r24, Y+15	; 0x0f
 69c:	98 89       	ldd	r25, Y+16	; 0x10
 69e:	a9 89       	ldd	r26, Y+17	; 0x11
 6a0:	ba 89       	ldd	r27, Y+18	; 0x12
 6a2:	04 c0       	rjmp	.+8      	; 0x6ac <storePasscode+0x5a>
 6a4:	b6 95       	lsr	r27
 6a6:	a7 95       	ror	r26
 6a8:	97 95       	ror	r25
 6aa:	87 95       	ror	r24
 6ac:	2a 95       	dec	r18
 6ae:	d2 f7       	brpl	.-12     	; 0x6a4 <storePasscode+0x52>
 6b0:	48 2f       	mov	r20, r24
 6b2:	9e 01       	movw	r18, r28
 6b4:	2d 5f       	subi	r18, 0xFD	; 253
 6b6:	3f 4f       	sbci	r19, 0xFF	; 255
 6b8:	89 81       	ldd	r24, Y+1	; 0x01
 6ba:	9a 81       	ldd	r25, Y+2	; 0x02
 6bc:	82 0f       	add	r24, r18
 6be:	93 1f       	adc	r25, r19
 6c0:	fc 01       	movw	r30, r24
 6c2:	40 83       	st	Z, r20
		//define the location to store the passcode in EEPROM
		passcodeAddress[i]= (user<<4)|(4-i);
 6c4:	8b 89       	ldd	r24, Y+19	; 0x13
 6c6:	88 2f       	mov	r24, r24
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	9c 01       	movw	r18, r24
 6cc:	22 95       	swap	r18
 6ce:	32 95       	swap	r19
 6d0:	30 7f       	andi	r19, 0xF0	; 240
 6d2:	32 27       	eor	r19, r18
 6d4:	20 7f       	andi	r18, 0xF0	; 240
 6d6:	32 27       	eor	r19, r18
 6d8:	44 e0       	ldi	r20, 0x04	; 4
 6da:	50 e0       	ldi	r21, 0x00	; 0
 6dc:	89 81       	ldd	r24, Y+1	; 0x01
 6de:	9a 81       	ldd	r25, Y+2	; 0x02
 6e0:	ba 01       	movw	r22, r20
 6e2:	68 1b       	sub	r22, r24
 6e4:	79 0b       	sbc	r23, r25
 6e6:	cb 01       	movw	r24, r22
 6e8:	82 2b       	or	r24, r18
 6ea:	93 2b       	or	r25, r19
 6ec:	ac 01       	movw	r20, r24
 6ee:	89 81       	ldd	r24, Y+1	; 0x01
 6f0:	9a 81       	ldd	r25, Y+2	; 0x02
 6f2:	88 0f       	add	r24, r24
 6f4:	99 1f       	adc	r25, r25
 6f6:	9e 01       	movw	r18, r28
 6f8:	2f 5f       	subi	r18, 0xFF	; 255
 6fa:	3f 4f       	sbci	r19, 0xFF	; 255
 6fc:	82 0f       	add	r24, r18
 6fe:	93 1f       	adc	r25, r19
 700:	06 96       	adiw	r24, 0x06	; 6
 702:	fc 01       	movw	r30, r24
 704:	51 83       	std	Z+1, r21	; 0x01
 706:	40 83       	st	Z, r20
		//write the byte to the location in EEPROM
		write_EEPROM(passcodeByte[i],passcodeAddress[i]);
 708:	89 81       	ldd	r24, Y+1	; 0x01
 70a:	9a 81       	ldd	r25, Y+2	; 0x02
 70c:	88 0f       	add	r24, r24
 70e:	99 1f       	adc	r25, r25
 710:	9e 01       	movw	r18, r28
 712:	2f 5f       	subi	r18, 0xFF	; 255
 714:	3f 4f       	sbci	r19, 0xFF	; 255
 716:	82 0f       	add	r24, r18
 718:	93 1f       	adc	r25, r19
 71a:	06 96       	adiw	r24, 0x06	; 6
 71c:	fc 01       	movw	r30, r24
 71e:	40 81       	ld	r20, Z
 720:	51 81       	ldd	r21, Z+1	; 0x01
 722:	9e 01       	movw	r18, r28
 724:	2d 5f       	subi	r18, 0xFD	; 253
 726:	3f 4f       	sbci	r19, 0xFF	; 255
 728:	89 81       	ldd	r24, Y+1	; 0x01
 72a:	9a 81       	ldd	r25, Y+2	; 0x02
 72c:	82 0f       	add	r24, r18
 72e:	93 1f       	adc	r25, r19
 730:	fc 01       	movw	r30, r24
 732:	80 81       	ld	r24, Z
 734:	ba 01       	movw	r22, r20
 736:	0e 94 c5 02 	call	0x58a	; 0x58a <write_EEPROM>
	
	//store each byte of passcode
	uint8_t passcodeByte[4];
	uint16_t passcodeAddress[4];
	
	for(int i = 0; i<4; i++)
 73a:	89 81       	ldd	r24, Y+1	; 0x01
 73c:	9a 81       	ldd	r25, Y+2	; 0x02
 73e:	01 96       	adiw	r24, 0x01	; 1
 740:	9a 83       	std	Y+2, r25	; 0x02
 742:	89 83       	std	Y+1, r24	; 0x01
 744:	89 81       	ldd	r24, Y+1	; 0x01
 746:	9a 81       	ldd	r25, Y+2	; 0x02
 748:	04 97       	sbiw	r24, 0x04	; 4
 74a:	0c f4       	brge	.+2      	; 0x74e <storePasscode+0xfc>
 74c:	9d cf       	rjmp	.-198    	; 0x688 <storePasscode+0x36>
		//define the location to store the passcode in EEPROM
		passcodeAddress[i]= (user<<4)|(4-i);
		//write the byte to the location in EEPROM
		write_EEPROM(passcodeByte[i],passcodeAddress[i]);
	}
	return;
 74e:	00 00       	nop
}
 750:	63 96       	adiw	r28, 0x13	; 19
 752:	0f b6       	in	r0, 0x3f	; 63
 754:	f8 94       	cli
 756:	de bf       	out	0x3e, r29	; 62
 758:	0f be       	out	0x3f, r0	; 63
 75a:	cd bf       	out	0x3d, r28	; 61
 75c:	df 91       	pop	r29
 75e:	cf 91       	pop	r28
 760:	08 95       	ret

00000762 <RecallPasscode>:
//****************************************************************************************

//****************************************************************************************
//Reads the passcode from EEPROM and stores it into a long int
unsigned long int RecallPasscode(uint8_t user)
{
 762:	cf 93       	push	r28
 764:	df 93       	push	r29
 766:	cd b7       	in	r28, 0x3d	; 61
 768:	de b7       	in	r29, 0x3e	; 62
 76a:	2b 97       	sbiw	r28, 0x0b	; 11
 76c:	0f b6       	in	r0, 0x3f	; 63
 76e:	f8 94       	cli
 770:	de bf       	out	0x3e, r29	; 62
 772:	0f be       	out	0x3f, r0	; 63
 774:	cd bf       	out	0x3d, r28	; 61
 776:	8b 87       	std	Y+11, r24	; 0x0b
unsigned long int tempValue = 0;
 778:	1f 82       	std	Y+7, r1	; 0x07
 77a:	18 86       	std	Y+8, r1	; 0x08
 77c:	19 86       	std	Y+9, r1	; 0x09
 77e:	1a 86       	std	Y+10, r1	; 0x0a
unsigned long int passcode = 0;	
 780:	19 82       	std	Y+1, r1	; 0x01
 782:	1a 82       	std	Y+2, r1	; 0x02
 784:	1b 82       	std	Y+3, r1	; 0x03
 786:	1c 82       	std	Y+4, r1	; 0x04
	for (int i = 0; i<4; i++)
 788:	1e 82       	std	Y+6, r1	; 0x06
 78a:	1d 82       	std	Y+5, r1	; 0x05
 78c:	43 c0       	rjmp	.+134    	; 0x814 <RecallPasscode+0xb2>
	{
		//read the EEPROM value at location of user from LSB to MSB
		tempValue = read_EEPROM((user<<4)|(4-i));
 78e:	8b 85       	ldd	r24, Y+11	; 0x0b
 790:	88 2f       	mov	r24, r24
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	9c 01       	movw	r18, r24
 796:	22 95       	swap	r18
 798:	32 95       	swap	r19
 79a:	30 7f       	andi	r19, 0xF0	; 240
 79c:	32 27       	eor	r19, r18
 79e:	20 7f       	andi	r18, 0xF0	; 240
 7a0:	32 27       	eor	r19, r18
 7a2:	44 e0       	ldi	r20, 0x04	; 4
 7a4:	50 e0       	ldi	r21, 0x00	; 0
 7a6:	8d 81       	ldd	r24, Y+5	; 0x05
 7a8:	9e 81       	ldd	r25, Y+6	; 0x06
 7aa:	ba 01       	movw	r22, r20
 7ac:	68 1b       	sub	r22, r24
 7ae:	79 0b       	sbc	r23, r25
 7b0:	cb 01       	movw	r24, r22
 7b2:	82 2b       	or	r24, r18
 7b4:	93 2b       	or	r25, r19
 7b6:	0e 94 f7 02 	call	0x5ee	; 0x5ee <read_EEPROM>
 7ba:	88 2f       	mov	r24, r24
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	a0 e0       	ldi	r26, 0x00	; 0
 7c0:	b0 e0       	ldi	r27, 0x00	; 0
 7c2:	8f 83       	std	Y+7, r24	; 0x07
 7c4:	98 87       	std	Y+8, r25	; 0x08
 7c6:	a9 87       	std	Y+9, r26	; 0x09
 7c8:	ba 87       	std	Y+10, r27	; 0x0a
		passcode |= tempValue<<(8*i);			//add each byte together to form a 4 byte passcode
 7ca:	8d 81       	ldd	r24, Y+5	; 0x05
 7cc:	9e 81       	ldd	r25, Y+6	; 0x06
 7ce:	9c 01       	movw	r18, r24
 7d0:	22 0f       	add	r18, r18
 7d2:	33 1f       	adc	r19, r19
 7d4:	22 0f       	add	r18, r18
 7d6:	33 1f       	adc	r19, r19
 7d8:	22 0f       	add	r18, r18
 7da:	33 1f       	adc	r19, r19
 7dc:	8f 81       	ldd	r24, Y+7	; 0x07
 7de:	98 85       	ldd	r25, Y+8	; 0x08
 7e0:	a9 85       	ldd	r26, Y+9	; 0x09
 7e2:	ba 85       	ldd	r27, Y+10	; 0x0a
 7e4:	04 c0       	rjmp	.+8      	; 0x7ee <RecallPasscode+0x8c>
 7e6:	88 0f       	add	r24, r24
 7e8:	99 1f       	adc	r25, r25
 7ea:	aa 1f       	adc	r26, r26
 7ec:	bb 1f       	adc	r27, r27
 7ee:	2a 95       	dec	r18
 7f0:	d2 f7       	brpl	.-12     	; 0x7e6 <RecallPasscode+0x84>
 7f2:	29 81       	ldd	r18, Y+1	; 0x01
 7f4:	3a 81       	ldd	r19, Y+2	; 0x02
 7f6:	4b 81       	ldd	r20, Y+3	; 0x03
 7f8:	5c 81       	ldd	r21, Y+4	; 0x04
 7fa:	82 2b       	or	r24, r18
 7fc:	93 2b       	or	r25, r19
 7fe:	a4 2b       	or	r26, r20
 800:	b5 2b       	or	r27, r21
 802:	89 83       	std	Y+1, r24	; 0x01
 804:	9a 83       	std	Y+2, r25	; 0x02
 806:	ab 83       	std	Y+3, r26	; 0x03
 808:	bc 83       	std	Y+4, r27	; 0x04
//Reads the passcode from EEPROM and stores it into a long int
unsigned long int RecallPasscode(uint8_t user)
{
unsigned long int tempValue = 0;
unsigned long int passcode = 0;	
	for (int i = 0; i<4; i++)
 80a:	8d 81       	ldd	r24, Y+5	; 0x05
 80c:	9e 81       	ldd	r25, Y+6	; 0x06
 80e:	01 96       	adiw	r24, 0x01	; 1
 810:	9e 83       	std	Y+6, r25	; 0x06
 812:	8d 83       	std	Y+5, r24	; 0x05
 814:	8d 81       	ldd	r24, Y+5	; 0x05
 816:	9e 81       	ldd	r25, Y+6	; 0x06
 818:	04 97       	sbiw	r24, 0x04	; 4
 81a:	0c f4       	brge	.+2      	; 0x81e <RecallPasscode+0xbc>
 81c:	b8 cf       	rjmp	.-144    	; 0x78e <RecallPasscode+0x2c>
	{
		//read the EEPROM value at location of user from LSB to MSB
		tempValue = read_EEPROM((user<<4)|(4-i));
		passcode |= tempValue<<(8*i);			//add each byte together to form a 4 byte passcode
	}
	return passcode;
 81e:	89 81       	ldd	r24, Y+1	; 0x01
 820:	9a 81       	ldd	r25, Y+2	; 0x02
 822:	ab 81       	ldd	r26, Y+3	; 0x03
 824:	bc 81       	ldd	r27, Y+4	; 0x04
}
 826:	bc 01       	movw	r22, r24
 828:	cd 01       	movw	r24, r26
 82a:	2b 96       	adiw	r28, 0x0b	; 11
 82c:	0f b6       	in	r0, 0x3f	; 63
 82e:	f8 94       	cli
 830:	de bf       	out	0x3e, r29	; 62
 832:	0f be       	out	0x3f, r0	; 63
 834:	cd bf       	out	0x3d, r28	; 61
 836:	df 91       	pop	r29
 838:	cf 91       	pop	r28
 83a:	08 95       	ret

0000083c <initLEDs>:
// START FUNCTIONS

//****************************************************************************************
//	Initialise output LEDs - PORTB
void initLEDs(void)
{
 83c:	cf 93       	push	r28
 83e:	df 93       	push	r29
 840:	cd b7       	in	r28, 0x3d	; 61
 842:	de b7       	in	r29, 0x3e	; 62
	DDRB = 0xFF;		// Set all LEDs to outputs
 844:	87 e3       	ldi	r24, 0x37	; 55
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	2f ef       	ldi	r18, 0xFF	; 255
 84a:	fc 01       	movw	r30, r24
 84c:	20 83       	st	Z, r18
	PORTB = 0x00;		// Turn all LEDs off
 84e:	88 e3       	ldi	r24, 0x38	; 56
 850:	90 e0       	ldi	r25, 0x00	; 0
 852:	fc 01       	movw	r30, r24
 854:	10 82       	st	Z, r1
}
 856:	00 00       	nop
 858:	df 91       	pop	r29
 85a:	cf 91       	pop	r28
 85c:	08 95       	ret

0000085e <initKeypad>:


//****************************************************************************************
//	Initialise keypad - PORTC
void initKeypad(void)
{
 85e:	cf 93       	push	r28
 860:	df 93       	push	r29
 862:	cd b7       	in	r28, 0x3d	; 61
 864:	de b7       	in	r29, 0x3e	; 62
	if(keypad3x4 == 1)
 866:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <keypad3x4>
 86a:	81 30       	cpi	r24, 0x01	; 1
 86c:	99 f4       	brne	.+38     	; 0x894 <__stack+0x35>
	{
		DDRC = 0x95;		// Set rows to inputs and columns to outputs
 86e:	84 e3       	ldi	r24, 0x34	; 52
 870:	90 e0       	ldi	r25, 0x00	; 0
 872:	25 e9       	ldi	r18, 0x95	; 149
 874:	fc 01       	movw	r30, r24
 876:	20 83       	st	Z, r18
		PORTC = 0x6A;		// Enable the pull-up resistors on the row inputs
 878:	85 e3       	ldi	r24, 0x35	; 53
 87a:	90 e0       	ldi	r25, 0x00	; 0
 87c:	2a e6       	ldi	r18, 0x6A	; 106
 87e:	fc 01       	movw	r30, r24
 880:	20 83       	st	Z, r18
		PORTC = 0xFF;		// Set the columns to all on (idle state) & ensure pull-ups are still enabled
 882:	85 e3       	ldi	r24, 0x35	; 53
 884:	90 e0       	ldi	r25, 0x00	; 0
 886:	2f ef       	ldi	r18, 0xFF	; 255
 888:	fc 01       	movw	r30, r24
 88a:	20 83       	st	Z, r18
		
		AmountOfColumns =3;
 88c:	83 e0       	ldi	r24, 0x03	; 3
 88e:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <AmountOfColumns>
		PORTC = 0xFF;		// Set the columns to all on (idle state) & ensure pull-ups are still enabled
		
		AmountOfColumns =4;
	}

}
 892:	12 c0       	rjmp	.+36     	; 0x8b8 <__stack+0x59>
		
		AmountOfColumns =3;
	}
	else
	{
		DDRC = 0xF0;		// Set rows to inputs and columns to outputs
 894:	84 e3       	ldi	r24, 0x34	; 52
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	20 ef       	ldi	r18, 0xF0	; 240
 89a:	fc 01       	movw	r30, r24
 89c:	20 83       	st	Z, r18
		PORTC = 0x0F;		// Enable the pull-up resistors on the row inputs
 89e:	85 e3       	ldi	r24, 0x35	; 53
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	2f e0       	ldi	r18, 0x0F	; 15
 8a4:	fc 01       	movw	r30, r24
 8a6:	20 83       	st	Z, r18
		PORTC = 0xFF;		// Set the columns to all on (idle state) & ensure pull-ups are still enabled
 8a8:	85 e3       	ldi	r24, 0x35	; 53
 8aa:	90 e0       	ldi	r25, 0x00	; 0
 8ac:	2f ef       	ldi	r18, 0xFF	; 255
 8ae:	fc 01       	movw	r30, r24
 8b0:	20 83       	st	Z, r18
		
		AmountOfColumns =4;
 8b2:	84 e0       	ldi	r24, 0x04	; 4
 8b4:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <AmountOfColumns>
	}

}
 8b8:	00 00       	nop
 8ba:	df 91       	pop	r29
 8bc:	cf 91       	pop	r28
 8be:	08 95       	ret

000008c0 <initTimers>:


//****************************************************************************************
//Initialise Timers
void initTimers(void)
{
 8c0:	cf 93       	push	r28
 8c2:	df 93       	push	r29
 8c4:	cd b7       	in	r28, 0x3d	; 61
 8c6:	de b7       	in	r29, 0x3e	; 62
	//set timer0 counter to 0
	TCNT0 = 0x00;
 8c8:	82 e5       	ldi	r24, 0x52	; 82
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	fc 01       	movw	r30, r24
 8ce:	10 82       	st	Z, r1
	//set clock prescaler to divide by 1024 of timer0
	TCCR0 |= (1<<CS00) | (0<<CS01) | (1<<CS02);
 8d0:	83 e5       	ldi	r24, 0x53	; 83
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	23 e5       	ldi	r18, 0x53	; 83
 8d6:	30 e0       	ldi	r19, 0x00	; 0
 8d8:	f9 01       	movw	r30, r18
 8da:	20 81       	ld	r18, Z
 8dc:	25 60       	ori	r18, 0x05	; 5
 8de:	fc 01       	movw	r30, r24
 8e0:	20 83       	st	Z, r18
	
	//set time1 counter to 0;
	TCNT1 = 0x0000;
 8e2:	8c e4       	ldi	r24, 0x4C	; 76
 8e4:	90 e0       	ldi	r25, 0x00	; 0
 8e6:	fc 01       	movw	r30, r24
 8e8:	11 82       	std	Z+1, r1	; 0x01
 8ea:	10 82       	st	Z, r1
	//set clock prescaler to divide by 1024 of timer1
	TCCR1B |= (1<<CS10) | (0<<CS11) | (1<<CS12);
 8ec:	8e e4       	ldi	r24, 0x4E	; 78
 8ee:	90 e0       	ldi	r25, 0x00	; 0
 8f0:	2e e4       	ldi	r18, 0x4E	; 78
 8f2:	30 e0       	ldi	r19, 0x00	; 0
 8f4:	f9 01       	movw	r30, r18
 8f6:	20 81       	ld	r18, Z
 8f8:	25 60       	ori	r18, 0x05	; 5
 8fa:	fc 01       	movw	r30, r24
 8fc:	20 83       	st	Z, r18
}
 8fe:	00 00       	nop
 900:	df 91       	pop	r29
 902:	cf 91       	pop	r28
 904:	08 95       	ret

00000906 <ReadOne>:
// START FUNCTIONS

//**************************************************************************************************************************************************
// Function that checks if one key has been pressed 
unsigned char ReadOne() 
{
 906:	cf 93       	push	r28
 908:	df 93       	push	r29
 90a:	00 d0       	rcall	.+0      	; 0x90c <ReadOne+0x6>
 90c:	cd b7       	in	r28, 0x3d	; 61
 90e:	de b7       	in	r29, 0x3e	; 62
	// Set KeyPressed to 0
	KeyPressed = 0x00;
 910:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <KeyPressed>
	
	while(1)	//can get rid of while loop, it just keeps reading until a key is pressed instead of only reading once when its called
	{

		// Scanning column: write the column mask to port C
		for (uint8_t j=0; j<AmountOfColumns; j++)
 914:	19 82       	std	Y+1, r1	; 0x01
 916:	3f c0       	rjmp	.+126    	; 0x996 <ReadOne+0x90>
		{
			PORTC = col[j];			// Scan each column
 918:	85 e3       	ldi	r24, 0x35	; 53
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	29 81       	ldd	r18, Y+1	; 0x01
 91e:	22 2f       	mov	r18, r18
 920:	30 e0       	ldi	r19, 0x00	; 0
 922:	2e 59       	subi	r18, 0x9E	; 158
 924:	3f 4f       	sbci	r19, 0xFF	; 255
 926:	f9 01       	movw	r30, r18
 928:	20 81       	ld	r18, Z
 92a:	fc 01       	movw	r30, r24
 92c:	20 83       	st	Z, r18
			delay_ms(10);				// Delay for 0.01 sec
 92e:	8a e0       	ldi	r24, 0x0A	; 10
 930:	90 e0       	ldi	r25, 0x00	; 0
 932:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
			portCValue = PINC;			// Read port value from pinC
 936:	83 e3       	ldi	r24, 0x33	; 51
 938:	90 e0       	ldi	r25, 0x00	; 0
 93a:	fc 01       	movw	r30, r24
 93c:	80 81       	ld	r24, Z
 93e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <portCValue>
		
			// Begin stepping through each column to check if row has logic 0
			if (portCValue != col[j])
 942:	89 81       	ldd	r24, Y+1	; 0x01
 944:	88 2f       	mov	r24, r24
 946:	90 e0       	ldi	r25, 0x00	; 0
 948:	8e 59       	subi	r24, 0x9E	; 158
 94a:	9f 4f       	sbci	r25, 0xFF	; 255
 94c:	fc 01       	movw	r30, r24
 94e:	90 81       	ld	r25, Z
 950:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <portCValue>
 954:	98 17       	cp	r25, r24
 956:	e1 f0       	breq	.+56     	; 0x990 <ReadOne+0x8a>
			{
				//rebounce??
				//Step through each key
				for(uint8_t k = 0; k < 16; k++)
 958:	1a 82       	std	Y+2, r1	; 0x02
 95a:	17 c0       	rjmp	.+46     	; 0x98a <ReadOne+0x84>
				{
					if(portCValue == Keys[k])
 95c:	8a 81       	ldd	r24, Y+2	; 0x02
 95e:	88 2f       	mov	r24, r24
 960:	90 e0       	ldi	r25, 0x00	; 0
 962:	8a 59       	subi	r24, 0x9A	; 154
 964:	9f 4f       	sbci	r25, 0xFF	; 255
 966:	fc 01       	movw	r30, r24
 968:	90 81       	ld	r25, Z
 96a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <portCValue>
 96e:	98 17       	cp	r25, r24
 970:	49 f4       	brne	.+18     	; 0x984 <ReadOne+0x7e>
					{
						key = k;
 972:	8a 81       	ldd	r24, Y+2	; 0x02
 974:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
						//*portBPort = k;
						KeyPressed = 1;
 978:	81 e0       	ldi	r24, 0x01	; 1
 97a:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <KeyPressed>
						//break;						//return here instead of break??
						return key;
 97e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 982:	10 c0       	rjmp	.+32     	; 0x9a4 <ReadOne+0x9e>
			// Begin stepping through each column to check if row has logic 0
			if (portCValue != col[j])
			{
				//rebounce??
				//Step through each key
				for(uint8_t k = 0; k < 16; k++)
 984:	8a 81       	ldd	r24, Y+2	; 0x02
 986:	8f 5f       	subi	r24, 0xFF	; 255
 988:	8a 83       	std	Y+2, r24	; 0x02
 98a:	8a 81       	ldd	r24, Y+2	; 0x02
 98c:	80 31       	cpi	r24, 0x10	; 16
 98e:	30 f3       	brcs	.-52     	; 0x95c <ReadOne+0x56>
	
	while(1)	//can get rid of while loop, it just keeps reading until a key is pressed instead of only reading once when its called
	{

		// Scanning column: write the column mask to port C
		for (uint8_t j=0; j<AmountOfColumns; j++)
 990:	89 81       	ldd	r24, Y+1	; 0x01
 992:	8f 5f       	subi	r24, 0xFF	; 255
 994:	89 83       	std	Y+1, r24	; 0x01
 996:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <AmountOfColumns>
 99a:	99 81       	ldd	r25, Y+1	; 0x01
 99c:	98 17       	cp	r25, r24
 99e:	08 f4       	brcc	.+2      	; 0x9a2 <ReadOne+0x9c>
 9a0:	bb cf       	rjmp	.-138    	; 0x918 <ReadOne+0x12>
						return key;
					}		
				}
			}
		}
	}
 9a2:	b8 cf       	rjmp	.-144    	; 0x914 <ReadOne+0xe>
	return key;		//this should never execute
}
 9a4:	0f 90       	pop	r0
 9a6:	0f 90       	pop	r0
 9a8:	df 91       	pop	r29
 9aa:	cf 91       	pop	r28
 9ac:	08 95       	ret

000009ae <ReadNone>:
//**************************************************************************************************************************************************

//**************************************************************************************************************************************************
//Check if key has been lifted. ie debounce?
void ReadNone (void)
{
 9ae:	cf 93       	push	r28
 9b0:	df 93       	push	r29
 9b2:	cd b7       	in	r28, 0x3d	; 61
 9b4:	de b7       	in	r29, 0x3e	; 62
	if(keypad3x4==1)
 9b6:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <keypad3x4>
 9ba:	81 30       	cpi	r24, 0x01	; 1
 9bc:	69 f4       	brne	.+26     	; 0x9d8 <ReadNone+0x2a>
	{
		while((PINC&0x6A)!=0x6A);	//exits when PINC inputs are all high 
 9be:	00 00       	nop
 9c0:	83 e3       	ldi	r24, 0x33	; 51
 9c2:	90 e0       	ldi	r25, 0x00	; 0
 9c4:	fc 01       	movw	r30, r24
 9c6:	80 81       	ld	r24, Z
 9c8:	88 2f       	mov	r24, r24
 9ca:	90 e0       	ldi	r25, 0x00	; 0
 9cc:	8a 76       	andi	r24, 0x6A	; 106
 9ce:	99 27       	eor	r25, r25
 9d0:	8a 36       	cpi	r24, 0x6A	; 106
 9d2:	91 05       	cpc	r25, r1
 9d4:	a9 f7       	brne	.-22     	; 0x9c0 <ReadNone+0x12>
	else
	{
		while((PINC&0x0F)!=0x0F);	//exits when PINC inputs are all high 
	}
	
}
 9d6:	0b c0       	rjmp	.+22     	; 0x9ee <ReadNone+0x40>
	{
		while((PINC&0x6A)!=0x6A);	//exits when PINC inputs are all high 
	}
	else
	{
		while((PINC&0x0F)!=0x0F);	//exits when PINC inputs are all high 
 9d8:	00 00       	nop
 9da:	83 e3       	ldi	r24, 0x33	; 51
 9dc:	90 e0       	ldi	r25, 0x00	; 0
 9de:	fc 01       	movw	r30, r24
 9e0:	80 81       	ld	r24, Z
 9e2:	88 2f       	mov	r24, r24
 9e4:	90 e0       	ldi	r25, 0x00	; 0
 9e6:	8f 70       	andi	r24, 0x0F	; 15
 9e8:	99 27       	eor	r25, r25
 9ea:	0f 97       	sbiw	r24, 0x0f	; 15
 9ec:	b1 f7       	brne	.-20     	; 0x9da <ReadNone+0x2c>
	}
	
}
 9ee:	00 00       	nop
 9f0:	df 91       	pop	r29
 9f2:	cf 91       	pop	r28
 9f4:	08 95       	ret

000009f6 <InputPasscode>:
//**************************************************************************************************************************************************

//**************************************************************************************************************************************************
//Combine 6-8 digits into a passcode
uint32_t InputPasscode (void)
{
 9f6:	0f 93       	push	r16
 9f8:	1f 93       	push	r17
 9fa:	cf 93       	push	r28
 9fc:	df 93       	push	r29
 9fe:	cd b7       	in	r28, 0x3d	; 61
 a00:	de b7       	in	r29, 0x3e	; 62
 a02:	27 97       	sbiw	r28, 0x07	; 7
 a04:	0f b6       	in	r0, 0x3f	; 63
 a06:	f8 94       	cli
 a08:	de bf       	out	0x3e, r29	; 62
 a0a:	0f be       	out	0x3f, r0	; 63
 a0c:	cd bf       	out	0x3d, r28	; 61
	uint32_t passcode = 0;
 a0e:	19 82       	std	Y+1, r1	; 0x01
 a10:	1a 82       	std	Y+2, r1	; 0x02
 a12:	1b 82       	std	Y+3, r1	; 0x03
 a14:	1c 82       	std	Y+4, r1	; 0x04
	for (int i =0; i<8; i++)
 a16:	1e 82       	std	Y+6, r1	; 0x06
 a18:	1d 82       	std	Y+5, r1	; 0x05
 a1a:	4d c0       	rjmp	.+154    	; 0xab6 <InputPasscode+0xc0>
	{
		uint8_t keyValue = ReadOne();	//store digit pressed by user
 a1c:	0e 94 83 04 	call	0x906	; 0x906 <ReadOne>
 a20:	8f 83       	std	Y+7, r24	; 0x07
		
		if(keyValue==0xF)					//if # is pressed
 a22:	8f 81       	ldd	r24, Y+7	; 0x07
 a24:	8f 30       	cpi	r24, 0x0F	; 15
 a26:	29 f4       	brne	.+10     	; 0xa32 <InputPasscode+0x3c>
		{
			return passcode;
 a28:	89 81       	ldd	r24, Y+1	; 0x01
 a2a:	9a 81       	ldd	r25, Y+2	; 0x02
 a2c:	ab 81       	ldd	r26, Y+3	; 0x03
 a2e:	bc 81       	ldd	r27, Y+4	; 0x04
 a30:	53 c0       	rjmp	.+166    	; 0xad8 <InputPasscode+0xe2>
		}
		
		//check if key pressed is a digit
		if(isDigit(keyValue))
 a32:	8f 81       	ldd	r24, Y+7	; 0x07
 a34:	0e 94 8c 05 	call	0xb18	; 0xb18 <isDigit>
 a38:	88 23       	and	r24, r24
 a3a:	89 f1       	breq	.+98     	; 0xa9e <InputPasscode+0xa8>
		{
			PORTB = displayKeys(keyValue);	// output key being pressed to LEDs
 a3c:	08 e3       	ldi	r16, 0x38	; 56
 a3e:	10 e0       	ldi	r17, 0x00	; 0
 a40:	8f 81       	ldd	r24, Y+7	; 0x07
 a42:	0e 94 3e 02 	call	0x47c	; 0x47c <displayKeys>
 a46:	f8 01       	movw	r30, r16
 a48:	80 83       	st	Z, r24
			ReadNone();						//waits until finger is lifted off button
 a4a:	0e 94 d7 04 	call	0x9ae	; 0x9ae <ReadNone>
			PORTB = 0x00;
 a4e:	88 e3       	ldi	r24, 0x38	; 56
 a50:	90 e0       	ldi	r25, 0x00	; 0
 a52:	fc 01       	movw	r30, r24
 a54:	10 82       	st	Z, r1
			
			passcode = passcode*10 + keyValue;	//add each digit into a long int
 a56:	89 81       	ldd	r24, Y+1	; 0x01
 a58:	9a 81       	ldd	r25, Y+2	; 0x02
 a5a:	ab 81       	ldd	r26, Y+3	; 0x03
 a5c:	bc 81       	ldd	r27, Y+4	; 0x04
 a5e:	88 0f       	add	r24, r24
 a60:	99 1f       	adc	r25, r25
 a62:	aa 1f       	adc	r26, r26
 a64:	bb 1f       	adc	r27, r27
 a66:	9c 01       	movw	r18, r24
 a68:	ad 01       	movw	r20, r26
 a6a:	22 0f       	add	r18, r18
 a6c:	33 1f       	adc	r19, r19
 a6e:	44 1f       	adc	r20, r20
 a70:	55 1f       	adc	r21, r21
 a72:	22 0f       	add	r18, r18
 a74:	33 1f       	adc	r19, r19
 a76:	44 1f       	adc	r20, r20
 a78:	55 1f       	adc	r21, r21
 a7a:	28 0f       	add	r18, r24
 a7c:	39 1f       	adc	r19, r25
 a7e:	4a 1f       	adc	r20, r26
 a80:	5b 1f       	adc	r21, r27
 a82:	8f 81       	ldd	r24, Y+7	; 0x07
 a84:	88 2f       	mov	r24, r24
 a86:	90 e0       	ldi	r25, 0x00	; 0
 a88:	a0 e0       	ldi	r26, 0x00	; 0
 a8a:	b0 e0       	ldi	r27, 0x00	; 0
 a8c:	82 0f       	add	r24, r18
 a8e:	93 1f       	adc	r25, r19
 a90:	a4 1f       	adc	r26, r20
 a92:	b5 1f       	adc	r27, r21
 a94:	89 83       	std	Y+1, r24	; 0x01
 a96:	9a 83       	std	Y+2, r25	; 0x02
 a98:	ab 83       	std	Y+3, r26	; 0x03
 a9a:	bc 83       	std	Y+4, r27	; 0x04
 a9c:	07 c0       	rjmp	.+14     	; 0xaac <InputPasscode+0xb6>
		}
		else
		{
			//not a valid input
			i--;		//dont increment length counter if not valid
 a9e:	8d 81       	ldd	r24, Y+5	; 0x05
 aa0:	9e 81       	ldd	r25, Y+6	; 0x06
 aa2:	01 97       	sbiw	r24, 0x01	; 1
 aa4:	9e 83       	std	Y+6, r25	; 0x06
 aa6:	8d 83       	std	Y+5, r24	; 0x05
			displayIncorrect();
 aa8:	0e 94 16 02 	call	0x42c	; 0x42c <displayIncorrect>
//**************************************************************************************************************************************************
//Combine 6-8 digits into a passcode
uint32_t InputPasscode (void)
{
	uint32_t passcode = 0;
	for (int i =0; i<8; i++)
 aac:	8d 81       	ldd	r24, Y+5	; 0x05
 aae:	9e 81       	ldd	r25, Y+6	; 0x06
 ab0:	01 96       	adiw	r24, 0x01	; 1
 ab2:	9e 83       	std	Y+6, r25	; 0x06
 ab4:	8d 83       	std	Y+5, r24	; 0x05
 ab6:	8d 81       	ldd	r24, Y+5	; 0x05
 ab8:	9e 81       	ldd	r25, Y+6	; 0x06
 aba:	08 97       	sbiw	r24, 0x08	; 8
 abc:	0c f4       	brge	.+2      	; 0xac0 <InputPasscode+0xca>
 abe:	ae cf       	rjmp	.-164    	; 0xa1c <InputPasscode+0x26>
	}
	/*
	while(!(ReadOne()==0xF));		//wait until reads a *
	return passcode	; */
	
	if((ReadOne()==0xF))		//if next key is a #
 ac0:	0e 94 83 04 	call	0x906	; 0x906 <ReadOne>
 ac4:	8f 30       	cpi	r24, 0x0F	; 15
 ac6:	29 f4       	brne	.+10     	; 0xad2 <InputPasscode+0xdc>
	{
		return passcode	;
 ac8:	89 81       	ldd	r24, Y+1	; 0x01
 aca:	9a 81       	ldd	r25, Y+2	; 0x02
 acc:	ab 81       	ldd	r26, Y+3	; 0x03
 ace:	bc 81       	ldd	r27, Y+4	; 0x04
 ad0:	03 c0       	rjmp	.+6      	; 0xad8 <InputPasscode+0xe2>
	}
	else
	{
		return 0;
 ad2:	80 e0       	ldi	r24, 0x00	; 0
 ad4:	90 e0       	ldi	r25, 0x00	; 0
 ad6:	dc 01       	movw	r26, r24
	}	
}
 ad8:	bc 01       	movw	r22, r24
 ada:	cd 01       	movw	r24, r26
 adc:	27 96       	adiw	r28, 0x07	; 7
 ade:	0f b6       	in	r0, 0x3f	; 63
 ae0:	f8 94       	cli
 ae2:	de bf       	out	0x3e, r29	; 62
 ae4:	0f be       	out	0x3f, r0	; 63
 ae6:	cd bf       	out	0x3d, r28	; 61
 ae8:	df 91       	pop	r29
 aea:	cf 91       	pop	r28
 aec:	1f 91       	pop	r17
 aee:	0f 91       	pop	r16
 af0:	08 95       	ret

00000af2 <isUser>:
//**************************************************************************************************************************************************

//**************************************************************************************************************************************************
//is the input a letter, a,b,c, or d. returns 1 if a valid user code
uint8_t isUser (uint8_t buttonPressed)
{
 af2:	cf 93       	push	r28
 af4:	df 93       	push	r29
 af6:	1f 92       	push	r1
 af8:	cd b7       	in	r28, 0x3d	; 61
 afa:	de b7       	in	r29, 0x3e	; 62
 afc:	89 83       	std	Y+1, r24	; 0x01
	switch(buttonPressed)
 afe:	89 81       	ldd	r24, Y+1	; 0x01
 b00:	88 2f       	mov	r24, r24
 b02:	90 e0       	ldi	r25, 0x00	; 0
 b04:	0a 97       	sbiw	r24, 0x0a	; 10
 b06:	04 97       	sbiw	r24, 0x04	; 4
 b08:	10 f4       	brcc	.+4      	; 0xb0e <isUser+0x1c>
	{
		case 0x0A:
		case 0x0B:
		case 0x0C:
		case 0x0D:
		return 1;
 b0a:	81 e0       	ldi	r24, 0x01	; 1
 b0c:	01 c0       	rjmp	.+2      	; 0xb10 <isUser+0x1e>
		
		default:	//invalid user code		Set some debug flag here
		return 0;
 b0e:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 b10:	0f 90       	pop	r0
 b12:	df 91       	pop	r29
 b14:	cf 91       	pop	r28
 b16:	08 95       	ret

00000b18 <isDigit>:
//**************************************************************************************************************************************************

//**************************************************************************************************************************************************
//is the user input a digit. returns 1 if value is a digit
uint8_t isDigit (uint8_t buttonPressed)
{
 b18:	cf 93       	push	r28
 b1a:	df 93       	push	r29
 b1c:	1f 92       	push	r1
 b1e:	cd b7       	in	r28, 0x3d	; 61
 b20:	de b7       	in	r29, 0x3e	; 62
 b22:	89 83       	std	Y+1, r24	; 0x01
	switch(buttonPressed)
 b24:	89 81       	ldd	r24, Y+1	; 0x01
 b26:	88 2f       	mov	r24, r24
 b28:	90 e0       	ldi	r25, 0x00	; 0
 b2a:	0a 97       	sbiw	r24, 0x0a	; 10
 b2c:	10 f4       	brcc	.+4      	; 0xb32 <isDigit+0x1a>
		case 0x05:
		case 0x06:
		case 0x07:
		case 0x08:
		case 0x09:
		return 1;
 b2e:	81 e0       	ldi	r24, 0x01	; 1
 b30:	01 c0       	rjmp	.+2      	; 0xb34 <isDigit+0x1c>
		
		default:	//invalid user code		Set some debug flag here
		return 0;
 b32:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 b34:	0f 90       	pop	r0
 b36:	df 91       	pop	r29
 b38:	cf 91       	pop	r28
 b3a:	08 95       	ret

00000b3c <isHeld3s>:
//**************************************************************************************************************************************************

//**************************************************************************************************************************************************
//Return one if the selected key has been held for 3 seconds. return 0 if not
uint8_t isHeld3s (void)
{
 b3c:	cf 93       	push	r28
 b3e:	df 93       	push	r29
 b40:	1f 92       	push	r1
 b42:	cd b7       	in	r28, 0x3d	; 61
 b44:	de b7       	in	r29, 0x3e	; 62
	for(uint8_t i = 0; i<255; i++)
 b46:	19 82       	std	Y+1, r1	; 0x01
 b48:	13 c0       	rjmp	.+38     	; 0xb70 <isHeld3s+0x34>
	{
		delay_ms(12);			//0.012*255 =3.06secs
 b4a:	8c e0       	ldi	r24, 0x0C	; 12
 b4c:	90 e0       	ldi	r25, 0x00	; 0
 b4e:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
		if((PINC&0x0F)==0x0F)
 b52:	83 e3       	ldi	r24, 0x33	; 51
 b54:	90 e0       	ldi	r25, 0x00	; 0
 b56:	fc 01       	movw	r30, r24
 b58:	80 81       	ld	r24, Z
 b5a:	88 2f       	mov	r24, r24
 b5c:	90 e0       	ldi	r25, 0x00	; 0
 b5e:	8f 70       	andi	r24, 0x0F	; 15
 b60:	99 27       	eor	r25, r25
 b62:	0f 97       	sbiw	r24, 0x0f	; 15
 b64:	11 f4       	brne	.+4      	; 0xb6a <isHeld3s+0x2e>
		{
			return 0;
 b66:	80 e0       	ldi	r24, 0x00	; 0
 b68:	07 c0       	rjmp	.+14     	; 0xb78 <isHeld3s+0x3c>

//**************************************************************************************************************************************************
//Return one if the selected key has been held for 3 seconds. return 0 if not
uint8_t isHeld3s (void)
{
	for(uint8_t i = 0; i<255; i++)
 b6a:	89 81       	ldd	r24, Y+1	; 0x01
 b6c:	8f 5f       	subi	r24, 0xFF	; 255
 b6e:	89 83       	std	Y+1, r24	; 0x01
 b70:	89 81       	ldd	r24, Y+1	; 0x01
 b72:	8f 3f       	cpi	r24, 0xFF	; 255
 b74:	51 f7       	brne	.-44     	; 0xb4a <isHeld3s+0xe>
		if((PINC&0x0F)==0x0F)
		{
			return 0;
		}
	}
	return 1;
 b76:	81 e0       	ldi	r24, 0x01	; 1
}
 b78:	0f 90       	pop	r0
 b7a:	df 91       	pop	r29
 b7c:	cf 91       	pop	r28
 b7e:	08 95       	ret

00000b80 <DigitCount>:
//**************************************************************************************************************************************************

//**************************************************************************************************************************************************
uint8_t DigitCount(uint32_t NewPasscode)
{
 b80:	cf 93       	push	r28
 b82:	df 93       	push	r29
 b84:	00 d0       	rcall	.+0      	; 0xb86 <DigitCount+0x6>
 b86:	00 d0       	rcall	.+0      	; 0xb88 <DigitCount+0x8>
 b88:	1f 92       	push	r1
 b8a:	cd b7       	in	r28, 0x3d	; 61
 b8c:	de b7       	in	r29, 0x3e	; 62
 b8e:	6a 83       	std	Y+2, r22	; 0x02
 b90:	7b 83       	std	Y+3, r23	; 0x03
 b92:	8c 83       	std	Y+4, r24	; 0x04
 b94:	9d 83       	std	Y+5, r25	; 0x05
	uint8_t count = 0;
 b96:	19 82       	std	Y+1, r1	; 0x01
	while (NewPasscode != 0)
 b98:	15 c0       	rjmp	.+42     	; 0xbc4 <DigitCount+0x44>
	{
		NewPasscode /= 10;
 b9a:	8a 81       	ldd	r24, Y+2	; 0x02
 b9c:	9b 81       	ldd	r25, Y+3	; 0x03
 b9e:	ac 81       	ldd	r26, Y+4	; 0x04
 ba0:	bd 81       	ldd	r27, Y+5	; 0x05
 ba2:	2a e0       	ldi	r18, 0x0A	; 10
 ba4:	30 e0       	ldi	r19, 0x00	; 0
 ba6:	40 e0       	ldi	r20, 0x00	; 0
 ba8:	50 e0       	ldi	r21, 0x00	; 0
 baa:	bc 01       	movw	r22, r24
 bac:	cd 01       	movw	r24, r26
 bae:	0e 94 f4 06 	call	0xde8	; 0xde8 <__udivmodsi4>
 bb2:	da 01       	movw	r26, r20
 bb4:	c9 01       	movw	r24, r18
 bb6:	8a 83       	std	Y+2, r24	; 0x02
 bb8:	9b 83       	std	Y+3, r25	; 0x03
 bba:	ac 83       	std	Y+4, r26	; 0x04
 bbc:	bd 83       	std	Y+5, r27	; 0x05
		++count;
 bbe:	89 81       	ldd	r24, Y+1	; 0x01
 bc0:	8f 5f       	subi	r24, 0xFF	; 255
 bc2:	89 83       	std	Y+1, r24	; 0x01

//**************************************************************************************************************************************************
uint8_t DigitCount(uint32_t NewPasscode)
{
	uint8_t count = 0;
	while (NewPasscode != 0)
 bc4:	8a 81       	ldd	r24, Y+2	; 0x02
 bc6:	9b 81       	ldd	r25, Y+3	; 0x03
 bc8:	ac 81       	ldd	r26, Y+4	; 0x04
 bca:	bd 81       	ldd	r27, Y+5	; 0x05
 bcc:	89 2b       	or	r24, r25
 bce:	8a 2b       	or	r24, r26
 bd0:	8b 2b       	or	r24, r27
 bd2:	19 f7       	brne	.-58     	; 0xb9a <DigitCount+0x1a>
	{
		NewPasscode /= 10;
		++count;
	}
	return count;
 bd4:	89 81       	ldd	r24, Y+1	; 0x01
}
 bd6:	0f 90       	pop	r0
 bd8:	0f 90       	pop	r0
 bda:	0f 90       	pop	r0
 bdc:	0f 90       	pop	r0
 bde:	0f 90       	pop	r0
 be0:	df 91       	pop	r29
 be2:	cf 91       	pop	r28
 be4:	08 95       	ret

00000be6 <main>:

// Global variables
uint8_t debugCode = 0;

int main(void)
{
 be6:	cf 93       	push	r28
 be8:	df 93       	push	r29
 bea:	00 d0       	rcall	.+0      	; 0xbec <main+0x6>
 bec:	00 d0       	rcall	.+0      	; 0xbee <main+0x8>
 bee:	00 d0       	rcall	.+0      	; 0xbf0 <main+0xa>
 bf0:	cd b7       	in	r28, 0x3d	; 61
 bf2:	de b7       	in	r29, 0x3e	; 62
	// Initialise everything
    initTimers();
 bf4:	0e 94 60 04 	call	0x8c0	; 0x8c0 <initTimers>
	initLEDs();
 bf8:	0e 94 1e 04 	call	0x83c	; 0x83c <initLEDs>
	initKeypad();
 bfc:	0e 94 2f 04 	call	0x85e	; 0x85e <initKeypad>
		storePasscode(00000000, 0xA+i);		//stores the password 00000000 into user slot if no previous code has been set
	}
	*/
	
	
	storePasscode(12345678, 0x0A);
 c00:	4a e0       	ldi	r20, 0x0A	; 10
 c02:	6e e4       	ldi	r22, 0x4E	; 78
 c04:	71 e6       	ldi	r23, 0x61	; 97
 c06:	8c eb       	ldi	r24, 0xBC	; 188
 c08:	90 e0       	ldi	r25, 0x00	; 0
 c0a:	0e 94 29 03 	call	0x652	; 0x652 <storePasscode>
	storePasscode(11223344, 0x0B);
 c0e:	4b e0       	ldi	r20, 0x0B	; 11
 c10:	60 e3       	ldi	r22, 0x30	; 48
 c12:	71 e4       	ldi	r23, 0x41	; 65
 c14:	8b ea       	ldi	r24, 0xAB	; 171
 c16:	90 e0       	ldi	r25, 0x00	; 0
 c18:	0e 94 29 03 	call	0x652	; 0x652 <storePasscode>
	storePasscode(00000000, 0x0C);
 c1c:	4c e0       	ldi	r20, 0x0C	; 12
 c1e:	60 e0       	ldi	r22, 0x00	; 0
 c20:	70 e0       	ldi	r23, 0x00	; 0
 c22:	cb 01       	movw	r24, r22
 c24:	0e 94 29 03 	call	0x652	; 0x652 <storePasscode>
	storePasscode(00000000, 0x0D);
 c28:	4d e0       	ldi	r20, 0x0D	; 13
 c2a:	60 e0       	ldi	r22, 0x00	; 0
 c2c:	70 e0       	ldi	r23, 0x00	; 0
 c2e:	cb 01       	movw	r24, r22
 c30:	0e 94 29 03 	call	0x652	; 0x652 <storePasscode>
	
	uint8_t attempts = 0;		// Set number of attempts to 0
 c34:	19 82       	std	Y+1, r1	; 0x01

	// Start infinite loop
    while (1) 
    {
		uint8_t user = ReadOne();		//CHANGED added instead of For loop, determines the first key pressed
 c36:	0e 94 83 04 	call	0x906	; 0x906 <ReadOne>
 c3a:	8a 83       	std	Y+2, r24	; 0x02
		uint32_t attemptPasscode;
		
		
		if (isUser(user))	// Check if user A B C or D is chosen
 c3c:	8a 81       	ldd	r24, Y+2	; 0x02
 c3e:	0e 94 79 05 	call	0xaf2	; 0xaf2 <isUser>
 c42:	88 23       	and	r24, r24
 c44:	d9 f1       	breq	.+118    	; 0xcbc <main+0xd6>
		{
			displayUser(user);
 c46:	8a 81       	ldd	r24, Y+2	; 0x02
 c48:	0e 94 91 02 	call	0x522	; 0x522 <displayUser>
			ReadNone();
 c4c:	0e 94 d7 04 	call	0x9ae	; 0x9ae <ReadNone>
			PORTB = 0;
 c50:	88 e3       	ldi	r24, 0x38	; 56
 c52:	90 e0       	ldi	r25, 0x00	; 0
 c54:	fc 01       	movw	r30, r24
 c56:	10 82       	st	Z, r1
			
			if (attempts < 3)	// Ensure number of passcode attempts < 3		//CHANGED from while to If as it would always stay in the while loop
 c58:	89 81       	ldd	r24, Y+1	; 0x01
 c5a:	83 30       	cpi	r24, 0x03	; 3
 c5c:	60 f5       	brcc	.+88     	; 0xcb6 <main+0xd0>
			{
				attemptPasscode = InputPasscode();		// Read the passcode from the keypad
 c5e:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <InputPasscode>
 c62:	dc 01       	movw	r26, r24
 c64:	cb 01       	movw	r24, r22
 c66:	8b 83       	std	Y+3, r24	; 0x03
 c68:	9c 83       	std	Y+4, r25	; 0x04
 c6a:	ad 83       	std	Y+5, r26	; 0x05
 c6c:	be 83       	std	Y+6, r27	; 0x06
				
				if (RecallPasscode(user) == attemptPasscode)	// If the attempted passcode is equal to the stored passcode, UNLOCK
 c6e:	8a 81       	ldd	r24, Y+2	; 0x02
 c70:	0e 94 b1 03 	call	0x762	; 0x762 <RecallPasscode>
 c74:	9b 01       	movw	r18, r22
 c76:	ac 01       	movw	r20, r24
 c78:	8b 81       	ldd	r24, Y+3	; 0x03
 c7a:	9c 81       	ldd	r25, Y+4	; 0x04
 c7c:	ad 81       	ldd	r26, Y+5	; 0x05
 c7e:	be 81       	ldd	r27, Y+6	; 0x06
 c80:	28 17       	cp	r18, r24
 c82:	39 07       	cpc	r19, r25
 c84:	4a 07       	cpc	r20, r26
 c86:	5b 07       	cpc	r21, r27
 c88:	61 f4       	brne	.+24     	; 0xca2 <main+0xbc>
				{
					delay_ms(100);
 c8a:	84 e6       	ldi	r24, 0x64	; 100
 c8c:	90 e0       	ldi	r25, 0x00	; 0
 c8e:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
					displayUnlock();
 c92:	0e 94 df 00 	call	0x1be	; 0x1be <displayUnlock>
					while(ReadOne()!= 0x0F);
 c96:	00 00       	nop
 c98:	0e 94 83 04 	call	0x906	; 0x906 <ReadOne>
 c9c:	8f 30       	cpi	r24, 0x0F	; 15
 c9e:	e1 f7       	brne	.-8      	; 0xc98 <main+0xb2>
 ca0:	ca cf       	rjmp	.-108    	; 0xc36 <main+0x50>
				}
				else		// If incorrect, display LOCK 
				{
					delay_ms(100);
 ca2:	84 e6       	ldi	r24, 0x64	; 100
 ca4:	90 e0       	ldi	r25, 0x00	; 0
 ca6:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
					displayLock();
 caa:	0e 94 96 01 	call	0x32c	; 0x32c <displayLock>
					attempts = attempts + 1;	// Increment number of attempts by 1
 cae:	89 81       	ldd	r24, Y+1	; 0x01
 cb0:	8f 5f       	subi	r24, 0xFF	; 255
 cb2:	89 83       	std	Y+1, r24	; 0x01
 cb4:	c0 cf       	rjmp	.-128    	; 0xc36 <main+0x50>
				}
			}
			else
			{
				// LOCKOUT when number of attempts is more than 3
				displayLockout();
 cb6:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <displayLockout>
 cba:	bd cf       	rjmp	.-134    	; 0xc36 <main+0x50>
			}	
		}
			
			
		else if (user == 0x0E)		// If the * is pressed
 cbc:	8a 81       	ldd	r24, Y+2	; 0x02
 cbe:	8e 30       	cpi	r24, 0x0E	; 14
 cc0:	51 f4       	brne	.+20     	; 0xcd6 <main+0xf0>
		{
			if(isHeld3s())
 cc2:	0e 94 9e 05 	call	0xb3c	; 0xb3c <isHeld3s>
 cc6:	88 23       	and	r24, r24
 cc8:	09 f4       	brne	.+2      	; 0xccc <main+0xe6>
 cca:	b5 cf       	rjmp	.-150    	; 0xc36 <main+0x50>
			{
				displayProgramming();
 ccc:	0e 94 ee 01 	call	0x3dc	; 0x3dc <displayProgramming>
				// ENTER PROGRAMMING MODE - check for which user is pressed
				ProgramMode();
 cd0:	0e 94 72 06 	call	0xce4	; 0xce4 <ProgramMode>
 cd4:	b0 cf       	rjmp	.-160    	; 0xc36 <main+0x50>
			}	
		}
			
		else // If any other key is pressed
		{
			delay_ms(100);
 cd6:	84 e6       	ldi	r24, 0x64	; 100
 cd8:	90 e0       	ldi	r25, 0x00	; 0
 cda:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
			displayIncorrect();
 cde:	0e 94 16 02 	call	0x42c	; 0x42c <displayIncorrect>
		}		
    }
 ce2:	a9 cf       	rjmp	.-174    	; 0xc36 <main+0x50>

00000ce4 <ProgramMode>:

}


void ProgramMode(void)
{
 ce4:	cf 93       	push	r28
 ce6:	df 93       	push	r29
 ce8:	cd b7       	in	r28, 0x3d	; 61
 cea:	de b7       	in	r29, 0x3e	; 62
 cec:	2b 97       	sbiw	r28, 0x0b	; 11
 cee:	0f b6       	in	r0, 0x3f	; 63
 cf0:	f8 94       	cli
 cf2:	de bf       	out	0x3e, r29	; 62
 cf4:	0f be       	out	0x3f, r0	; 63
 cf6:	cd bf       	out	0x3d, r28	; 61
	ReadNone(); //wait until nothing is pressed
 cf8:	0e 94 d7 04 	call	0x9ae	; 0x9ae <ReadNone>
	uint8_t attempts = 0;		// Set number of attempts to 0
 cfc:	19 82       	std	Y+1, r1	; 0x01
	// ENTER PROGRAMMING MODE - check for which user is pressed
	while(1)
	{
		
		uint8_t user = ReadOne();		//CHANGED added instead of For loop, determines the first key pressed
 cfe:	0e 94 83 04 	call	0x906	; 0x906 <ReadOne>
 d02:	8a 83       	std	Y+2, r24	; 0x02
		uint32_t attemptPasscode;
	
	
		if (isUser(user))	// Check if user A B C or D is chosen
 d04:	8a 81       	ldd	r24, Y+2	; 0x02
 d06:	0e 94 79 05 	call	0xaf2	; 0xaf2 <isUser>
 d0a:	88 23       	and	r24, r24
 d0c:	09 f4       	brne	.+2      	; 0xd10 <ProgramMode+0x2c>
 d0e:	5c c0       	rjmp	.+184    	; 0xdc8 <ProgramMode+0xe4>
		{
			displayUser(user);
 d10:	8a 81       	ldd	r24, Y+2	; 0x02
 d12:	0e 94 91 02 	call	0x522	; 0x522 <displayUser>
			ReadNone();
 d16:	0e 94 d7 04 	call	0x9ae	; 0x9ae <ReadNone>
			PORTB = 0;
 d1a:	88 e3       	ldi	r24, 0x38	; 56
 d1c:	90 e0       	ldi	r25, 0x00	; 0
 d1e:	fc 01       	movw	r30, r24
 d20:	10 82       	st	Z, r1
		
			if (attempts < 3)	// Ensure number of passcode attempts < 3		//CHANGED from while to If as it would always stay in the while loop
 d22:	89 81       	ldd	r24, Y+1	; 0x01
 d24:	83 30       	cpi	r24, 0x03	; 3
 d26:	08 f0       	brcs	.+2      	; 0xd2a <ProgramMode+0x46>
 d28:	4c c0       	rjmp	.+152    	; 0xdc2 <ProgramMode+0xde>
			{
				attemptPasscode = InputPasscode();		// Read the passcode from the keypad
 d2a:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <InputPasscode>
 d2e:	dc 01       	movw	r26, r24
 d30:	cb 01       	movw	r24, r22
 d32:	8b 83       	std	Y+3, r24	; 0x03
 d34:	9c 83       	std	Y+4, r25	; 0x04
 d36:	ad 83       	std	Y+5, r26	; 0x05
 d38:	be 83       	std	Y+6, r27	; 0x06
			
				if (RecallPasscode(user) == attemptPasscode)	// If the attempted passcode is equal to the stored passcode, UNLOCK
 d3a:	8a 81       	ldd	r24, Y+2	; 0x02
 d3c:	0e 94 b1 03 	call	0x762	; 0x762 <RecallPasscode>
 d40:	9b 01       	movw	r18, r22
 d42:	ac 01       	movw	r20, r24
 d44:	8b 81       	ldd	r24, Y+3	; 0x03
 d46:	9c 81       	ldd	r25, Y+4	; 0x04
 d48:	ad 81       	ldd	r26, Y+5	; 0x05
 d4a:	be 81       	ldd	r27, Y+6	; 0x06
 d4c:	28 17       	cp	r18, r24
 d4e:	39 07       	cpc	r19, r25
 d50:	4a 07       	cpc	r20, r26
 d52:	5b 07       	cpc	r21, r27
 d54:	61 f5       	brne	.+88     	; 0xdae <ProgramMode+0xca>
				{
					delay_ms(100);
 d56:	84 e6       	ldi	r24, 0x64	; 100
 d58:	90 e0       	ldi	r25, 0x00	; 0
 d5a:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
					displayUnlockProg();
 d5e:	0e 94 3f 01 	call	0x27e	; 0x27e <displayUnlockProg>
					
					/////////////////////////////////////////////////////////
					uint32_t NewPassword = InputPasscode();
 d62:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <InputPasscode>
 d66:	dc 01       	movw	r26, r24
 d68:	cb 01       	movw	r24, r22
 d6a:	8f 83       	std	Y+7, r24	; 0x07
 d6c:	98 87       	std	Y+8, r25	; 0x08
 d6e:	a9 87       	std	Y+9, r26	; 0x09
 d70:	ba 87       	std	Y+10, r27	; 0x0a
					uint8_t NewPasswordSize = DigitCount(NewPassword);
 d72:	8f 81       	ldd	r24, Y+7	; 0x07
 d74:	98 85       	ldd	r25, Y+8	; 0x08
 d76:	a9 85       	ldd	r26, Y+9	; 0x09
 d78:	ba 85       	ldd	r27, Y+10	; 0x0a
 d7a:	bc 01       	movw	r22, r24
 d7c:	cd 01       	movw	r24, r26
 d7e:	0e 94 c0 05 	call	0xb80	; 0xb80 <DigitCount>
 d82:	8b 87       	std	Y+11, r24	; 0x0b
					
					if((NewPasswordSize >= 6)&& (NewPasswordSize <= 8))
 d84:	8b 85       	ldd	r24, Y+11	; 0x0b
 d86:	86 30       	cpi	r24, 0x06	; 6
 d88:	08 f4       	brcc	.+2      	; 0xd8c <ProgramMode+0xa8>
 d8a:	b9 cf       	rjmp	.-142    	; 0xcfe <ProgramMode+0x1a>
 d8c:	8b 85       	ldd	r24, Y+11	; 0x0b
 d8e:	89 30       	cpi	r24, 0x09	; 9
 d90:	08 f0       	brcs	.+2      	; 0xd94 <ProgramMode+0xb0>
 d92:	b5 cf       	rjmp	.-150    	; 0xcfe <ProgramMode+0x1a>
					{
						storePasscode(NewPassword,user);
 d94:	8f 81       	ldd	r24, Y+7	; 0x07
 d96:	98 85       	ldd	r25, Y+8	; 0x08
 d98:	a9 85       	ldd	r26, Y+9	; 0x09
 d9a:	ba 85       	ldd	r27, Y+10	; 0x0a
 d9c:	4a 81       	ldd	r20, Y+2	; 0x02
 d9e:	bc 01       	movw	r22, r24
 da0:	cd 01       	movw	r24, r26
 da2:	0e 94 29 03 	call	0x652	; 0x652 <storePasscode>
						displayUnlockProg();
 da6:	0e 94 3f 01 	call	0x27e	; 0x27e <displayUnlockProg>
						attempts = 0;
 daa:	19 82       	std	Y+1, r1	; 0x01
						return;
 dac:	14 c0       	rjmp	.+40     	; 0xdd6 <ProgramMode+0xf2>
					}

				}
				else		// If incorrect, display LOCK
				{
					delay_ms(100);
 dae:	84 e6       	ldi	r24, 0x64	; 100
 db0:	90 e0       	ldi	r25, 0x00	; 0
 db2:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
					displayLock();
 db6:	0e 94 96 01 	call	0x32c	; 0x32c <displayLock>
					attempts = attempts + 1;	// Increment number of attempts by 1
 dba:	89 81       	ldd	r24, Y+1	; 0x01
 dbc:	8f 5f       	subi	r24, 0xFF	; 255
 dbe:	89 83       	std	Y+1, r24	; 0x01
 dc0:	9e cf       	rjmp	.-196    	; 0xcfe <ProgramMode+0x1a>
			}
			else
			{
				// LOCKOUT when number of attempts is more than 3
				
				displayLockout();
 dc2:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <displayLockout>
				return;
 dc6:	07 c0       	rjmp	.+14     	; 0xdd6 <ProgramMode+0xf2>
			}
		}
		else // If any other key is pressed
		{
			delay_ms(100);
 dc8:	84 e6       	ldi	r24, 0x64	; 100
 dca:	90 e0       	ldi	r25, 0x00	; 0
 dcc:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
			displayIncorrect();
 dd0:	0e 94 16 02 	call	0x42c	; 0x42c <displayIncorrect>
		}
	}
 dd4:	94 cf       	rjmp	.-216    	; 0xcfe <ProgramMode+0x1a>
 dd6:	2b 96       	adiw	r28, 0x0b	; 11
 dd8:	0f b6       	in	r0, 0x3f	; 63
 dda:	f8 94       	cli
 ddc:	de bf       	out	0x3e, r29	; 62
 dde:	0f be       	out	0x3f, r0	; 63
 de0:	cd bf       	out	0x3d, r28	; 61
 de2:	df 91       	pop	r29
 de4:	cf 91       	pop	r28
 de6:	08 95       	ret

00000de8 <__udivmodsi4>:
 de8:	a1 e2       	ldi	r26, 0x21	; 33
 dea:	1a 2e       	mov	r1, r26
 dec:	aa 1b       	sub	r26, r26
 dee:	bb 1b       	sub	r27, r27
 df0:	fd 01       	movw	r30, r26
 df2:	0d c0       	rjmp	.+26     	; 0xe0e <__udivmodsi4_ep>

00000df4 <__udivmodsi4_loop>:
 df4:	aa 1f       	adc	r26, r26
 df6:	bb 1f       	adc	r27, r27
 df8:	ee 1f       	adc	r30, r30
 dfa:	ff 1f       	adc	r31, r31
 dfc:	a2 17       	cp	r26, r18
 dfe:	b3 07       	cpc	r27, r19
 e00:	e4 07       	cpc	r30, r20
 e02:	f5 07       	cpc	r31, r21
 e04:	20 f0       	brcs	.+8      	; 0xe0e <__udivmodsi4_ep>
 e06:	a2 1b       	sub	r26, r18
 e08:	b3 0b       	sbc	r27, r19
 e0a:	e4 0b       	sbc	r30, r20
 e0c:	f5 0b       	sbc	r31, r21

00000e0e <__udivmodsi4_ep>:
 e0e:	66 1f       	adc	r22, r22
 e10:	77 1f       	adc	r23, r23
 e12:	88 1f       	adc	r24, r24
 e14:	99 1f       	adc	r25, r25
 e16:	1a 94       	dec	r1
 e18:	69 f7       	brne	.-38     	; 0xdf4 <__udivmodsi4_loop>
 e1a:	60 95       	com	r22
 e1c:	70 95       	com	r23
 e1e:	80 95       	com	r24
 e20:	90 95       	com	r25
 e22:	9b 01       	movw	r18, r22
 e24:	ac 01       	movw	r20, r24
 e26:	bd 01       	movw	r22, r26
 e28:	cf 01       	movw	r24, r30
 e2a:	08 95       	ret

00000e2c <__tablejump2__>:
 e2c:	ee 0f       	add	r30, r30
 e2e:	ff 1f       	adc	r31, r31
 e30:	05 90       	lpm	r0, Z+
 e32:	f4 91       	lpm	r31, Z
 e34:	e0 2d       	mov	r30, r0
 e36:	09 94       	ijmp

00000e38 <_exit>:
 e38:	f8 94       	cli

00000e3a <__stop_program>:
 e3a:	ff cf       	rjmp	.-2      	; 0xe3a <__stop_program>
