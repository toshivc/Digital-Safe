
Digital_Safe_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  000008b8  0000094c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800076  00800076  00000962  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000962  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000994  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  000009d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d07  00000000  00000000  00000af0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008de  00000000  00000000  000017f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a7a  00000000  00000000  000020d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b8  00000000  00000000  00002b50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000504  00000000  00000000  00002e08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004d9  00000000  00000000  0000330c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  000037e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 eb       	ldi	r30, 0xB8	; 184
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e7       	ldi	r26, 0x76	; 118
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 37       	cpi	r26, 0x7A	; 122
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 23 04 	call	0x846	; 0x846 <main>
  8a:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <delay>:


//****************************************************************************************
//Timer with minimum time of 0.01 seconds, max time of 11mins
void delay(uint16_t delayTime)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	00 d0       	rcall	.+0      	; 0x98 <delay+0x6>
  98:	00 d0       	rcall	.+0      	; 0x9a <delay+0x8>
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	9c 83       	std	Y+4, r25	; 0x04
  a0:	8b 83       	std	Y+3, r24	; 0x03
	//12MHz divided by 1024 is 11.718KHz, or clock time of 85.3micro seconds
	//multiplied by 118 gives 0.010069 seconds
	
	TCNT0 = 0x00;		//reset timer to 0
  a2:	82 e5       	ldi	r24, 0x52	; 82
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	fc 01       	movw	r30, r24
  a8:	10 82       	st	Z, r1
	OCR0 = 118;			//set compare register 
  aa:	8c e5       	ldi	r24, 0x5C	; 92
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	26 e7       	ldi	r18, 0x76	; 118
  b0:	fc 01       	movw	r30, r24
  b2:	20 83       	st	Z, r18
	TIFR = (1<<OCF0);	//reset compare flag
  b4:	88 e5       	ldi	r24, 0x58	; 88
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	22 e0       	ldi	r18, 0x02	; 2
  ba:	fc 01       	movw	r30, r24
  bc:	20 83       	st	Z, r18
	
	uint16_t overflowCounter = 0;
  be:	1a 82       	std	Y+2, r1	; 0x02
  c0:	19 82       	std	Y+1, r1	; 0x01
	
	while (1)
	{
		while((TIFR & (1<<OCF0))==0); //while OCF0, overflow flag is 0
  c2:	00 00       	nop
  c4:	88 e5       	ldi	r24, 0x58	; 88
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	fc 01       	movw	r30, r24
  ca:	80 81       	ld	r24, Z
  cc:	88 2f       	mov	r24, r24
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	82 70       	andi	r24, 0x02	; 2
  d2:	99 27       	eor	r25, r25
  d4:	89 2b       	or	r24, r25
  d6:	b1 f3       	breq	.-20     	; 0xc4 <delay+0x32>
		TCNT0 = 0x00;		//reset timer to 0
  d8:	82 e5       	ldi	r24, 0x52	; 82
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	fc 01       	movw	r30, r24
  de:	10 82       	st	Z, r1
		TIFR = (1<<OCF0); //reset compare flag
  e0:	88 e5       	ldi	r24, 0x58	; 88
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	22 e0       	ldi	r18, 0x02	; 2
  e6:	fc 01       	movw	r30, r24
  e8:	20 83       	st	Z, r18
		overflowCounter++;
  ea:	89 81       	ldd	r24, Y+1	; 0x01
  ec:	9a 81       	ldd	r25, Y+2	; 0x02
  ee:	01 96       	adiw	r24, 0x01	; 1
  f0:	9a 83       	std	Y+2, r25	; 0x02
  f2:	89 83       	std	Y+1, r24	; 0x01
		if (overflowCounter >= delayTime)
  f4:	29 81       	ldd	r18, Y+1	; 0x01
  f6:	3a 81       	ldd	r19, Y+2	; 0x02
  f8:	8b 81       	ldd	r24, Y+3	; 0x03
  fa:	9c 81       	ldd	r25, Y+4	; 0x04
  fc:	28 17       	cp	r18, r24
  fe:	39 07       	cpc	r19, r25
 100:	08 f4       	brcc	.+2      	; 0x104 <delay+0x72>
		{
			return;
		}
	}	
 102:	df cf       	rjmp	.-66     	; 0xc2 <delay+0x30>
		TCNT0 = 0x00;		//reset timer to 0
		TIFR = (1<<OCF0); //reset compare flag
		overflowCounter++;
		if (overflowCounter >= delayTime)
		{
			return;
 104:	00 00       	nop
		}
	}	
}
 106:	0f 90       	pop	r0
 108:	0f 90       	pop	r0
 10a:	0f 90       	pop	r0
 10c:	0f 90       	pop	r0
 10e:	df 91       	pop	r29
 110:	cf 91       	pop	r28
 112:	08 95       	ret

00000114 <displayUnlock>:
		PORTB = 0xFF;
		delay(10);
		PORTB = 0x00;
		delay(10);
	}
}
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	00 d0       	rcall	.+0      	; 0x11a <displayUnlock+0x6>
 11a:	00 d0       	rcall	.+0      	; 0x11c <displayUnlock+0x8>
 11c:	cd b7       	in	r28, 0x3d	; 61
 11e:	de b7       	in	r29, 0x3e	; 62
 120:	1a 82       	std	Y+2, r1	; 0x02
 122:	19 82       	std	Y+1, r1	; 0x01
 124:	1b c0       	rjmp	.+54     	; 0x15c <displayUnlock+0x48>
 126:	88 e3       	ldi	r24, 0x38	; 56
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	29 81       	ldd	r18, Y+1	; 0x01
 12c:	3a 81       	ldd	r19, Y+2	; 0x02
 12e:	22 0f       	add	r18, r18
 130:	33 1f       	adc	r19, r19
 132:	a9 01       	movw	r20, r18
 134:	4f 5f       	subi	r20, 0xFF	; 255
 136:	5f 4f       	sbci	r21, 0xFF	; 255
 138:	21 e0       	ldi	r18, 0x01	; 1
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <displayUnlock+0x2e>
 13e:	22 0f       	add	r18, r18
 140:	33 1f       	adc	r19, r19
 142:	4a 95       	dec	r20
 144:	e2 f7       	brpl	.-8      	; 0x13e <displayUnlock+0x2a>
 146:	fc 01       	movw	r30, r24
 148:	20 83       	st	Z, r18
 14a:	8a e0       	ldi	r24, 0x0A	; 10
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 49 00 	call	0x92	; 0x92 <delay>
 152:	89 81       	ldd	r24, Y+1	; 0x01
 154:	9a 81       	ldd	r25, Y+2	; 0x02
 156:	01 96       	adiw	r24, 0x01	; 1
 158:	9a 83       	std	Y+2, r25	; 0x02
 15a:	89 83       	std	Y+1, r24	; 0x01
 15c:	89 81       	ldd	r24, Y+1	; 0x01
 15e:	9a 81       	ldd	r25, Y+2	; 0x02
 160:	04 97       	sbiw	r24, 0x04	; 4
 162:	0c f3       	brlt	.-62     	; 0x126 <displayUnlock+0x12>
 164:	1c 82       	std	Y+4, r1	; 0x04
 166:	1b 82       	std	Y+3, r1	; 0x03
 168:	1c c0       	rjmp	.+56     	; 0x1a2 <displayUnlock+0x8e>
 16a:	88 e3       	ldi	r24, 0x38	; 56
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	2b 81       	ldd	r18, Y+3	; 0x03
 170:	3c 81       	ldd	r19, Y+4	; 0x04
 172:	22 0f       	add	r18, r18
 174:	33 1f       	adc	r19, r19
 176:	47 e0       	ldi	r20, 0x07	; 7
 178:	50 e0       	ldi	r21, 0x00	; 0
 17a:	42 1b       	sub	r20, r18
 17c:	53 0b       	sbc	r21, r19
 17e:	21 e0       	ldi	r18, 0x01	; 1
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	02 c0       	rjmp	.+4      	; 0x188 <displayUnlock+0x74>
 184:	22 0f       	add	r18, r18
 186:	33 1f       	adc	r19, r19
 188:	4a 95       	dec	r20
 18a:	e2 f7       	brpl	.-8      	; 0x184 <displayUnlock+0x70>
 18c:	fc 01       	movw	r30, r24
 18e:	20 83       	st	Z, r18
 190:	8a e0       	ldi	r24, 0x0A	; 10
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 49 00 	call	0x92	; 0x92 <delay>
 198:	8b 81       	ldd	r24, Y+3	; 0x03
 19a:	9c 81       	ldd	r25, Y+4	; 0x04
 19c:	01 96       	adiw	r24, 0x01	; 1
 19e:	9c 83       	std	Y+4, r25	; 0x04
 1a0:	8b 83       	std	Y+3, r24	; 0x03
 1a2:	8b 81       	ldd	r24, Y+3	; 0x03
 1a4:	9c 81       	ldd	r25, Y+4	; 0x04
 1a6:	04 97       	sbiw	r24, 0x04	; 4
 1a8:	04 f3       	brlt	.-64     	; 0x16a <displayUnlock+0x56>
 1aa:	88 e3       	ldi	r24, 0x38	; 56
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	fc 01       	movw	r30, r24
 1b0:	10 82       	st	Z, r1
 1b2:	00 00       	nop
 1b4:	0f 90       	pop	r0
 1b6:	0f 90       	pop	r0
 1b8:	0f 90       	pop	r0
 1ba:	0f 90       	pop	r0
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	08 95       	ret

000001c2 <displayLock>:
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	00 d0       	rcall	.+0      	; 0x1c8 <displayLock+0x6>
 1c8:	00 d0       	rcall	.+0      	; 0x1ca <displayLock+0x8>
 1ca:	cd b7       	in	r28, 0x3d	; 61
 1cc:	de b7       	in	r29, 0x3e	; 62
 1ce:	1a 82       	std	Y+2, r1	; 0x02
 1d0:	19 82       	std	Y+1, r1	; 0x01
 1d2:	19 c0       	rjmp	.+50     	; 0x206 <displayLock+0x44>
 1d4:	88 e3       	ldi	r24, 0x38	; 56
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	29 81       	ldd	r18, Y+1	; 0x01
 1da:	3a 81       	ldd	r19, Y+2	; 0x02
 1dc:	a9 01       	movw	r20, r18
 1de:	44 0f       	add	r20, r20
 1e0:	55 1f       	adc	r21, r21
 1e2:	21 e0       	ldi	r18, 0x01	; 1
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <displayLock+0x2a>
 1e8:	22 0f       	add	r18, r18
 1ea:	33 1f       	adc	r19, r19
 1ec:	4a 95       	dec	r20
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <displayLock+0x26>
 1f0:	fc 01       	movw	r30, r24
 1f2:	20 83       	st	Z, r18
 1f4:	8a e0       	ldi	r24, 0x0A	; 10
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 49 00 	call	0x92	; 0x92 <delay>
 1fc:	89 81       	ldd	r24, Y+1	; 0x01
 1fe:	9a 81       	ldd	r25, Y+2	; 0x02
 200:	01 96       	adiw	r24, 0x01	; 1
 202:	9a 83       	std	Y+2, r25	; 0x02
 204:	89 83       	std	Y+1, r24	; 0x01
 206:	89 81       	ldd	r24, Y+1	; 0x01
 208:	9a 81       	ldd	r25, Y+2	; 0x02
 20a:	04 97       	sbiw	r24, 0x04	; 4
 20c:	1c f3       	brlt	.-58     	; 0x1d4 <displayLock+0x12>
 20e:	1c 82       	std	Y+4, r1	; 0x04
 210:	1b 82       	std	Y+3, r1	; 0x03
 212:	1f c0       	rjmp	.+62     	; 0x252 <displayLock+0x90>
 214:	88 e3       	ldi	r24, 0x38	; 56
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	44 e0       	ldi	r20, 0x04	; 4
 21a:	50 e0       	ldi	r21, 0x00	; 0
 21c:	2b 81       	ldd	r18, Y+3	; 0x03
 21e:	3c 81       	ldd	r19, Y+4	; 0x04
 220:	ba 01       	movw	r22, r20
 222:	62 1b       	sub	r22, r18
 224:	73 0b       	sbc	r23, r19
 226:	9b 01       	movw	r18, r22
 228:	a9 01       	movw	r20, r18
 22a:	44 0f       	add	r20, r20
 22c:	55 1f       	adc	r21, r21
 22e:	21 e0       	ldi	r18, 0x01	; 1
 230:	30 e0       	ldi	r19, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <displayLock+0x76>
 234:	22 0f       	add	r18, r18
 236:	33 1f       	adc	r19, r19
 238:	4a 95       	dec	r20
 23a:	e2 f7       	brpl	.-8      	; 0x234 <displayLock+0x72>
 23c:	fc 01       	movw	r30, r24
 23e:	20 83       	st	Z, r18
 240:	8a e0       	ldi	r24, 0x0A	; 10
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 49 00 	call	0x92	; 0x92 <delay>
 248:	8b 81       	ldd	r24, Y+3	; 0x03
 24a:	9c 81       	ldd	r25, Y+4	; 0x04
 24c:	01 96       	adiw	r24, 0x01	; 1
 24e:	9c 83       	std	Y+4, r25	; 0x04
 250:	8b 83       	std	Y+3, r24	; 0x03
 252:	8b 81       	ldd	r24, Y+3	; 0x03
 254:	9c 81       	ldd	r25, Y+4	; 0x04
 256:	04 97       	sbiw	r24, 0x04	; 4
 258:	ec f2       	brlt	.-70     	; 0x214 <displayLock+0x52>
 25a:	88 e3       	ldi	r24, 0x38	; 56
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	fc 01       	movw	r30, r24
 260:	10 82       	st	Z, r1
 262:	00 00       	nop
 264:	0f 90       	pop	r0
 266:	0f 90       	pop	r0
 268:	0f 90       	pop	r0
 26a:	0f 90       	pop	r0
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	08 95       	ret

00000272 <displayIncorrect>:
//****************************************************************************************

//****************************************************************************************
//Programming mode LED sequence
void displayIncorrect(void)
{
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	00 d0       	rcall	.+0      	; 0x278 <displayIncorrect+0x6>
 278:	cd b7       	in	r28, 0x3d	; 61
 27a:	de b7       	in	r29, 0x3e	; 62
	for (int i = 0; i <4; i++)
 27c:	1a 82       	std	Y+2, r1	; 0x02
 27e:	19 82       	std	Y+1, r1	; 0x01
 280:	16 c0       	rjmp	.+44     	; 0x2ae <displayIncorrect+0x3c>
	{
		PORTB = 0x55;
 282:	88 e3       	ldi	r24, 0x38	; 56
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	25 e5       	ldi	r18, 0x55	; 85
 288:	fc 01       	movw	r30, r24
 28a:	20 83       	st	Z, r18
		delay(8);
 28c:	88 e0       	ldi	r24, 0x08	; 8
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	0e 94 49 00 	call	0x92	; 0x92 <delay>
		PORTB = 0x00;
 294:	88 e3       	ldi	r24, 0x38	; 56
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	fc 01       	movw	r30, r24
 29a:	10 82       	st	Z, r1
		delay(8);
 29c:	88 e0       	ldi	r24, 0x08	; 8
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	0e 94 49 00 	call	0x92	; 0x92 <delay>

//****************************************************************************************
//Programming mode LED sequence
void displayIncorrect(void)
{
	for (int i = 0; i <4; i++)
 2a4:	89 81       	ldd	r24, Y+1	; 0x01
 2a6:	9a 81       	ldd	r25, Y+2	; 0x02
 2a8:	01 96       	adiw	r24, 0x01	; 1
 2aa:	9a 83       	std	Y+2, r25	; 0x02
 2ac:	89 83       	std	Y+1, r24	; 0x01
 2ae:	89 81       	ldd	r24, Y+1	; 0x01
 2b0:	9a 81       	ldd	r25, Y+2	; 0x02
 2b2:	04 97       	sbiw	r24, 0x04	; 4
 2b4:	34 f3       	brlt	.-52     	; 0x282 <displayIncorrect+0x10>
		PORTB = 0x55;
		delay(8);
		PORTB = 0x00;
		delay(8);
	}
}
 2b6:	00 00       	nop
 2b8:	0f 90       	pop	r0
 2ba:	0f 90       	pop	r0
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	08 95       	ret

000002c2 <write_EEPROM>:
//Takes in the address of the location to write to, and the data to write into that address
//returns nothing(error code flag set?)

//do we need to use ware leveling(using multiple addresses so as not to damage EEPROM)
void write_EEPROM(uint8_t WriteData, uint16_t WriteAddress)
{
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
 2c6:	00 d0       	rcall	.+0      	; 0x2c8 <write_EEPROM+0x6>
 2c8:	1f 92       	push	r1
 2ca:	cd b7       	in	r28, 0x3d	; 61
 2cc:	de b7       	in	r29, 0x3e	; 62
 2ce:	89 83       	std	Y+1, r24	; 0x01
 2d0:	7b 83       	std	Y+3, r23	; 0x03
 2d2:	6a 83       	std	Y+2, r22	; 0x02
//should disable global interrupts here if we use them
	
	//check if address is valid
	if(WriteAddress > 0x400)	//only 2^10 = 1024 addresses
 2d4:	8a 81       	ldd	r24, Y+2	; 0x02
 2d6:	9b 81       	ldd	r25, Y+3	; 0x03
 2d8:	81 30       	cpi	r24, 0x01	; 1
 2da:	94 40       	sbci	r25, 0x04	; 4
 2dc:	20 f0       	brcs	.+8      	; 0x2e6 <write_EEPROM+0x24>
		{
			errorFlag =3;
 2de:	83 e0       	ldi	r24, 0x03	; 3
 2e0:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
			return;			//Set some debug flag?
 2e4:	1a c0       	rjmp	.+52     	; 0x31a <write_EEPROM+0x58>
		}
	
	
	//Wait till previous write operation is completed(i.e. wait till EEWE becomes zero).
	while(EECR & (1 << EEWE));	//b 0000 0010
 2e6:	00 00       	nop
 2e8:	8c e3       	ldi	r24, 0x3C	; 60
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	fc 01       	movw	r30, r24
 2ee:	80 81       	ld	r24, Z
 2f0:	88 2f       	mov	r24, r24
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	82 70       	andi	r24, 0x02	; 2
 2f6:	99 27       	eor	r25, r25
 2f8:	89 2b       	or	r24, r25
 2fa:	b1 f7       	brne	.-20     	; 0x2e8 <write_EEPROM+0x26>
	//Wait until SPMEN in SPMCR becomes zero		Dont think this step is necessary
	// only relevant if the software contains a boot loader allowing the CPU to program the Flash. If the Flash is never being updated by the CPU, can be omitted

	//Load the EEPROM address into EEAR at which the data has to be stored.
	//high and low registers, high register will always be 0 for us.
	EEAR = WriteAddress;
 2fc:	8e e3       	ldi	r24, 0x3E	; 62
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	2a 81       	ldd	r18, Y+2	; 0x02
 302:	3b 81       	ldd	r19, Y+3	; 0x03
 304:	fc 01       	movw	r30, r24
 306:	31 83       	std	Z+1, r19	; 0x01
 308:	20 83       	st	Z, r18

	//Load the data into EEDR which has to be stored in EEPROM.
	EEDR = WriteData;
 30a:	8d e3       	ldi	r24, 0x3D	; 61
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	29 81       	ldd	r18, Y+1	; 0x01
 310:	fc 01       	movw	r30, r24
 312:	20 83       	st	Z, r18

	//Set the EEMWE (EEPROM Master Write Enable).
	asm("SBI 0x1C, 0x02");
 314:	e2 9a       	sbi	0x1c, 2	; 28
	//set EEWE in EECR to 0			Dont think this step is necessary. Why is it listed?

	//Within four clock cycles after 4th step, set EEWE(Eeprom Write Enable) to 1 to trigger the EEPROM Write Operation
	asm("SBI 0x1C, 0x01");
 316:	e1 9a       	sbi	0x1c, 1	; 28
return;
 318:	00 00       	nop
}
 31a:	0f 90       	pop	r0
 31c:	0f 90       	pop	r0
 31e:	0f 90       	pop	r0
 320:	df 91       	pop	r29
 322:	cf 91       	pop	r28
 324:	08 95       	ret

00000326 <read_EEPROM>:
//****************************************************************************************

//****************************************************************************************
//Read EEPROM
uint8_t read_EEPROM(uint16_t readAddress)
{
 326:	cf 93       	push	r28
 328:	df 93       	push	r29
 32a:	00 d0       	rcall	.+0      	; 0x32c <read_EEPROM+0x6>
 32c:	cd b7       	in	r28, 0x3d	; 61
 32e:	de b7       	in	r29, 0x3e	; 62
 330:	9a 83       	std	Y+2, r25	; 0x02
 332:	89 83       	std	Y+1, r24	; 0x01
	//check if address is valid
	if(readAddress > 0x400)	//only 2^10 = 1024 addresses
 334:	89 81       	ldd	r24, Y+1	; 0x01
 336:	9a 81       	ldd	r25, Y+2	; 0x02
 338:	81 30       	cpi	r24, 0x01	; 1
 33a:	94 40       	sbci	r25, 0x04	; 4
 33c:	10 f0       	brcs	.+4      	; 0x342 <read_EEPROM+0x1c>
	{
		return 0;			//Set some debug flag?
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	1f c0       	rjmp	.+62     	; 0x380 <read_EEPROM+0x5a>
	}
	
	//WAit for completion of previous Write operation.
	while(EECR & (1 << EEWE));
 342:	00 00       	nop
 344:	8c e3       	ldi	r24, 0x3C	; 60
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	fc 01       	movw	r30, r24
 34a:	80 81       	ld	r24, Z
 34c:	88 2f       	mov	r24, r24
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	82 70       	andi	r24, 0x02	; 2
 352:	99 27       	eor	r25, r25
 354:	89 2b       	or	r24, r25
 356:	b1 f7       	brne	.-20     	; 0x344 <read_EEPROM+0x1e>

	//Load the EEPROM address into EEAR from where the data needs to be read.
	EEAR = readAddress;
 358:	8e e3       	ldi	r24, 0x3E	; 62
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	29 81       	ldd	r18, Y+1	; 0x01
 35e:	3a 81       	ldd	r19, Y+2	; 0x02
 360:	fc 01       	movw	r30, r24
 362:	31 83       	std	Z+1, r19	; 0x01
 364:	20 83       	st	Z, r18

	//Trigger the EEPROM read operation by setting EERE (EEPROM Read Enable).
	EECR |= (1 <<EERE);
 366:	8c e3       	ldi	r24, 0x3C	; 60
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	2c e3       	ldi	r18, 0x3C	; 60
 36c:	30 e0       	ldi	r19, 0x00	; 0
 36e:	f9 01       	movw	r30, r18
 370:	20 81       	ld	r18, Z
 372:	21 60       	ori	r18, 0x01	; 1
 374:	fc 01       	movw	r30, r24
 376:	20 83       	st	Z, r18

	//Wait for some time (about 1ms) and collect the read data from EEDR.
	return EEDR;
 378:	8d e3       	ldi	r24, 0x3D	; 61
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	fc 01       	movw	r30, r24
 37e:	80 81       	ld	r24, Z
}
 380:	0f 90       	pop	r0
 382:	0f 90       	pop	r0
 384:	df 91       	pop	r29
 386:	cf 91       	pop	r28
 388:	08 95       	ret

0000038a <storePasscode>:
//****************************************************************************************
//Store Passcode stores 4 bytes of passcode into memory location defined by the user.
//32 bit passcode must be divided into 4 bytes
//each byte is stored in location 0x00XY, where X is the hex value of the user, and Y is which byte is being stored
void storePasscode (unsigned long int Passcode, uint8_t user)
{
 38a:	cf 93       	push	r28
 38c:	df 93       	push	r29
 38e:	cd b7       	in	r28, 0x3d	; 61
 390:	de b7       	in	r29, 0x3e	; 62
 392:	63 97       	sbiw	r28, 0x13	; 19
 394:	0f b6       	in	r0, 0x3f	; 63
 396:	f8 94       	cli
 398:	de bf       	out	0x3e, r29	; 62
 39a:	0f be       	out	0x3f, r0	; 63
 39c:	cd bf       	out	0x3d, r28	; 61
 39e:	6f 87       	std	Y+15, r22	; 0x0f
 3a0:	78 8b       	std	Y+16, r23	; 0x10
 3a2:	89 8b       	std	Y+17, r24	; 0x11
 3a4:	9a 8b       	std	Y+18, r25	; 0x12
 3a6:	4b 8b       	std	Y+19, r20	; 0x13
	//check if user input is valid
	if (!isUser(user))
 3a8:	8b 89       	ldd	r24, Y+19	; 0x13
 3aa:	0e 94 fe 03 	call	0x7fc	; 0x7fc <isUser>
 3ae:	88 23       	and	r24, r24
 3b0:	21 f4       	brne	.+8      	; 0x3ba <storePasscode+0x30>
	{
		//set some debug flag
		errorFlag = 2;
 3b2:	82 e0       	ldi	r24, 0x02	; 2
 3b4:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
		return;
 3b8:	67 c0       	rjmp	.+206    	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
	
	//store each byte of passcode
	uint8_t passcodeByte[4];
	uint16_t passcodeAddress[4];
	
	for(int i = 0; i<4; i++)
 3ba:	1a 82       	std	Y+2, r1	; 0x02
 3bc:	19 82       	std	Y+1, r1	; 0x01
 3be:	5e c0       	rjmp	.+188    	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
	{
		//store each byte of passcode into an array
		passcodeByte[i] = Passcode>>(8*i);
 3c0:	89 81       	ldd	r24, Y+1	; 0x01
 3c2:	9a 81       	ldd	r25, Y+2	; 0x02
 3c4:	9c 01       	movw	r18, r24
 3c6:	22 0f       	add	r18, r18
 3c8:	33 1f       	adc	r19, r19
 3ca:	22 0f       	add	r18, r18
 3cc:	33 1f       	adc	r19, r19
 3ce:	22 0f       	add	r18, r18
 3d0:	33 1f       	adc	r19, r19
 3d2:	8f 85       	ldd	r24, Y+15	; 0x0f
 3d4:	98 89       	ldd	r25, Y+16	; 0x10
 3d6:	a9 89       	ldd	r26, Y+17	; 0x11
 3d8:	ba 89       	ldd	r27, Y+18	; 0x12
 3da:	04 c0       	rjmp	.+8      	; 0x3e4 <storePasscode+0x5a>
 3dc:	b6 95       	lsr	r27
 3de:	a7 95       	ror	r26
 3e0:	97 95       	ror	r25
 3e2:	87 95       	ror	r24
 3e4:	2a 95       	dec	r18
 3e6:	d2 f7       	brpl	.-12     	; 0x3dc <storePasscode+0x52>
 3e8:	48 2f       	mov	r20, r24
 3ea:	9e 01       	movw	r18, r28
 3ec:	2d 5f       	subi	r18, 0xFD	; 253
 3ee:	3f 4f       	sbci	r19, 0xFF	; 255
 3f0:	89 81       	ldd	r24, Y+1	; 0x01
 3f2:	9a 81       	ldd	r25, Y+2	; 0x02
 3f4:	82 0f       	add	r24, r18
 3f6:	93 1f       	adc	r25, r19
 3f8:	fc 01       	movw	r30, r24
 3fa:	40 83       	st	Z, r20
		//define the location to store the passcode in EEPROM
		passcodeAddress[i]= (user<<4)|(4-i);
 3fc:	8b 89       	ldd	r24, Y+19	; 0x13
 3fe:	88 2f       	mov	r24, r24
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	9c 01       	movw	r18, r24
 404:	22 95       	swap	r18
 406:	32 95       	swap	r19
 408:	30 7f       	andi	r19, 0xF0	; 240
 40a:	32 27       	eor	r19, r18
 40c:	20 7f       	andi	r18, 0xF0	; 240
 40e:	32 27       	eor	r19, r18
 410:	44 e0       	ldi	r20, 0x04	; 4
 412:	50 e0       	ldi	r21, 0x00	; 0
 414:	89 81       	ldd	r24, Y+1	; 0x01
 416:	9a 81       	ldd	r25, Y+2	; 0x02
 418:	ba 01       	movw	r22, r20
 41a:	68 1b       	sub	r22, r24
 41c:	79 0b       	sbc	r23, r25
 41e:	cb 01       	movw	r24, r22
 420:	82 2b       	or	r24, r18
 422:	93 2b       	or	r25, r19
 424:	ac 01       	movw	r20, r24
 426:	89 81       	ldd	r24, Y+1	; 0x01
 428:	9a 81       	ldd	r25, Y+2	; 0x02
 42a:	88 0f       	add	r24, r24
 42c:	99 1f       	adc	r25, r25
 42e:	9e 01       	movw	r18, r28
 430:	2f 5f       	subi	r18, 0xFF	; 255
 432:	3f 4f       	sbci	r19, 0xFF	; 255
 434:	82 0f       	add	r24, r18
 436:	93 1f       	adc	r25, r19
 438:	06 96       	adiw	r24, 0x06	; 6
 43a:	fc 01       	movw	r30, r24
 43c:	51 83       	std	Z+1, r21	; 0x01
 43e:	40 83       	st	Z, r20
		//write the byte to the location in EEPROM
		write_EEPROM(passcodeByte[i],passcodeAddress[i]);
 440:	89 81       	ldd	r24, Y+1	; 0x01
 442:	9a 81       	ldd	r25, Y+2	; 0x02
 444:	88 0f       	add	r24, r24
 446:	99 1f       	adc	r25, r25
 448:	9e 01       	movw	r18, r28
 44a:	2f 5f       	subi	r18, 0xFF	; 255
 44c:	3f 4f       	sbci	r19, 0xFF	; 255
 44e:	82 0f       	add	r24, r18
 450:	93 1f       	adc	r25, r19
 452:	06 96       	adiw	r24, 0x06	; 6
 454:	fc 01       	movw	r30, r24
 456:	40 81       	ld	r20, Z
 458:	51 81       	ldd	r21, Z+1	; 0x01
 45a:	9e 01       	movw	r18, r28
 45c:	2d 5f       	subi	r18, 0xFD	; 253
 45e:	3f 4f       	sbci	r19, 0xFF	; 255
 460:	89 81       	ldd	r24, Y+1	; 0x01
 462:	9a 81       	ldd	r25, Y+2	; 0x02
 464:	82 0f       	add	r24, r18
 466:	93 1f       	adc	r25, r19
 468:	fc 01       	movw	r30, r24
 46a:	80 81       	ld	r24, Z
 46c:	ba 01       	movw	r22, r20
 46e:	0e 94 61 01 	call	0x2c2	; 0x2c2 <write_EEPROM>
	
	//store each byte of passcode
	uint8_t passcodeByte[4];
	uint16_t passcodeAddress[4];
	
	for(int i = 0; i<4; i++)
 472:	89 81       	ldd	r24, Y+1	; 0x01
 474:	9a 81       	ldd	r25, Y+2	; 0x02
 476:	01 96       	adiw	r24, 0x01	; 1
 478:	9a 83       	std	Y+2, r25	; 0x02
 47a:	89 83       	std	Y+1, r24	; 0x01
 47c:	89 81       	ldd	r24, Y+1	; 0x01
 47e:	9a 81       	ldd	r25, Y+2	; 0x02
 480:	04 97       	sbiw	r24, 0x04	; 4
 482:	0c f4       	brge	.+2      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 484:	9d cf       	rjmp	.-198    	; 0x3c0 <storePasscode+0x36>
		//define the location to store the passcode in EEPROM
		passcodeAddress[i]= (user<<4)|(4-i);
		//write the byte to the location in EEPROM
		write_EEPROM(passcodeByte[i],passcodeAddress[i]);
	}
	return;
 486:	00 00       	nop
}
 488:	63 96       	adiw	r28, 0x13	; 19
 48a:	0f b6       	in	r0, 0x3f	; 63
 48c:	f8 94       	cli
 48e:	de bf       	out	0x3e, r29	; 62
 490:	0f be       	out	0x3f, r0	; 63
 492:	cd bf       	out	0x3d, r28	; 61
 494:	df 91       	pop	r29
 496:	cf 91       	pop	r28
 498:	08 95       	ret

0000049a <RecallPasscode>:
//****************************************************************************************

//****************************************************************************************
//Reads the passcode from EEPROM and stores it into a long int
unsigned long int RecallPasscode(uint8_t user)
{
 49a:	cf 93       	push	r28
 49c:	df 93       	push	r29
 49e:	cd b7       	in	r28, 0x3d	; 61
 4a0:	de b7       	in	r29, 0x3e	; 62
 4a2:	2b 97       	sbiw	r28, 0x0b	; 11
 4a4:	0f b6       	in	r0, 0x3f	; 63
 4a6:	f8 94       	cli
 4a8:	de bf       	out	0x3e, r29	; 62
 4aa:	0f be       	out	0x3f, r0	; 63
 4ac:	cd bf       	out	0x3d, r28	; 61
 4ae:	8b 87       	std	Y+11, r24	; 0x0b
unsigned long int tempValue = 0;
 4b0:	1f 82       	std	Y+7, r1	; 0x07
 4b2:	18 86       	std	Y+8, r1	; 0x08
 4b4:	19 86       	std	Y+9, r1	; 0x09
 4b6:	1a 86       	std	Y+10, r1	; 0x0a
unsigned long int passcode = 0;	
 4b8:	19 82       	std	Y+1, r1	; 0x01
 4ba:	1a 82       	std	Y+2, r1	; 0x02
 4bc:	1b 82       	std	Y+3, r1	; 0x03
 4be:	1c 82       	std	Y+4, r1	; 0x04
	for (int i = 0; i<4; i++)
 4c0:	1e 82       	std	Y+6, r1	; 0x06
 4c2:	1d 82       	std	Y+5, r1	; 0x05
 4c4:	43 c0       	rjmp	.+134    	; 0x54c <RecallPasscode+0xb2>
	{
		//read the EEPROM value at location of user from LSB to MSB
		tempValue = read_EEPROM((user<<4)|(4-i));
 4c6:	8b 85       	ldd	r24, Y+11	; 0x0b
 4c8:	88 2f       	mov	r24, r24
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	9c 01       	movw	r18, r24
 4ce:	22 95       	swap	r18
 4d0:	32 95       	swap	r19
 4d2:	30 7f       	andi	r19, 0xF0	; 240
 4d4:	32 27       	eor	r19, r18
 4d6:	20 7f       	andi	r18, 0xF0	; 240
 4d8:	32 27       	eor	r19, r18
 4da:	44 e0       	ldi	r20, 0x04	; 4
 4dc:	50 e0       	ldi	r21, 0x00	; 0
 4de:	8d 81       	ldd	r24, Y+5	; 0x05
 4e0:	9e 81       	ldd	r25, Y+6	; 0x06
 4e2:	ba 01       	movw	r22, r20
 4e4:	68 1b       	sub	r22, r24
 4e6:	79 0b       	sbc	r23, r25
 4e8:	cb 01       	movw	r24, r22
 4ea:	82 2b       	or	r24, r18
 4ec:	93 2b       	or	r25, r19
 4ee:	0e 94 93 01 	call	0x326	; 0x326 <read_EEPROM>
 4f2:	88 2f       	mov	r24, r24
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	a0 e0       	ldi	r26, 0x00	; 0
 4f8:	b0 e0       	ldi	r27, 0x00	; 0
 4fa:	8f 83       	std	Y+7, r24	; 0x07
 4fc:	98 87       	std	Y+8, r25	; 0x08
 4fe:	a9 87       	std	Y+9, r26	; 0x09
 500:	ba 87       	std	Y+10, r27	; 0x0a
		passcode |= tempValue<<(8*i);			//add each byte together to form a 4 byte passcode
 502:	8d 81       	ldd	r24, Y+5	; 0x05
 504:	9e 81       	ldd	r25, Y+6	; 0x06
 506:	9c 01       	movw	r18, r24
 508:	22 0f       	add	r18, r18
 50a:	33 1f       	adc	r19, r19
 50c:	22 0f       	add	r18, r18
 50e:	33 1f       	adc	r19, r19
 510:	22 0f       	add	r18, r18
 512:	33 1f       	adc	r19, r19
 514:	8f 81       	ldd	r24, Y+7	; 0x07
 516:	98 85       	ldd	r25, Y+8	; 0x08
 518:	a9 85       	ldd	r26, Y+9	; 0x09
 51a:	ba 85       	ldd	r27, Y+10	; 0x0a
 51c:	04 c0       	rjmp	.+8      	; 0x526 <RecallPasscode+0x8c>
 51e:	88 0f       	add	r24, r24
 520:	99 1f       	adc	r25, r25
 522:	aa 1f       	adc	r26, r26
 524:	bb 1f       	adc	r27, r27
 526:	2a 95       	dec	r18
 528:	d2 f7       	brpl	.-12     	; 0x51e <RecallPasscode+0x84>
 52a:	29 81       	ldd	r18, Y+1	; 0x01
 52c:	3a 81       	ldd	r19, Y+2	; 0x02
 52e:	4b 81       	ldd	r20, Y+3	; 0x03
 530:	5c 81       	ldd	r21, Y+4	; 0x04
 532:	82 2b       	or	r24, r18
 534:	93 2b       	or	r25, r19
 536:	a4 2b       	or	r26, r20
 538:	b5 2b       	or	r27, r21
 53a:	89 83       	std	Y+1, r24	; 0x01
 53c:	9a 83       	std	Y+2, r25	; 0x02
 53e:	ab 83       	std	Y+3, r26	; 0x03
 540:	bc 83       	std	Y+4, r27	; 0x04
//Reads the passcode from EEPROM and stores it into a long int
unsigned long int RecallPasscode(uint8_t user)
{
unsigned long int tempValue = 0;
unsigned long int passcode = 0;	
	for (int i = 0; i<4; i++)
 542:	8d 81       	ldd	r24, Y+5	; 0x05
 544:	9e 81       	ldd	r25, Y+6	; 0x06
 546:	01 96       	adiw	r24, 0x01	; 1
 548:	9e 83       	std	Y+6, r25	; 0x06
 54a:	8d 83       	std	Y+5, r24	; 0x05
 54c:	8d 81       	ldd	r24, Y+5	; 0x05
 54e:	9e 81       	ldd	r25, Y+6	; 0x06
 550:	04 97       	sbiw	r24, 0x04	; 4
 552:	0c f4       	brge	.+2      	; 0x556 <RecallPasscode+0xbc>
 554:	b8 cf       	rjmp	.-144    	; 0x4c6 <RecallPasscode+0x2c>
	{
		//read the EEPROM value at location of user from LSB to MSB
		tempValue = read_EEPROM((user<<4)|(4-i));
		passcode |= tempValue<<(8*i);			//add each byte together to form a 4 byte passcode
	}
	return passcode;
 556:	89 81       	ldd	r24, Y+1	; 0x01
 558:	9a 81       	ldd	r25, Y+2	; 0x02
 55a:	ab 81       	ldd	r26, Y+3	; 0x03
 55c:	bc 81       	ldd	r27, Y+4	; 0x04
}
 55e:	bc 01       	movw	r22, r24
 560:	cd 01       	movw	r24, r26
 562:	2b 96       	adiw	r28, 0x0b	; 11
 564:	0f b6       	in	r0, 0x3f	; 63
 566:	f8 94       	cli
 568:	de bf       	out	0x3e, r29	; 62
 56a:	0f be       	out	0x3f, r0	; 63
 56c:	cd bf       	out	0x3d, r28	; 61
 56e:	df 91       	pop	r29
 570:	cf 91       	pop	r28
 572:	08 95       	ret

00000574 <initLEDs>:
// START FUNCTIONS

//****************************************************************************************
//	Initialise output LEDs - PORTB
void initLEDs(void)
{
 574:	cf 93       	push	r28
 576:	df 93       	push	r29
 578:	cd b7       	in	r28, 0x3d	; 61
 57a:	de b7       	in	r29, 0x3e	; 62
	DDRB = 0xFF;		// Set all LEDs to outputs
 57c:	87 e3       	ldi	r24, 0x37	; 55
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	2f ef       	ldi	r18, 0xFF	; 255
 582:	fc 01       	movw	r30, r24
 584:	20 83       	st	Z, r18
	PORTB = 0x00;		// Turn all LEDs off
 586:	88 e3       	ldi	r24, 0x38	; 56
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	fc 01       	movw	r30, r24
 58c:	10 82       	st	Z, r1
}
 58e:	00 00       	nop
 590:	df 91       	pop	r29
 592:	cf 91       	pop	r28
 594:	08 95       	ret

00000596 <initKeypad>:


//****************************************************************************************
//	Initialise keypad - PORTC
void initKeypad(void)
{
 596:	cf 93       	push	r28
 598:	df 93       	push	r29
 59a:	cd b7       	in	r28, 0x3d	; 61
 59c:	de b7       	in	r29, 0x3e	; 62
	if(keypad3x4 == 1)
 59e:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <keypad3x4>
 5a2:	81 30       	cpi	r24, 0x01	; 1
 5a4:	99 f4       	brne	.+38     	; 0x5cc <initKeypad+0x36>
	{
		DDRC = 0x95;		// Set rows to inputs and columns to outputs
 5a6:	84 e3       	ldi	r24, 0x34	; 52
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	25 e9       	ldi	r18, 0x95	; 149
 5ac:	fc 01       	movw	r30, r24
 5ae:	20 83       	st	Z, r18
		PORTC = 0x6A;		// Enable the pull-up resistors on the row inputs
 5b0:	85 e3       	ldi	r24, 0x35	; 53
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	2a e6       	ldi	r18, 0x6A	; 106
 5b6:	fc 01       	movw	r30, r24
 5b8:	20 83       	st	Z, r18
		PORTC = 0xFF;		// Set the columns to all on (idle state) & ensure pull-ups are still enabled
 5ba:	85 e3       	ldi	r24, 0x35	; 53
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	2f ef       	ldi	r18, 0xFF	; 255
 5c0:	fc 01       	movw	r30, r24
 5c2:	20 83       	st	Z, r18
		
		AmountOfColumns =3;
 5c4:	83 e0       	ldi	r24, 0x03	; 3
 5c6:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <AmountOfColumns>
		PORTC = 0xFF;		// Set the columns to all on (idle state) & ensure pull-ups are still enabled
		
		AmountOfColumns =4;
	}

}
 5ca:	12 c0       	rjmp	.+36     	; 0x5f0 <initKeypad+0x5a>
		
		AmountOfColumns =3;
	}
	else
	{
		DDRC = 0xF0;		// Set rows to inputs and columns to outputs
 5cc:	84 e3       	ldi	r24, 0x34	; 52
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	20 ef       	ldi	r18, 0xF0	; 240
 5d2:	fc 01       	movw	r30, r24
 5d4:	20 83       	st	Z, r18
		PORTC = 0x0F;		// Enable the pull-up resistors on the row inputs
 5d6:	85 e3       	ldi	r24, 0x35	; 53
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	2f e0       	ldi	r18, 0x0F	; 15
 5dc:	fc 01       	movw	r30, r24
 5de:	20 83       	st	Z, r18
		PORTC = 0xFF;		// Set the columns to all on (idle state) & ensure pull-ups are still enabled
 5e0:	85 e3       	ldi	r24, 0x35	; 53
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	2f ef       	ldi	r18, 0xFF	; 255
 5e6:	fc 01       	movw	r30, r24
 5e8:	20 83       	st	Z, r18
		
		AmountOfColumns =4;
 5ea:	84 e0       	ldi	r24, 0x04	; 4
 5ec:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <AmountOfColumns>
	}

}
 5f0:	00 00       	nop
 5f2:	df 91       	pop	r29
 5f4:	cf 91       	pop	r28
 5f6:	08 95       	ret

000005f8 <initTimers>:


//****************************************************************************************
//Initialise Timers
void initTimers(void)
{
 5f8:	cf 93       	push	r28
 5fa:	df 93       	push	r29
 5fc:	cd b7       	in	r28, 0x3d	; 61
 5fe:	de b7       	in	r29, 0x3e	; 62
	//set timer counter to 0
	TCNT0 = 0x00;
 600:	82 e5       	ldi	r24, 0x52	; 82
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	fc 01       	movw	r30, r24
 606:	10 82       	st	Z, r1
	//set clock prescaler to divide by 1024
	TCCR0 |= (1<<CS00) | (0<<CS01) | (1<<CS02);
 608:	83 e5       	ldi	r24, 0x53	; 83
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	23 e5       	ldi	r18, 0x53	; 83
 60e:	30 e0       	ldi	r19, 0x00	; 0
 610:	f9 01       	movw	r30, r18
 612:	20 81       	ld	r18, Z
 614:	25 60       	ori	r18, 0x05	; 5
 616:	fc 01       	movw	r30, r24
 618:	20 83       	st	Z, r18
}
 61a:	00 00       	nop
 61c:	df 91       	pop	r29
 61e:	cf 91       	pop	r28
 620:	08 95       	ret

00000622 <ReadOne>:
// START FUNCTIONS

//**************************************************************************************************************************************************
// Function that checks if one key has been pressed 
unsigned char ReadOne() 
{
 622:	cf 93       	push	r28
 624:	df 93       	push	r29
 626:	00 d0       	rcall	.+0      	; 0x628 <ReadOne+0x6>
 628:	cd b7       	in	r28, 0x3d	; 61
 62a:	de b7       	in	r29, 0x3e	; 62
	// Set KeyPressed to 0
	KeyPressed = 0x00;
 62c:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <KeyPressed>
	
	while(1)	//can get rid of while loop, it just keeps reading until a key is pressed instead of only reading once when its called
	{

		// Scanning column: write the column mask to port C
		for (uint8_t j=0; j<AmountOfColumns; j++)
 630:	19 82       	std	Y+1, r1	; 0x01
 632:	3f c0       	rjmp	.+126    	; 0x6b2 <ReadOne+0x90>
		{
			PORTC = col[j];			// Scan each column
 634:	85 e3       	ldi	r24, 0x35	; 53
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	29 81       	ldd	r18, Y+1	; 0x01
 63a:	22 2f       	mov	r18, r18
 63c:	30 e0       	ldi	r19, 0x00	; 0
 63e:	2e 59       	subi	r18, 0x9E	; 158
 640:	3f 4f       	sbci	r19, 0xFF	; 255
 642:	f9 01       	movw	r30, r18
 644:	20 81       	ld	r18, Z
 646:	fc 01       	movw	r30, r24
 648:	20 83       	st	Z, r18
			delay(1);				// Delay for 0.01 sec
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	0e 94 49 00 	call	0x92	; 0x92 <delay>
			portCValue = PINC;			// Read port value from pinC
 652:	83 e3       	ldi	r24, 0x33	; 51
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	fc 01       	movw	r30, r24
 658:	80 81       	ld	r24, Z
 65a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <portCValue>
		
			// Begin stepping through each column to check if row has logic 0
			if (portCValue != col[j])
 65e:	89 81       	ldd	r24, Y+1	; 0x01
 660:	88 2f       	mov	r24, r24
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	8e 59       	subi	r24, 0x9E	; 158
 666:	9f 4f       	sbci	r25, 0xFF	; 255
 668:	fc 01       	movw	r30, r24
 66a:	90 81       	ld	r25, Z
 66c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <portCValue>
 670:	98 17       	cp	r25, r24
 672:	e1 f0       	breq	.+56     	; 0x6ac <ReadOne+0x8a>
			{
				//rebounce??
				//Step through each key
				for(uint8_t k = 0; k < 16; k++)
 674:	1a 82       	std	Y+2, r1	; 0x02
 676:	17 c0       	rjmp	.+46     	; 0x6a6 <ReadOne+0x84>
				{
					if(portCValue == Keys[k])
 678:	8a 81       	ldd	r24, Y+2	; 0x02
 67a:	88 2f       	mov	r24, r24
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	8a 59       	subi	r24, 0x9A	; 154
 680:	9f 4f       	sbci	r25, 0xFF	; 255
 682:	fc 01       	movw	r30, r24
 684:	90 81       	ld	r25, Z
 686:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <portCValue>
 68a:	98 17       	cp	r25, r24
 68c:	49 f4       	brne	.+18     	; 0x6a0 <ReadOne+0x7e>
					{
						key = k;
 68e:	8a 81       	ldd	r24, Y+2	; 0x02
 690:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
						//*portBPort = k;
						KeyPressed = 1;
 694:	81 e0       	ldi	r24, 0x01	; 1
 696:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <KeyPressed>
						//break;						//return here instead of break??
						return key;
 69a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 69e:	10 c0       	rjmp	.+32     	; 0x6c0 <ReadOne+0x9e>
			// Begin stepping through each column to check if row has logic 0
			if (portCValue != col[j])
			{
				//rebounce??
				//Step through each key
				for(uint8_t k = 0; k < 16; k++)
 6a0:	8a 81       	ldd	r24, Y+2	; 0x02
 6a2:	8f 5f       	subi	r24, 0xFF	; 255
 6a4:	8a 83       	std	Y+2, r24	; 0x02
 6a6:	8a 81       	ldd	r24, Y+2	; 0x02
 6a8:	80 31       	cpi	r24, 0x10	; 16
 6aa:	30 f3       	brcs	.-52     	; 0x678 <ReadOne+0x56>
	
	while(1)	//can get rid of while loop, it just keeps reading until a key is pressed instead of only reading once when its called
	{

		// Scanning column: write the column mask to port C
		for (uint8_t j=0; j<AmountOfColumns; j++)
 6ac:	89 81       	ldd	r24, Y+1	; 0x01
 6ae:	8f 5f       	subi	r24, 0xFF	; 255
 6b0:	89 83       	std	Y+1, r24	; 0x01
 6b2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <AmountOfColumns>
 6b6:	99 81       	ldd	r25, Y+1	; 0x01
 6b8:	98 17       	cp	r25, r24
 6ba:	08 f4       	brcc	.+2      	; 0x6be <ReadOne+0x9c>
 6bc:	bb cf       	rjmp	.-138    	; 0x634 <ReadOne+0x12>
						return key;
					}		
				}
			}
		}
	}
 6be:	b8 cf       	rjmp	.-144    	; 0x630 <ReadOne+0xe>
	return key;		//this should never execute
}
 6c0:	0f 90       	pop	r0
 6c2:	0f 90       	pop	r0
 6c4:	df 91       	pop	r29
 6c6:	cf 91       	pop	r28
 6c8:	08 95       	ret

000006ca <ReadNone>:
//**************************************************************************************************************************************************

//**************************************************************************************************************************************************
//Check if key has been lifted. ie debounce?
void ReadNone (void)
{
 6ca:	cf 93       	push	r28
 6cc:	df 93       	push	r29
 6ce:	cd b7       	in	r28, 0x3d	; 61
 6d0:	de b7       	in	r29, 0x3e	; 62
	if(keypad3x4==1)
 6d2:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <keypad3x4>
 6d6:	81 30       	cpi	r24, 0x01	; 1
 6d8:	69 f4       	brne	.+26     	; 0x6f4 <ReadNone+0x2a>
	{
		while((PINC&0x6A)!=0x6A);	//exits when PINC inputs are all high 
 6da:	00 00       	nop
 6dc:	83 e3       	ldi	r24, 0x33	; 51
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	fc 01       	movw	r30, r24
 6e2:	80 81       	ld	r24, Z
 6e4:	88 2f       	mov	r24, r24
 6e6:	90 e0       	ldi	r25, 0x00	; 0
 6e8:	8a 76       	andi	r24, 0x6A	; 106
 6ea:	99 27       	eor	r25, r25
 6ec:	8a 36       	cpi	r24, 0x6A	; 106
 6ee:	91 05       	cpc	r25, r1
 6f0:	a9 f7       	brne	.-22     	; 0x6dc <ReadNone+0x12>
	else
	{
		while((PINC&0x0F)!=0x0F);	//exits when PINC inputs are all high 
	}
	
}
 6f2:	0b c0       	rjmp	.+22     	; 0x70a <ReadNone+0x40>
	{
		while((PINC&0x6A)!=0x6A);	//exits when PINC inputs are all high 
	}
	else
	{
		while((PINC&0x0F)!=0x0F);	//exits when PINC inputs are all high 
 6f4:	00 00       	nop
 6f6:	83 e3       	ldi	r24, 0x33	; 51
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	fc 01       	movw	r30, r24
 6fc:	80 81       	ld	r24, Z
 6fe:	88 2f       	mov	r24, r24
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	8f 70       	andi	r24, 0x0F	; 15
 704:	99 27       	eor	r25, r25
 706:	0f 97       	sbiw	r24, 0x0f	; 15
 708:	b1 f7       	brne	.-20     	; 0x6f6 <ReadNone+0x2c>
	}
	
}
 70a:	00 00       	nop
 70c:	df 91       	pop	r29
 70e:	cf 91       	pop	r28
 710:	08 95       	ret

00000712 <InputPasscode>:
//**************************************************************************************************************************************************

//**************************************************************************************************************************************************
//Combine 6-8 digits into a passcode
uint32_t InputPasscode (void)
{
 712:	cf 93       	push	r28
 714:	df 93       	push	r29
 716:	cd b7       	in	r28, 0x3d	; 61
 718:	de b7       	in	r29, 0x3e	; 62
 71a:	27 97       	sbiw	r28, 0x07	; 7
 71c:	0f b6       	in	r0, 0x3f	; 63
 71e:	f8 94       	cli
 720:	de bf       	out	0x3e, r29	; 62
 722:	0f be       	out	0x3f, r0	; 63
 724:	cd bf       	out	0x3d, r28	; 61
	uint32_t passcode = 0;
 726:	19 82       	std	Y+1, r1	; 0x01
 728:	1a 82       	std	Y+2, r1	; 0x02
 72a:	1b 82       	std	Y+3, r1	; 0x03
 72c:	1c 82       	std	Y+4, r1	; 0x04
	for (int i =0; i<8; i++)
 72e:	1e 82       	std	Y+6, r1	; 0x06
 730:	1d 82       	std	Y+5, r1	; 0x05
 732:	4b c0       	rjmp	.+150    	; 0x7ca <InputPasscode+0xb8>
	{
		uint8_t keyValue = ReadOne();	//store digit pressed by user
 734:	0e 94 11 03 	call	0x622	; 0x622 <ReadOne>
 738:	8f 83       	std	Y+7, r24	; 0x07
		
		if(keyValue==0xF)					//if # is pressed
 73a:	8f 81       	ldd	r24, Y+7	; 0x07
 73c:	8f 30       	cpi	r24, 0x0F	; 15
 73e:	29 f4       	brne	.+10     	; 0x74a <InputPasscode+0x38>
		{
			return passcode;
 740:	89 81       	ldd	r24, Y+1	; 0x01
 742:	9a 81       	ldd	r25, Y+2	; 0x02
 744:	ab 81       	ldd	r26, Y+3	; 0x03
 746:	bc 81       	ldd	r27, Y+4	; 0x04
 748:	4e c0       	rjmp	.+156    	; 0x7e6 <InputPasscode+0xd4>
		}
		
		//check if key pressed is a digit
		if(isDigit(keyValue))
 74a:	8f 81       	ldd	r24, Y+7	; 0x07
 74c:	0e 94 11 04 	call	0x822	; 0x822 <isDigit>
 750:	88 23       	and	r24, r24
 752:	79 f1       	breq	.+94     	; 0x7b2 <InputPasscode+0xa0>
		{
			PORTB = keyValue;
 754:	88 e3       	ldi	r24, 0x38	; 56
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	2f 81       	ldd	r18, Y+7	; 0x07
 75a:	fc 01       	movw	r30, r24
 75c:	20 83       	st	Z, r18
			ReadNone();						//waits until finger is lifted off button
 75e:	0e 94 65 03 	call	0x6ca	; 0x6ca <ReadNone>
			PORTB = 0x00;
 762:	88 e3       	ldi	r24, 0x38	; 56
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	fc 01       	movw	r30, r24
 768:	10 82       	st	Z, r1
			
			passcode = passcode*10 + keyValue;	//add each digit into a long int
 76a:	89 81       	ldd	r24, Y+1	; 0x01
 76c:	9a 81       	ldd	r25, Y+2	; 0x02
 76e:	ab 81       	ldd	r26, Y+3	; 0x03
 770:	bc 81       	ldd	r27, Y+4	; 0x04
 772:	88 0f       	add	r24, r24
 774:	99 1f       	adc	r25, r25
 776:	aa 1f       	adc	r26, r26
 778:	bb 1f       	adc	r27, r27
 77a:	9c 01       	movw	r18, r24
 77c:	ad 01       	movw	r20, r26
 77e:	22 0f       	add	r18, r18
 780:	33 1f       	adc	r19, r19
 782:	44 1f       	adc	r20, r20
 784:	55 1f       	adc	r21, r21
 786:	22 0f       	add	r18, r18
 788:	33 1f       	adc	r19, r19
 78a:	44 1f       	adc	r20, r20
 78c:	55 1f       	adc	r21, r21
 78e:	28 0f       	add	r18, r24
 790:	39 1f       	adc	r19, r25
 792:	4a 1f       	adc	r20, r26
 794:	5b 1f       	adc	r21, r27
 796:	8f 81       	ldd	r24, Y+7	; 0x07
 798:	88 2f       	mov	r24, r24
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	a0 e0       	ldi	r26, 0x00	; 0
 79e:	b0 e0       	ldi	r27, 0x00	; 0
 7a0:	82 0f       	add	r24, r18
 7a2:	93 1f       	adc	r25, r19
 7a4:	a4 1f       	adc	r26, r20
 7a6:	b5 1f       	adc	r27, r21
 7a8:	89 83       	std	Y+1, r24	; 0x01
 7aa:	9a 83       	std	Y+2, r25	; 0x02
 7ac:	ab 83       	std	Y+3, r26	; 0x03
 7ae:	bc 83       	std	Y+4, r27	; 0x04
 7b0:	07 c0       	rjmp	.+14     	; 0x7c0 <InputPasscode+0xae>
		}
		else
		{
			//not a valid input
			i--;		//dont increment length counter if not valid
 7b2:	8d 81       	ldd	r24, Y+5	; 0x05
 7b4:	9e 81       	ldd	r25, Y+6	; 0x06
 7b6:	01 97       	sbiw	r24, 0x01	; 1
 7b8:	9e 83       	std	Y+6, r25	; 0x06
 7ba:	8d 83       	std	Y+5, r24	; 0x05
			displayIncorrect();
 7bc:	0e 94 39 01 	call	0x272	; 0x272 <displayIncorrect>
//**************************************************************************************************************************************************
//Combine 6-8 digits into a passcode
uint32_t InputPasscode (void)
{
	uint32_t passcode = 0;
	for (int i =0; i<8; i++)
 7c0:	8d 81       	ldd	r24, Y+5	; 0x05
 7c2:	9e 81       	ldd	r25, Y+6	; 0x06
 7c4:	01 96       	adiw	r24, 0x01	; 1
 7c6:	9e 83       	std	Y+6, r25	; 0x06
 7c8:	8d 83       	std	Y+5, r24	; 0x05
 7ca:	8d 81       	ldd	r24, Y+5	; 0x05
 7cc:	9e 81       	ldd	r25, Y+6	; 0x06
 7ce:	08 97       	sbiw	r24, 0x08	; 8
 7d0:	0c f4       	brge	.+2      	; 0x7d4 <InputPasscode+0xc2>
 7d2:	b0 cf       	rjmp	.-160    	; 0x734 <InputPasscode+0x22>
			i--;		//dont increment length counter if not valid
			displayIncorrect();
			
		}	
	}
	while(!(ReadOne()==0xF));		//wait until reads a *
 7d4:	00 00       	nop
 7d6:	0e 94 11 03 	call	0x622	; 0x622 <ReadOne>
 7da:	8f 30       	cpi	r24, 0x0F	; 15
 7dc:	e1 f7       	brne	.-8      	; 0x7d6 <InputPasscode+0xc4>
	return passcode	;
 7de:	89 81       	ldd	r24, Y+1	; 0x01
 7e0:	9a 81       	ldd	r25, Y+2	; 0x02
 7e2:	ab 81       	ldd	r26, Y+3	; 0x03
 7e4:	bc 81       	ldd	r27, Y+4	; 0x04
}
 7e6:	bc 01       	movw	r22, r24
 7e8:	cd 01       	movw	r24, r26
 7ea:	27 96       	adiw	r28, 0x07	; 7
 7ec:	0f b6       	in	r0, 0x3f	; 63
 7ee:	f8 94       	cli
 7f0:	de bf       	out	0x3e, r29	; 62
 7f2:	0f be       	out	0x3f, r0	; 63
 7f4:	cd bf       	out	0x3d, r28	; 61
 7f6:	df 91       	pop	r29
 7f8:	cf 91       	pop	r28
 7fa:	08 95       	ret

000007fc <isUser>:
//**************************************************************************************************************************************************

//**************************************************************************************************************************************************
//is the input a letter, a,b,c, or d. returns 1 if a valid user code
uint8_t isUser (uint8_t buttonPressed)
{
 7fc:	cf 93       	push	r28
 7fe:	df 93       	push	r29
 800:	1f 92       	push	r1
 802:	cd b7       	in	r28, 0x3d	; 61
 804:	de b7       	in	r29, 0x3e	; 62
 806:	89 83       	std	Y+1, r24	; 0x01
	switch(buttonPressed)
 808:	89 81       	ldd	r24, Y+1	; 0x01
 80a:	88 2f       	mov	r24, r24
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	0a 97       	sbiw	r24, 0x0a	; 10
 810:	04 97       	sbiw	r24, 0x04	; 4
 812:	10 f4       	brcc	.+4      	; 0x818 <isUser+0x1c>
	{
		case 0x0A:
		case 0x0B:
		case 0x0C:
		case 0x0D:
		return 1;
 814:	81 e0       	ldi	r24, 0x01	; 1
 816:	01 c0       	rjmp	.+2      	; 0x81a <isUser+0x1e>
		
		default:	//invalid user code		Set some debug flag here
		return 0;
 818:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 81a:	0f 90       	pop	r0
 81c:	df 91       	pop	r29
 81e:	cf 91       	pop	r28
 820:	08 95       	ret

00000822 <isDigit>:
//**************************************************************************************************************************************************

//**************************************************************************************************************************************************
//is the user input a digit. returns 1 if value is a digit
uint8_t isDigit (uint8_t buttonPressed)
{
 822:	cf 93       	push	r28
 824:	df 93       	push	r29
 826:	1f 92       	push	r1
 828:	cd b7       	in	r28, 0x3d	; 61
 82a:	de b7       	in	r29, 0x3e	; 62
 82c:	89 83       	std	Y+1, r24	; 0x01
	switch(buttonPressed)
 82e:	89 81       	ldd	r24, Y+1	; 0x01
 830:	88 2f       	mov	r24, r24
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	0a 97       	sbiw	r24, 0x0a	; 10
 836:	10 f4       	brcc	.+4      	; 0x83c <isDigit+0x1a>
		case 0x05:
		case 0x06:
		case 0x07:
		case 0x08:
		case 0x09:
		return 1;
 838:	81 e0       	ldi	r24, 0x01	; 1
 83a:	01 c0       	rjmp	.+2      	; 0x83e <isDigit+0x1c>
		
		default:	//invalid user code		Set some debug flag here
		return 0;
 83c:	80 e0       	ldi	r24, 0x00	; 0
	}
 83e:	0f 90       	pop	r0
 840:	df 91       	pop	r29
 842:	cf 91       	pop	r28
 844:	08 95       	ret

00000846 <main>:

// Global variables
uint8_t debugCode = 0;

int main(void)
{
 846:	cf 93       	push	r28
 848:	df 93       	push	r29
 84a:	00 d0       	rcall	.+0      	; 0x84c <main+0x6>
 84c:	00 d0       	rcall	.+0      	; 0x84e <main+0x8>
 84e:	cd b7       	in	r28, 0x3d	; 61
 850:	de b7       	in	r29, 0x3e	; 62
	// Initialise everything
    initTimers();
 852:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <initTimers>
	initLEDs();
 856:	0e 94 ba 02 	call	0x574	; 0x574 <initLEDs>
	initKeypad();
 85a:	0e 94 cb 02 	call	0x596	; 0x596 <initKeypad>
	
	storePasscode(12345678, 0xA);		//stores the password 12345678 into user slot A
 85e:	4a e0       	ldi	r20, 0x0A	; 10
 860:	6e e4       	ldi	r22, 0x4E	; 78
 862:	71 e6       	ldi	r23, 0x61	; 97
 864:	8c eb       	ldi	r24, 0xBC	; 188
 866:	90 e0       	ldi	r25, 0x00	; 0
 868:	0e 94 c5 01 	call	0x38a	; 0x38a <storePasscode>
	
    while (1) 
    {

		uint32_t attemptPasscode = InputPasscode();		//read the passcode from the keypad
 86c:	0e 94 89 03 	call	0x712	; 0x712 <InputPasscode>
 870:	dc 01       	movw	r26, r24
 872:	cb 01       	movw	r24, r22
 874:	89 83       	std	Y+1, r24	; 0x01
 876:	9a 83       	std	Y+2, r25	; 0x02
 878:	ab 83       	std	Y+3, r26	; 0x03
 87a:	bc 83       	std	Y+4, r27	; 0x04
		
		if(RecallPasscode(0xA)==attemptPasscode)		//check if correct
 87c:	8a e0       	ldi	r24, 0x0A	; 10
 87e:	0e 94 4d 02 	call	0x49a	; 0x49a <RecallPasscode>
 882:	9b 01       	movw	r18, r22
 884:	ac 01       	movw	r20, r24
 886:	89 81       	ldd	r24, Y+1	; 0x01
 888:	9a 81       	ldd	r25, Y+2	; 0x02
 88a:	ab 81       	ldd	r26, Y+3	; 0x03
 88c:	bc 81       	ldd	r27, Y+4	; 0x04
 88e:	28 17       	cp	r18, r24
 890:	39 07       	cpc	r19, r25
 892:	4a 07       	cpc	r20, r26
 894:	5b 07       	cpc	r21, r27
 896:	39 f4       	brne	.+14     	; 0x8a6 <__stack+0x47>
		{
			delay(10);
 898:	8a e0       	ldi	r24, 0x0A	; 10
 89a:	90 e0       	ldi	r25, 0x00	; 0
 89c:	0e 94 49 00 	call	0x92	; 0x92 <delay>
			displayUnlock();
 8a0:	0e 94 8a 00 	call	0x114	; 0x114 <displayUnlock>
 8a4:	e3 cf       	rjmp	.-58     	; 0x86c <__stack+0xd>
		}
		else
		{
			delay(10);
 8a6:	8a e0       	ldi	r24, 0x0A	; 10
 8a8:	90 e0       	ldi	r25, 0x00	; 0
 8aa:	0e 94 49 00 	call	0x92	; 0x92 <delay>
			displayLock();
 8ae:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <displayLock>
		}
		
    }
 8b2:	dc cf       	rjmp	.-72     	; 0x86c <__stack+0xd>

000008b4 <_exit>:
 8b4:	f8 94       	cli

000008b6 <__stop_program>:
 8b6:	ff cf       	rjmp	.-2      	; 0x8b6 <__stop_program>
