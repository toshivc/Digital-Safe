
Digital_Safe_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000974  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000974  00000a08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800078  00800078  00000a20  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a20  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a50  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00000a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d76  00000000  00000000  00000bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000909  00000000  00000000  00001932  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b54  00000000  00000000  0000223b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000304  00000000  00000000  00002d90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000057f  00000000  00000000  00003094  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000583  00000000  00000000  00003613  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00003b96  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	8d 01       	movw	r16, r26
  56:	8f 01       	movw	r16, r30
  58:	91 01       	movw	r18, r2
  5a:	93 01       	movw	r18, r6
  5c:	95 01       	movw	r18, r10
  5e:	97 01       	movw	r18, r14
  60:	99 01       	movw	r18, r18
  62:	9b 01       	movw	r18, r22
  64:	9d 01       	movw	r18, r26
  66:	9f 01       	movw	r18, r30
  68:	a3 01       	movw	r20, r6
  6a:	a5 01       	movw	r20, r10
  6c:	a7 01       	movw	r20, r14
  6e:	a9 01       	movw	r20, r18
  70:	ab 01       	movw	r20, r22
  72:	ab 01       	movw	r20, r22
  74:	a1 01       	movw	r20, r2

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf e5       	ldi	r28, 0x5F	; 95
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
  82:	10 e0       	ldi	r17, 0x00	; 0
  84:	a0 e6       	ldi	r26, 0x60	; 96
  86:	b0 e0       	ldi	r27, 0x00	; 0
  88:	e4 e7       	ldi	r30, 0x74	; 116
  8a:	f9 e0       	ldi	r31, 0x09	; 9
  8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
  8e:	05 90       	lpm	r0, Z+
  90:	0d 92       	st	X+, r0
  92:	a8 37       	cpi	r26, 0x78	; 120
  94:	b1 07       	cpc	r27, r17
  96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
  98:	20 e0       	ldi	r18, 0x00	; 0
  9a:	a8 e7       	ldi	r26, 0x78	; 120
  9c:	b0 e0       	ldi	r27, 0x00	; 0
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	ab 37       	cpi	r26, 0x7B	; 123
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <main>
  ac:	0c 94 b8 04 	jmp	0x970	; 0x970 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <delay_ms>:
*/

//****************************************************************************************
//Timer with minimum time of 0.001 seconds ie 1ms, max time of 65sec
void delay_ms(uint16_t delayTime)
{
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	00 d0       	rcall	.+0      	; 0xba <delay_ms+0x6>
  ba:	00 d0       	rcall	.+0      	; 0xbc <delay_ms+0x8>
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
  c0:	9c 83       	std	Y+4, r25	; 0x04
  c2:	8b 83       	std	Y+3, r24	; 0x03
	//12MHz divided by 1024 is 11.718KHz, or clock time of 85.3micro seconds
	//multiplied by 12 gives 0.001024 seconds
	
	TCNT0 = 0x00;		//reset timer to 0
  c4:	82 e5       	ldi	r24, 0x52	; 82
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	fc 01       	movw	r30, r24
  ca:	10 82       	st	Z, r1
	OCR0 = 12;			//set compare register 
  cc:	8c e5       	ldi	r24, 0x5C	; 92
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	2c e0       	ldi	r18, 0x0C	; 12
  d2:	fc 01       	movw	r30, r24
  d4:	20 83       	st	Z, r18
	TIFR = (1<<OCF0);	//reset compare flag
  d6:	88 e5       	ldi	r24, 0x58	; 88
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	22 e0       	ldi	r18, 0x02	; 2
  dc:	fc 01       	movw	r30, r24
  de:	20 83       	st	Z, r18
	
	uint16_t overflowCounter = 0;
  e0:	1a 82       	std	Y+2, r1	; 0x02
  e2:	19 82       	std	Y+1, r1	; 0x01
	
	while (1)
	{
		while((TIFR & (1<<OCF0))==0); //while OCF0, overflow flag is 0
  e4:	00 00       	nop
  e6:	88 e5       	ldi	r24, 0x58	; 88
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	fc 01       	movw	r30, r24
  ec:	80 81       	ld	r24, Z
  ee:	88 2f       	mov	r24, r24
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	82 70       	andi	r24, 0x02	; 2
  f4:	99 27       	eor	r25, r25
  f6:	89 2b       	or	r24, r25
  f8:	b1 f3       	breq	.-20     	; 0xe6 <delay_ms+0x32>
		TCNT0 = 0x00;		//reset timer to 0
  fa:	82 e5       	ldi	r24, 0x52	; 82
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	fc 01       	movw	r30, r24
 100:	10 82       	st	Z, r1
		TIFR = (1<<OCF0); //reset compare flag
 102:	88 e5       	ldi	r24, 0x58	; 88
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	22 e0       	ldi	r18, 0x02	; 2
 108:	fc 01       	movw	r30, r24
 10a:	20 83       	st	Z, r18
		overflowCounter++;
 10c:	89 81       	ldd	r24, Y+1	; 0x01
 10e:	9a 81       	ldd	r25, Y+2	; 0x02
 110:	01 96       	adiw	r24, 0x01	; 1
 112:	9a 83       	std	Y+2, r25	; 0x02
 114:	89 83       	std	Y+1, r24	; 0x01
		if (overflowCounter >= delayTime)
 116:	29 81       	ldd	r18, Y+1	; 0x01
 118:	3a 81       	ldd	r19, Y+2	; 0x02
 11a:	8b 81       	ldd	r24, Y+3	; 0x03
 11c:	9c 81       	ldd	r25, Y+4	; 0x04
 11e:	28 17       	cp	r18, r24
 120:	39 07       	cpc	r19, r25
 122:	08 f4       	brcc	.+2      	; 0x126 <delay_ms+0x72>
		{
			return;
		}
	}	
 124:	df cf       	rjmp	.-66     	; 0xe4 <delay_ms+0x30>
		TCNT0 = 0x00;		//reset timer to 0
		TIFR = (1<<OCF0); //reset compare flag
		overflowCounter++;
		if (overflowCounter >= delayTime)
		{
			return;
 126:	00 00       	nop
		}
	}	
}
 128:	0f 90       	pop	r0
 12a:	0f 90       	pop	r0
 12c:	0f 90       	pop	r0
 12e:	0f 90       	pop	r0
 130:	df 91       	pop	r29
 132:	cf 91       	pop	r28
 134:	08 95       	ret

00000136 <displayUnlock>:
		PORTB = 0xFF;
		delay_ms(100);
		PORTB = 0x00;
		delay_ms(100);
	}
}
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	00 d0       	rcall	.+0      	; 0x13c <displayUnlock+0x6>
 13c:	00 d0       	rcall	.+0      	; 0x13e <displayUnlock+0x8>
 13e:	cd b7       	in	r28, 0x3d	; 61
 140:	de b7       	in	r29, 0x3e	; 62
 142:	1a 82       	std	Y+2, r1	; 0x02
 144:	19 82       	std	Y+1, r1	; 0x01
 146:	1b c0       	rjmp	.+54     	; 0x17e <displayUnlock+0x48>
 148:	88 e3       	ldi	r24, 0x38	; 56
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	29 81       	ldd	r18, Y+1	; 0x01
 14e:	3a 81       	ldd	r19, Y+2	; 0x02
 150:	22 0f       	add	r18, r18
 152:	33 1f       	adc	r19, r19
 154:	a9 01       	movw	r20, r18
 156:	4f 5f       	subi	r20, 0xFF	; 255
 158:	5f 4f       	sbci	r21, 0xFF	; 255
 15a:	21 e0       	ldi	r18, 0x01	; 1
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	02 c0       	rjmp	.+4      	; 0x164 <displayUnlock+0x2e>
 160:	22 0f       	add	r18, r18
 162:	33 1f       	adc	r19, r19
 164:	4a 95       	dec	r20
 166:	e2 f7       	brpl	.-8      	; 0x160 <displayUnlock+0x2a>
 168:	fc 01       	movw	r30, r24
 16a:	20 83       	st	Z, r18
 16c:	84 e6       	ldi	r24, 0x64	; 100
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
 174:	89 81       	ldd	r24, Y+1	; 0x01
 176:	9a 81       	ldd	r25, Y+2	; 0x02
 178:	01 96       	adiw	r24, 0x01	; 1
 17a:	9a 83       	std	Y+2, r25	; 0x02
 17c:	89 83       	std	Y+1, r24	; 0x01
 17e:	89 81       	ldd	r24, Y+1	; 0x01
 180:	9a 81       	ldd	r25, Y+2	; 0x02
 182:	04 97       	sbiw	r24, 0x04	; 4
 184:	0c f3       	brlt	.-62     	; 0x148 <displayUnlock+0x12>
 186:	1c 82       	std	Y+4, r1	; 0x04
 188:	1b 82       	std	Y+3, r1	; 0x03
 18a:	1c c0       	rjmp	.+56     	; 0x1c4 <displayUnlock+0x8e>
 18c:	88 e3       	ldi	r24, 0x38	; 56
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	2b 81       	ldd	r18, Y+3	; 0x03
 192:	3c 81       	ldd	r19, Y+4	; 0x04
 194:	22 0f       	add	r18, r18
 196:	33 1f       	adc	r19, r19
 198:	47 e0       	ldi	r20, 0x07	; 7
 19a:	50 e0       	ldi	r21, 0x00	; 0
 19c:	42 1b       	sub	r20, r18
 19e:	53 0b       	sbc	r21, r19
 1a0:	21 e0       	ldi	r18, 0x01	; 1
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <displayUnlock+0x74>
 1a6:	22 0f       	add	r18, r18
 1a8:	33 1f       	adc	r19, r19
 1aa:	4a 95       	dec	r20
 1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <displayUnlock+0x70>
 1ae:	fc 01       	movw	r30, r24
 1b0:	20 83       	st	Z, r18
 1b2:	84 e6       	ldi	r24, 0x64	; 100
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
 1ba:	8b 81       	ldd	r24, Y+3	; 0x03
 1bc:	9c 81       	ldd	r25, Y+4	; 0x04
 1be:	01 96       	adiw	r24, 0x01	; 1
 1c0:	9c 83       	std	Y+4, r25	; 0x04
 1c2:	8b 83       	std	Y+3, r24	; 0x03
 1c4:	8b 81       	ldd	r24, Y+3	; 0x03
 1c6:	9c 81       	ldd	r25, Y+4	; 0x04
 1c8:	04 97       	sbiw	r24, 0x04	; 4
 1ca:	04 f3       	brlt	.-64     	; 0x18c <displayUnlock+0x56>
 1cc:	88 e3       	ldi	r24, 0x38	; 56
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	fc 01       	movw	r30, r24
 1d2:	10 82       	st	Z, r1
 1d4:	00 00       	nop
 1d6:	0f 90       	pop	r0
 1d8:	0f 90       	pop	r0
 1da:	0f 90       	pop	r0
 1dc:	0f 90       	pop	r0
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	08 95       	ret

000001e4 <displayLock>:
 1e4:	cf 93       	push	r28
 1e6:	df 93       	push	r29
 1e8:	00 d0       	rcall	.+0      	; 0x1ea <displayLock+0x6>
 1ea:	00 d0       	rcall	.+0      	; 0x1ec <displayLock+0x8>
 1ec:	cd b7       	in	r28, 0x3d	; 61
 1ee:	de b7       	in	r29, 0x3e	; 62
 1f0:	1a 82       	std	Y+2, r1	; 0x02
 1f2:	19 82       	std	Y+1, r1	; 0x01
 1f4:	19 c0       	rjmp	.+50     	; 0x228 <displayLock+0x44>
 1f6:	88 e3       	ldi	r24, 0x38	; 56
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	29 81       	ldd	r18, Y+1	; 0x01
 1fc:	3a 81       	ldd	r19, Y+2	; 0x02
 1fe:	a9 01       	movw	r20, r18
 200:	44 0f       	add	r20, r20
 202:	55 1f       	adc	r21, r21
 204:	21 e0       	ldi	r18, 0x01	; 1
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	02 c0       	rjmp	.+4      	; 0x20e <displayLock+0x2a>
 20a:	22 0f       	add	r18, r18
 20c:	33 1f       	adc	r19, r19
 20e:	4a 95       	dec	r20
 210:	e2 f7       	brpl	.-8      	; 0x20a <displayLock+0x26>
 212:	fc 01       	movw	r30, r24
 214:	20 83       	st	Z, r18
 216:	84 e6       	ldi	r24, 0x64	; 100
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
 21e:	89 81       	ldd	r24, Y+1	; 0x01
 220:	9a 81       	ldd	r25, Y+2	; 0x02
 222:	01 96       	adiw	r24, 0x01	; 1
 224:	9a 83       	std	Y+2, r25	; 0x02
 226:	89 83       	std	Y+1, r24	; 0x01
 228:	89 81       	ldd	r24, Y+1	; 0x01
 22a:	9a 81       	ldd	r25, Y+2	; 0x02
 22c:	04 97       	sbiw	r24, 0x04	; 4
 22e:	1c f3       	brlt	.-58     	; 0x1f6 <displayLock+0x12>
 230:	1c 82       	std	Y+4, r1	; 0x04
 232:	1b 82       	std	Y+3, r1	; 0x03
 234:	1f c0       	rjmp	.+62     	; 0x274 <displayLock+0x90>
 236:	88 e3       	ldi	r24, 0x38	; 56
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	44 e0       	ldi	r20, 0x04	; 4
 23c:	50 e0       	ldi	r21, 0x00	; 0
 23e:	2b 81       	ldd	r18, Y+3	; 0x03
 240:	3c 81       	ldd	r19, Y+4	; 0x04
 242:	ba 01       	movw	r22, r20
 244:	62 1b       	sub	r22, r18
 246:	73 0b       	sbc	r23, r19
 248:	9b 01       	movw	r18, r22
 24a:	a9 01       	movw	r20, r18
 24c:	44 0f       	add	r20, r20
 24e:	55 1f       	adc	r21, r21
 250:	21 e0       	ldi	r18, 0x01	; 1
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	02 c0       	rjmp	.+4      	; 0x25a <displayLock+0x76>
 256:	22 0f       	add	r18, r18
 258:	33 1f       	adc	r19, r19
 25a:	4a 95       	dec	r20
 25c:	e2 f7       	brpl	.-8      	; 0x256 <displayLock+0x72>
 25e:	fc 01       	movw	r30, r24
 260:	20 83       	st	Z, r18
 262:	84 e6       	ldi	r24, 0x64	; 100
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
 26a:	8b 81       	ldd	r24, Y+3	; 0x03
 26c:	9c 81       	ldd	r25, Y+4	; 0x04
 26e:	01 96       	adiw	r24, 0x01	; 1
 270:	9c 83       	std	Y+4, r25	; 0x04
 272:	8b 83       	std	Y+3, r24	; 0x03
 274:	8b 81       	ldd	r24, Y+3	; 0x03
 276:	9c 81       	ldd	r25, Y+4	; 0x04
 278:	04 97       	sbiw	r24, 0x04	; 4
 27a:	ec f2       	brlt	.-70     	; 0x236 <displayLock+0x52>
 27c:	88 e3       	ldi	r24, 0x38	; 56
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	fc 01       	movw	r30, r24
 282:	10 82       	st	Z, r1
 284:	00 00       	nop
 286:	0f 90       	pop	r0
 288:	0f 90       	pop	r0
 28a:	0f 90       	pop	r0
 28c:	0f 90       	pop	r0
 28e:	df 91       	pop	r29
 290:	cf 91       	pop	r28
 292:	08 95       	ret

00000294 <displayIncorrect>:
//****************************************************************************************

//****************************************************************************************
//Programming mode LED sequence
void displayIncorrect(void)
{
 294:	cf 93       	push	r28
 296:	df 93       	push	r29
 298:	00 d0       	rcall	.+0      	; 0x29a <displayIncorrect+0x6>
 29a:	cd b7       	in	r28, 0x3d	; 61
 29c:	de b7       	in	r29, 0x3e	; 62
	for (int i = 0; i <4; i++)
 29e:	1a 82       	std	Y+2, r1	; 0x02
 2a0:	19 82       	std	Y+1, r1	; 0x01
 2a2:	16 c0       	rjmp	.+44     	; 0x2d0 <displayIncorrect+0x3c>
	{
		PORTB = 0x55;
 2a4:	88 e3       	ldi	r24, 0x38	; 56
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	25 e5       	ldi	r18, 0x55	; 85
 2aa:	fc 01       	movw	r30, r24
 2ac:	20 83       	st	Z, r18
		delay_ms(80);
 2ae:	80 e5       	ldi	r24, 0x50	; 80
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
		PORTB = 0x00;
 2b6:	88 e3       	ldi	r24, 0x38	; 56
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	fc 01       	movw	r30, r24
 2bc:	10 82       	st	Z, r1
		delay_ms(80);
 2be:	80 e5       	ldi	r24, 0x50	; 80
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>

//****************************************************************************************
//Programming mode LED sequence
void displayIncorrect(void)
{
	for (int i = 0; i <4; i++)
 2c6:	89 81       	ldd	r24, Y+1	; 0x01
 2c8:	9a 81       	ldd	r25, Y+2	; 0x02
 2ca:	01 96       	adiw	r24, 0x01	; 1
 2cc:	9a 83       	std	Y+2, r25	; 0x02
 2ce:	89 83       	std	Y+1, r24	; 0x01
 2d0:	89 81       	ldd	r24, Y+1	; 0x01
 2d2:	9a 81       	ldd	r25, Y+2	; 0x02
 2d4:	04 97       	sbiw	r24, 0x04	; 4
 2d6:	34 f3       	brlt	.-52     	; 0x2a4 <displayIncorrect+0x10>
		PORTB = 0x55;
		delay_ms(80);
		PORTB = 0x00;
		delay_ms(80);
	}
}
 2d8:	00 00       	nop
 2da:	0f 90       	pop	r0
 2dc:	0f 90       	pop	r0
 2de:	df 91       	pop	r29
 2e0:	cf 91       	pop	r28
 2e2:	08 95       	ret

000002e4 <displayKeys>:
//****************************************************************************************

//****************************************************************************************
// Convert binary value to more realistic LED representation
uint8_t displayKeys(uint8_t keyValue)
{
 2e4:	cf 93       	push	r28
 2e6:	df 93       	push	r29
 2e8:	1f 92       	push	r1
 2ea:	cd b7       	in	r28, 0x3d	; 61
 2ec:	de b7       	in	r29, 0x3e	; 62
 2ee:	89 83       	std	Y+1, r24	; 0x01
	switch(keyValue)
 2f0:	89 81       	ldd	r24, Y+1	; 0x01
 2f2:	88 2f       	mov	r24, r24
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	09 2e       	mov	r0, r25
 2f8:	00 0c       	add	r0, r0
 2fa:	aa 0b       	sbc	r26, r26
 2fc:	bb 0b       	sbc	r27, r27
 2fe:	40 e0       	ldi	r20, 0x00	; 0
 300:	50 e0       	ldi	r21, 0x00	; 0
 302:	20 e1       	ldi	r18, 0x10	; 16
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	84 1b       	sub	r24, r20
 308:	95 0b       	sbc	r25, r21
 30a:	28 17       	cp	r18, r24
 30c:	39 07       	cpc	r19, r25
 30e:	18 f1       	brcs	.+70     	; 0x356 <displayKeys+0x72>
 310:	86 5d       	subi	r24, 0xD6	; 214
 312:	9f 4f       	sbci	r25, 0xFF	; 255
 314:	fc 01       	movw	r30, r24
 316:	0c 94 b2 04 	jmp	0x964	; 0x964 <__tablejump2__>
	{
		case 0x00:
		return 0x00;
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	1d c0       	rjmp	.+58     	; 0x358 <displayKeys+0x74>
		break;
		
		case 0x01:
		return 0x01;
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	1b c0       	rjmp	.+54     	; 0x358 <displayKeys+0x74>
		break;
		
		case 0x02:
		return 0x02;
 322:	82 e0       	ldi	r24, 0x02	; 2
 324:	19 c0       	rjmp	.+50     	; 0x358 <displayKeys+0x74>
		break;
		
		case 0x03:
		return 0x04;
 326:	84 e0       	ldi	r24, 0x04	; 4
 328:	17 c0       	rjmp	.+46     	; 0x358 <displayKeys+0x74>
		break;
		
		case 0x04:
		return 0x08;
 32a:	88 e0       	ldi	r24, 0x08	; 8
 32c:	15 c0       	rjmp	.+42     	; 0x358 <displayKeys+0x74>
		break;
		
		case 0x05:
		return 0x10;
 32e:	80 e1       	ldi	r24, 0x10	; 16
 330:	13 c0       	rjmp	.+38     	; 0x358 <displayKeys+0x74>
		break;
		
		case 0x06:
		return 0x20;
 332:	80 e2       	ldi	r24, 0x20	; 32
 334:	11 c0       	rjmp	.+34     	; 0x358 <displayKeys+0x74>
		break;
		
		case 0x07:
		return 0x40;
 336:	80 e4       	ldi	r24, 0x40	; 64
 338:	0f c0       	rjmp	.+30     	; 0x358 <displayKeys+0x74>
		break;
		
		case 0x08:
		return 0x80;
 33a:	80 e8       	ldi	r24, 0x80	; 128
 33c:	0d c0       	rjmp	.+26     	; 0x358 <displayKeys+0x74>
		break;
		
		case 0x09:	
		return 0x81;
 33e:	81 e8       	ldi	r24, 0x81	; 129
 340:	0b c0       	rjmp	.+22     	; 0x358 <displayKeys+0x74>
		break;
		
		case 0x10:
		return 0x10;
 342:	80 e1       	ldi	r24, 0x10	; 16
 344:	09 c0       	rjmp	.+18     	; 0x358 <displayKeys+0x74>
		break;
		
		case 0x0A:
		return 0x03;
 346:	83 e0       	ldi	r24, 0x03	; 3
 348:	07 c0       	rjmp	.+14     	; 0x358 <displayKeys+0x74>
		break;
		
		case 0x0B:
		return 0x0C;
 34a:	8c e0       	ldi	r24, 0x0C	; 12
 34c:	05 c0       	rjmp	.+10     	; 0x358 <displayKeys+0x74>
		break;
		
		case 0x0C:
		return 0x30;
 34e:	80 e3       	ldi	r24, 0x30	; 48
 350:	03 c0       	rjmp	.+6      	; 0x358 <displayKeys+0x74>
		break;
		
		case 0x0D:
		return 0xC0;
 352:	80 ec       	ldi	r24, 0xC0	; 192
 354:	01 c0       	rjmp	.+2      	; 0x358 <displayKeys+0x74>
		break;
		
		default:
		return 0;
 356:	80 e0       	ldi	r24, 0x00	; 0
	}
 358:	0f 90       	pop	r0
 35a:	df 91       	pop	r29
 35c:	cf 91       	pop	r28
 35e:	08 95       	ret

00000360 <write_EEPROM>:
 360:	cf 93       	push	r28
 362:	df 93       	push	r29
 364:	00 d0       	rcall	.+0      	; 0x366 <write_EEPROM+0x6>
 366:	1f 92       	push	r1
 368:	cd b7       	in	r28, 0x3d	; 61
 36a:	de b7       	in	r29, 0x3e	; 62
 36c:	89 83       	std	Y+1, r24	; 0x01
 36e:	7b 83       	std	Y+3, r23	; 0x03
 370:	6a 83       	std	Y+2, r22	; 0x02
 372:	8a 81       	ldd	r24, Y+2	; 0x02
 374:	9b 81       	ldd	r25, Y+3	; 0x03
 376:	81 30       	cpi	r24, 0x01	; 1
 378:	94 40       	sbci	r25, 0x04	; 4
 37a:	20 f0       	brcs	.+8      	; 0x384 <write_EEPROM+0x24>
 37c:	83 e0       	ldi	r24, 0x03	; 3
 37e:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__data_end>
 382:	1a c0       	rjmp	.+52     	; 0x3b8 <write_EEPROM+0x58>
 384:	00 00       	nop
 386:	8c e3       	ldi	r24, 0x3C	; 60
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	fc 01       	movw	r30, r24
 38c:	80 81       	ld	r24, Z
 38e:	88 2f       	mov	r24, r24
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	82 70       	andi	r24, 0x02	; 2
 394:	99 27       	eor	r25, r25
 396:	89 2b       	or	r24, r25
 398:	b1 f7       	brne	.-20     	; 0x386 <write_EEPROM+0x26>
 39a:	8e e3       	ldi	r24, 0x3E	; 62
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	2a 81       	ldd	r18, Y+2	; 0x02
 3a0:	3b 81       	ldd	r19, Y+3	; 0x03
 3a2:	fc 01       	movw	r30, r24
 3a4:	31 83       	std	Z+1, r19	; 0x01
 3a6:	20 83       	st	Z, r18
 3a8:	8d e3       	ldi	r24, 0x3D	; 61
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	29 81       	ldd	r18, Y+1	; 0x01
 3ae:	fc 01       	movw	r30, r24
 3b0:	20 83       	st	Z, r18
 3b2:	e2 9a       	sbi	0x1c, 2	; 28
 3b4:	e1 9a       	sbi	0x1c, 1	; 28
 3b6:	00 00       	nop
 3b8:	0f 90       	pop	r0
 3ba:	0f 90       	pop	r0
 3bc:	0f 90       	pop	r0
 3be:	df 91       	pop	r29
 3c0:	cf 91       	pop	r28
 3c2:	08 95       	ret

000003c4 <read_EEPROM>:
 3c4:	cf 93       	push	r28
 3c6:	df 93       	push	r29
 3c8:	00 d0       	rcall	.+0      	; 0x3ca <read_EEPROM+0x6>
 3ca:	cd b7       	in	r28, 0x3d	; 61
 3cc:	de b7       	in	r29, 0x3e	; 62
 3ce:	9a 83       	std	Y+2, r25	; 0x02
 3d0:	89 83       	std	Y+1, r24	; 0x01
 3d2:	89 81       	ldd	r24, Y+1	; 0x01
 3d4:	9a 81       	ldd	r25, Y+2	; 0x02
 3d6:	81 30       	cpi	r24, 0x01	; 1
 3d8:	94 40       	sbci	r25, 0x04	; 4
 3da:	10 f0       	brcs	.+4      	; 0x3e0 <read_EEPROM+0x1c>
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	1f c0       	rjmp	.+62     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 3e0:	00 00       	nop
 3e2:	8c e3       	ldi	r24, 0x3C	; 60
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	fc 01       	movw	r30, r24
 3e8:	80 81       	ld	r24, Z
 3ea:	88 2f       	mov	r24, r24
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	82 70       	andi	r24, 0x02	; 2
 3f0:	99 27       	eor	r25, r25
 3f2:	89 2b       	or	r24, r25
 3f4:	b1 f7       	brne	.-20     	; 0x3e2 <read_EEPROM+0x1e>
 3f6:	8e e3       	ldi	r24, 0x3E	; 62
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	29 81       	ldd	r18, Y+1	; 0x01
 3fc:	3a 81       	ldd	r19, Y+2	; 0x02
 3fe:	fc 01       	movw	r30, r24
 400:	31 83       	std	Z+1, r19	; 0x01
 402:	20 83       	st	Z, r18
 404:	8c e3       	ldi	r24, 0x3C	; 60
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	2c e3       	ldi	r18, 0x3C	; 60
 40a:	30 e0       	ldi	r19, 0x00	; 0
 40c:	f9 01       	movw	r30, r18
 40e:	20 81       	ld	r18, Z
 410:	21 60       	ori	r18, 0x01	; 1
 412:	fc 01       	movw	r30, r24
 414:	20 83       	st	Z, r18
 416:	8d e3       	ldi	r24, 0x3D	; 61
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	fc 01       	movw	r30, r24
 41c:	80 81       	ld	r24, Z
 41e:	0f 90       	pop	r0
 420:	0f 90       	pop	r0
 422:	df 91       	pop	r29
 424:	cf 91       	pop	r28
 426:	08 95       	ret

00000428 <storePasscode>:
 428:	cf 93       	push	r28
 42a:	df 93       	push	r29
 42c:	cd b7       	in	r28, 0x3d	; 61
 42e:	de b7       	in	r29, 0x3e	; 62
 430:	63 97       	sbiw	r28, 0x13	; 19
 432:	0f b6       	in	r0, 0x3f	; 63
 434:	f8 94       	cli
 436:	de bf       	out	0x3e, r29	; 62
 438:	0f be       	out	0x3f, r0	; 63
 43a:	cd bf       	out	0x3d, r28	; 61
 43c:	6f 87       	std	Y+15, r22	; 0x0f
 43e:	78 8b       	std	Y+16, r23	; 0x10
 440:	89 8b       	std	Y+17, r24	; 0x11
 442:	9a 8b       	std	Y+18, r25	; 0x12
 444:	4b 8b       	std	Y+19, r20	; 0x13
 446:	8b 89       	ldd	r24, Y+19	; 0x13
 448:	0e 94 56 04 	call	0x8ac	; 0x8ac <isUser>
 44c:	88 23       	and	r24, r24
 44e:	21 f4       	brne	.+8      	; 0x458 <storePasscode+0x30>
 450:	82 e0       	ldi	r24, 0x02	; 2
 452:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__data_end>
 456:	67 c0       	rjmp	.+206    	; 0x526 <storePasscode+0xfe>
 458:	1a 82       	std	Y+2, r1	; 0x02
 45a:	19 82       	std	Y+1, r1	; 0x01
 45c:	5e c0       	rjmp	.+188    	; 0x51a <storePasscode+0xf2>
 45e:	89 81       	ldd	r24, Y+1	; 0x01
 460:	9a 81       	ldd	r25, Y+2	; 0x02
 462:	9c 01       	movw	r18, r24
 464:	22 0f       	add	r18, r18
 466:	33 1f       	adc	r19, r19
 468:	22 0f       	add	r18, r18
 46a:	33 1f       	adc	r19, r19
 46c:	22 0f       	add	r18, r18
 46e:	33 1f       	adc	r19, r19
 470:	8f 85       	ldd	r24, Y+15	; 0x0f
 472:	98 89       	ldd	r25, Y+16	; 0x10
 474:	a9 89       	ldd	r26, Y+17	; 0x11
 476:	ba 89       	ldd	r27, Y+18	; 0x12
 478:	04 c0       	rjmp	.+8      	; 0x482 <storePasscode+0x5a>
 47a:	b6 95       	lsr	r27
 47c:	a7 95       	ror	r26
 47e:	97 95       	ror	r25
 480:	87 95       	ror	r24
 482:	2a 95       	dec	r18
 484:	d2 f7       	brpl	.-12     	; 0x47a <storePasscode+0x52>
 486:	48 2f       	mov	r20, r24
 488:	9e 01       	movw	r18, r28
 48a:	2d 5f       	subi	r18, 0xFD	; 253
 48c:	3f 4f       	sbci	r19, 0xFF	; 255
 48e:	89 81       	ldd	r24, Y+1	; 0x01
 490:	9a 81       	ldd	r25, Y+2	; 0x02
 492:	82 0f       	add	r24, r18
 494:	93 1f       	adc	r25, r19
 496:	fc 01       	movw	r30, r24
 498:	40 83       	st	Z, r20
 49a:	8b 89       	ldd	r24, Y+19	; 0x13
 49c:	88 2f       	mov	r24, r24
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	9c 01       	movw	r18, r24
 4a2:	22 95       	swap	r18
 4a4:	32 95       	swap	r19
 4a6:	30 7f       	andi	r19, 0xF0	; 240
 4a8:	32 27       	eor	r19, r18
 4aa:	20 7f       	andi	r18, 0xF0	; 240
 4ac:	32 27       	eor	r19, r18
 4ae:	44 e0       	ldi	r20, 0x04	; 4
 4b0:	50 e0       	ldi	r21, 0x00	; 0
 4b2:	89 81       	ldd	r24, Y+1	; 0x01
 4b4:	9a 81       	ldd	r25, Y+2	; 0x02
 4b6:	ba 01       	movw	r22, r20
 4b8:	68 1b       	sub	r22, r24
 4ba:	79 0b       	sbc	r23, r25
 4bc:	cb 01       	movw	r24, r22
 4be:	82 2b       	or	r24, r18
 4c0:	93 2b       	or	r25, r19
 4c2:	ac 01       	movw	r20, r24
 4c4:	89 81       	ldd	r24, Y+1	; 0x01
 4c6:	9a 81       	ldd	r25, Y+2	; 0x02
 4c8:	88 0f       	add	r24, r24
 4ca:	99 1f       	adc	r25, r25
 4cc:	9e 01       	movw	r18, r28
 4ce:	2f 5f       	subi	r18, 0xFF	; 255
 4d0:	3f 4f       	sbci	r19, 0xFF	; 255
 4d2:	82 0f       	add	r24, r18
 4d4:	93 1f       	adc	r25, r19
 4d6:	06 96       	adiw	r24, 0x06	; 6
 4d8:	fc 01       	movw	r30, r24
 4da:	51 83       	std	Z+1, r21	; 0x01
 4dc:	40 83       	st	Z, r20
 4de:	89 81       	ldd	r24, Y+1	; 0x01
 4e0:	9a 81       	ldd	r25, Y+2	; 0x02
 4e2:	88 0f       	add	r24, r24
 4e4:	99 1f       	adc	r25, r25
 4e6:	9e 01       	movw	r18, r28
 4e8:	2f 5f       	subi	r18, 0xFF	; 255
 4ea:	3f 4f       	sbci	r19, 0xFF	; 255
 4ec:	82 0f       	add	r24, r18
 4ee:	93 1f       	adc	r25, r19
 4f0:	06 96       	adiw	r24, 0x06	; 6
 4f2:	fc 01       	movw	r30, r24
 4f4:	40 81       	ld	r20, Z
 4f6:	51 81       	ldd	r21, Z+1	; 0x01
 4f8:	9e 01       	movw	r18, r28
 4fa:	2d 5f       	subi	r18, 0xFD	; 253
 4fc:	3f 4f       	sbci	r19, 0xFF	; 255
 4fe:	89 81       	ldd	r24, Y+1	; 0x01
 500:	9a 81       	ldd	r25, Y+2	; 0x02
 502:	82 0f       	add	r24, r18
 504:	93 1f       	adc	r25, r19
 506:	fc 01       	movw	r30, r24
 508:	80 81       	ld	r24, Z
 50a:	ba 01       	movw	r22, r20
 50c:	0e 94 b0 01 	call	0x360	; 0x360 <write_EEPROM>
 510:	89 81       	ldd	r24, Y+1	; 0x01
 512:	9a 81       	ldd	r25, Y+2	; 0x02
 514:	01 96       	adiw	r24, 0x01	; 1
 516:	9a 83       	std	Y+2, r25	; 0x02
 518:	89 83       	std	Y+1, r24	; 0x01
 51a:	89 81       	ldd	r24, Y+1	; 0x01
 51c:	9a 81       	ldd	r25, Y+2	; 0x02
 51e:	04 97       	sbiw	r24, 0x04	; 4
 520:	0c f4       	brge	.+2      	; 0x524 <storePasscode+0xfc>
 522:	9d cf       	rjmp	.-198    	; 0x45e <storePasscode+0x36>
 524:	00 00       	nop
 526:	63 96       	adiw	r28, 0x13	; 19
 528:	0f b6       	in	r0, 0x3f	; 63
 52a:	f8 94       	cli
 52c:	de bf       	out	0x3e, r29	; 62
 52e:	0f be       	out	0x3f, r0	; 63
 530:	cd bf       	out	0x3d, r28	; 61
 532:	df 91       	pop	r29
 534:	cf 91       	pop	r28
 536:	08 95       	ret

00000538 <RecallPasscode>:
 538:	cf 93       	push	r28
 53a:	df 93       	push	r29
 53c:	cd b7       	in	r28, 0x3d	; 61
 53e:	de b7       	in	r29, 0x3e	; 62
 540:	2b 97       	sbiw	r28, 0x0b	; 11
 542:	0f b6       	in	r0, 0x3f	; 63
 544:	f8 94       	cli
 546:	de bf       	out	0x3e, r29	; 62
 548:	0f be       	out	0x3f, r0	; 63
 54a:	cd bf       	out	0x3d, r28	; 61
 54c:	8b 87       	std	Y+11, r24	; 0x0b
 54e:	1f 82       	std	Y+7, r1	; 0x07
 550:	18 86       	std	Y+8, r1	; 0x08
 552:	19 86       	std	Y+9, r1	; 0x09
 554:	1a 86       	std	Y+10, r1	; 0x0a
 556:	19 82       	std	Y+1, r1	; 0x01
 558:	1a 82       	std	Y+2, r1	; 0x02
 55a:	1b 82       	std	Y+3, r1	; 0x03
 55c:	1c 82       	std	Y+4, r1	; 0x04
 55e:	1e 82       	std	Y+6, r1	; 0x06
 560:	1d 82       	std	Y+5, r1	; 0x05
 562:	43 c0       	rjmp	.+134    	; 0x5ea <RecallPasscode+0xb2>
 564:	8b 85       	ldd	r24, Y+11	; 0x0b
 566:	88 2f       	mov	r24, r24
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	9c 01       	movw	r18, r24
 56c:	22 95       	swap	r18
 56e:	32 95       	swap	r19
 570:	30 7f       	andi	r19, 0xF0	; 240
 572:	32 27       	eor	r19, r18
 574:	20 7f       	andi	r18, 0xF0	; 240
 576:	32 27       	eor	r19, r18
 578:	44 e0       	ldi	r20, 0x04	; 4
 57a:	50 e0       	ldi	r21, 0x00	; 0
 57c:	8d 81       	ldd	r24, Y+5	; 0x05
 57e:	9e 81       	ldd	r25, Y+6	; 0x06
 580:	ba 01       	movw	r22, r20
 582:	68 1b       	sub	r22, r24
 584:	79 0b       	sbc	r23, r25
 586:	cb 01       	movw	r24, r22
 588:	82 2b       	or	r24, r18
 58a:	93 2b       	or	r25, r19
 58c:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <read_EEPROM>
 590:	88 2f       	mov	r24, r24
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	a0 e0       	ldi	r26, 0x00	; 0
 596:	b0 e0       	ldi	r27, 0x00	; 0
 598:	8f 83       	std	Y+7, r24	; 0x07
 59a:	98 87       	std	Y+8, r25	; 0x08
 59c:	a9 87       	std	Y+9, r26	; 0x09
 59e:	ba 87       	std	Y+10, r27	; 0x0a
 5a0:	8d 81       	ldd	r24, Y+5	; 0x05
 5a2:	9e 81       	ldd	r25, Y+6	; 0x06
 5a4:	9c 01       	movw	r18, r24
 5a6:	22 0f       	add	r18, r18
 5a8:	33 1f       	adc	r19, r19
 5aa:	22 0f       	add	r18, r18
 5ac:	33 1f       	adc	r19, r19
 5ae:	22 0f       	add	r18, r18
 5b0:	33 1f       	adc	r19, r19
 5b2:	8f 81       	ldd	r24, Y+7	; 0x07
 5b4:	98 85       	ldd	r25, Y+8	; 0x08
 5b6:	a9 85       	ldd	r26, Y+9	; 0x09
 5b8:	ba 85       	ldd	r27, Y+10	; 0x0a
 5ba:	04 c0       	rjmp	.+8      	; 0x5c4 <RecallPasscode+0x8c>
 5bc:	88 0f       	add	r24, r24
 5be:	99 1f       	adc	r25, r25
 5c0:	aa 1f       	adc	r26, r26
 5c2:	bb 1f       	adc	r27, r27
 5c4:	2a 95       	dec	r18
 5c6:	d2 f7       	brpl	.-12     	; 0x5bc <RecallPasscode+0x84>
 5c8:	29 81       	ldd	r18, Y+1	; 0x01
 5ca:	3a 81       	ldd	r19, Y+2	; 0x02
 5cc:	4b 81       	ldd	r20, Y+3	; 0x03
 5ce:	5c 81       	ldd	r21, Y+4	; 0x04
 5d0:	82 2b       	or	r24, r18
 5d2:	93 2b       	or	r25, r19
 5d4:	a4 2b       	or	r26, r20
 5d6:	b5 2b       	or	r27, r21
 5d8:	89 83       	std	Y+1, r24	; 0x01
 5da:	9a 83       	std	Y+2, r25	; 0x02
 5dc:	ab 83       	std	Y+3, r26	; 0x03
 5de:	bc 83       	std	Y+4, r27	; 0x04
 5e0:	8d 81       	ldd	r24, Y+5	; 0x05
 5e2:	9e 81       	ldd	r25, Y+6	; 0x06
 5e4:	01 96       	adiw	r24, 0x01	; 1
 5e6:	9e 83       	std	Y+6, r25	; 0x06
 5e8:	8d 83       	std	Y+5, r24	; 0x05
 5ea:	8d 81       	ldd	r24, Y+5	; 0x05
 5ec:	9e 81       	ldd	r25, Y+6	; 0x06
 5ee:	04 97       	sbiw	r24, 0x04	; 4
 5f0:	0c f4       	brge	.+2      	; 0x5f4 <RecallPasscode+0xbc>
 5f2:	b8 cf       	rjmp	.-144    	; 0x564 <RecallPasscode+0x2c>
 5f4:	89 81       	ldd	r24, Y+1	; 0x01
 5f6:	9a 81       	ldd	r25, Y+2	; 0x02
 5f8:	ab 81       	ldd	r26, Y+3	; 0x03
 5fa:	bc 81       	ldd	r27, Y+4	; 0x04
 5fc:	bc 01       	movw	r22, r24
 5fe:	cd 01       	movw	r24, r26
 600:	2b 96       	adiw	r28, 0x0b	; 11
 602:	0f b6       	in	r0, 0x3f	; 63
 604:	f8 94       	cli
 606:	de bf       	out	0x3e, r29	; 62
 608:	0f be       	out	0x3f, r0	; 63
 60a:	cd bf       	out	0x3d, r28	; 61
 60c:	df 91       	pop	r29
 60e:	cf 91       	pop	r28
 610:	08 95       	ret

00000612 <initLEDs>:
// START FUNCTIONS

//****************************************************************************************
//	Initialise output LEDs - PORTB
void initLEDs(void)
{
 612:	cf 93       	push	r28
 614:	df 93       	push	r29
 616:	cd b7       	in	r28, 0x3d	; 61
 618:	de b7       	in	r29, 0x3e	; 62
	DDRB = 0xFF;		// Set all LEDs to outputs
 61a:	87 e3       	ldi	r24, 0x37	; 55
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	2f ef       	ldi	r18, 0xFF	; 255
 620:	fc 01       	movw	r30, r24
 622:	20 83       	st	Z, r18
	PORTB = 0x00;		// Turn all LEDs off
 624:	88 e3       	ldi	r24, 0x38	; 56
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	fc 01       	movw	r30, r24
 62a:	10 82       	st	Z, r1
}
 62c:	00 00       	nop
 62e:	df 91       	pop	r29
 630:	cf 91       	pop	r28
 632:	08 95       	ret

00000634 <initKeypad>:


//****************************************************************************************
//	Initialise keypad - PORTC
void initKeypad(void)
{
 634:	cf 93       	push	r28
 636:	df 93       	push	r29
 638:	cd b7       	in	r28, 0x3d	; 61
 63a:	de b7       	in	r29, 0x3e	; 62
	if(keypad3x4 == 1)
 63c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 640:	81 30       	cpi	r24, 0x01	; 1
 642:	99 f4       	brne	.+38     	; 0x66a <initKeypad+0x36>
	{
		DDRC = 0x95;		// Set rows to inputs and columns to outputs
 644:	84 e3       	ldi	r24, 0x34	; 52
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	25 e9       	ldi	r18, 0x95	; 149
 64a:	fc 01       	movw	r30, r24
 64c:	20 83       	st	Z, r18
		PORTC = 0x6A;		// Enable the pull-up resistors on the row inputs
 64e:	85 e3       	ldi	r24, 0x35	; 53
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	2a e6       	ldi	r18, 0x6A	; 106
 654:	fc 01       	movw	r30, r24
 656:	20 83       	st	Z, r18
		PORTC = 0xFF;		// Set the columns to all on (idle state) & ensure pull-ups are still enabled
 658:	85 e3       	ldi	r24, 0x35	; 53
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	2f ef       	ldi	r18, 0xFF	; 255
 65e:	fc 01       	movw	r30, r24
 660:	20 83       	st	Z, r18
		
		AmountOfColumns =3;
 662:	83 e0       	ldi	r24, 0x03	; 3
 664:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <AmountOfColumns>
		PORTC = 0xFF;		// Set the columns to all on (idle state) & ensure pull-ups are still enabled
		
		AmountOfColumns =4;
	}

}
 668:	12 c0       	rjmp	.+36     	; 0x68e <initKeypad+0x5a>
		
		AmountOfColumns =3;
	}
	else
	{
		DDRC = 0xF0;		// Set rows to inputs and columns to outputs
 66a:	84 e3       	ldi	r24, 0x34	; 52
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	20 ef       	ldi	r18, 0xF0	; 240
 670:	fc 01       	movw	r30, r24
 672:	20 83       	st	Z, r18
		PORTC = 0x0F;		// Enable the pull-up resistors on the row inputs
 674:	85 e3       	ldi	r24, 0x35	; 53
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	2f e0       	ldi	r18, 0x0F	; 15
 67a:	fc 01       	movw	r30, r24
 67c:	20 83       	st	Z, r18
		PORTC = 0xFF;		// Set the columns to all on (idle state) & ensure pull-ups are still enabled
 67e:	85 e3       	ldi	r24, 0x35	; 53
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	2f ef       	ldi	r18, 0xFF	; 255
 684:	fc 01       	movw	r30, r24
 686:	20 83       	st	Z, r18
		
		AmountOfColumns =4;
 688:	84 e0       	ldi	r24, 0x04	; 4
 68a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <AmountOfColumns>
	}

}
 68e:	00 00       	nop
 690:	df 91       	pop	r29
 692:	cf 91       	pop	r28
 694:	08 95       	ret

00000696 <initTimers>:


//****************************************************************************************
//Initialise Timers
void initTimers(void)
{
 696:	cf 93       	push	r28
 698:	df 93       	push	r29
 69a:	cd b7       	in	r28, 0x3d	; 61
 69c:	de b7       	in	r29, 0x3e	; 62
	//set timer counter to 0
	TCNT0 = 0x00;
 69e:	82 e5       	ldi	r24, 0x52	; 82
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	fc 01       	movw	r30, r24
 6a4:	10 82       	st	Z, r1
	//set clock prescaler to divide by 1024
	TCCR0 |= (1<<CS00) | (0<<CS01) | (1<<CS02);
 6a6:	83 e5       	ldi	r24, 0x53	; 83
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	23 e5       	ldi	r18, 0x53	; 83
 6ac:	30 e0       	ldi	r19, 0x00	; 0
 6ae:	f9 01       	movw	r30, r18
 6b0:	20 81       	ld	r18, Z
 6b2:	25 60       	ori	r18, 0x05	; 5
 6b4:	fc 01       	movw	r30, r24
 6b6:	20 83       	st	Z, r18
}
 6b8:	00 00       	nop
 6ba:	df 91       	pop	r29
 6bc:	cf 91       	pop	r28
 6be:	08 95       	ret

000006c0 <ReadOne>:
// START FUNCTIONS

//**************************************************************************************************************************************************
// Function that checks if one key has been pressed 
unsigned char ReadOne() 
{
 6c0:	cf 93       	push	r28
 6c2:	df 93       	push	r29
 6c4:	00 d0       	rcall	.+0      	; 0x6c6 <ReadOne+0x6>
 6c6:	cd b7       	in	r28, 0x3d	; 61
 6c8:	de b7       	in	r29, 0x3e	; 62
	// Set KeyPressed to 0
	KeyPressed = 0x00;
 6ca:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <KeyPressed>
	
	while(1)	//can get rid of while loop, it just keeps reading until a key is pressed instead of only reading once when its called
	{

		// Scanning column: write the column mask to port C
		for (uint8_t j=0; j<AmountOfColumns; j++)
 6ce:	19 82       	std	Y+1, r1	; 0x01
 6d0:	3f c0       	rjmp	.+126    	; 0x750 <ReadOne+0x90>
		{
			PORTC = col[j];			// Scan each column
 6d2:	85 e3       	ldi	r24, 0x35	; 53
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	29 81       	ldd	r18, Y+1	; 0x01
 6d8:	22 2f       	mov	r18, r18
 6da:	30 e0       	ldi	r19, 0x00	; 0
 6dc:	2d 59       	subi	r18, 0x9D	; 157
 6de:	3f 4f       	sbci	r19, 0xFF	; 255
 6e0:	f9 01       	movw	r30, r18
 6e2:	20 81       	ld	r18, Z
 6e4:	fc 01       	movw	r30, r24
 6e6:	20 83       	st	Z, r18
			delay_ms(10);				// Delay for 0.01 sec
 6e8:	8a e0       	ldi	r24, 0x0A	; 10
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
			portCValue = PINC;			// Read port value from pinC
 6f0:	83 e3       	ldi	r24, 0x33	; 51
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	fc 01       	movw	r30, r24
 6f6:	80 81       	ld	r24, Z
 6f8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <portCValue>
		
			// Begin stepping through each column to check if row has logic 0
			if (portCValue != col[j])
 6fc:	89 81       	ldd	r24, Y+1	; 0x01
 6fe:	88 2f       	mov	r24, r24
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	8d 59       	subi	r24, 0x9D	; 157
 704:	9f 4f       	sbci	r25, 0xFF	; 255
 706:	fc 01       	movw	r30, r24
 708:	90 81       	ld	r25, Z
 70a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <portCValue>
 70e:	98 17       	cp	r25, r24
 710:	e1 f0       	breq	.+56     	; 0x74a <ReadOne+0x8a>
			{
				//rebounce??
				//Step through each key
				for(uint8_t k = 0; k < 16; k++)
 712:	1a 82       	std	Y+2, r1	; 0x02
 714:	17 c0       	rjmp	.+46     	; 0x744 <ReadOne+0x84>
				{
					if(portCValue == Keys[k])
 716:	8a 81       	ldd	r24, Y+2	; 0x02
 718:	88 2f       	mov	r24, r24
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	89 59       	subi	r24, 0x99	; 153
 71e:	9f 4f       	sbci	r25, 0xFF	; 255
 720:	fc 01       	movw	r30, r24
 722:	90 81       	ld	r25, Z
 724:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <portCValue>
 728:	98 17       	cp	r25, r24
 72a:	49 f4       	brne	.+18     	; 0x73e <ReadOne+0x7e>
					{
						key = k;
 72c:	8a 81       	ldd	r24, Y+2	; 0x02
 72e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <key>
						//*portBPort = k;
						KeyPressed = 1;
 732:	81 e0       	ldi	r24, 0x01	; 1
 734:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <KeyPressed>
						//break;						//return here instead of break??
						return key;
 738:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <key>
 73c:	10 c0       	rjmp	.+32     	; 0x75e <ReadOne+0x9e>
			// Begin stepping through each column to check if row has logic 0
			if (portCValue != col[j])
			{
				//rebounce??
				//Step through each key
				for(uint8_t k = 0; k < 16; k++)
 73e:	8a 81       	ldd	r24, Y+2	; 0x02
 740:	8f 5f       	subi	r24, 0xFF	; 255
 742:	8a 83       	std	Y+2, r24	; 0x02
 744:	8a 81       	ldd	r24, Y+2	; 0x02
 746:	80 31       	cpi	r24, 0x10	; 16
 748:	30 f3       	brcs	.-52     	; 0x716 <ReadOne+0x56>
	
	while(1)	//can get rid of while loop, it just keeps reading until a key is pressed instead of only reading once when its called
	{

		// Scanning column: write the column mask to port C
		for (uint8_t j=0; j<AmountOfColumns; j++)
 74a:	89 81       	ldd	r24, Y+1	; 0x01
 74c:	8f 5f       	subi	r24, 0xFF	; 255
 74e:	89 83       	std	Y+1, r24	; 0x01
 750:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <AmountOfColumns>
 754:	99 81       	ldd	r25, Y+1	; 0x01
 756:	98 17       	cp	r25, r24
 758:	08 f4       	brcc	.+2      	; 0x75c <ReadOne+0x9c>
 75a:	bb cf       	rjmp	.-138    	; 0x6d2 <ReadOne+0x12>
						return key;
					}		
				}
			}
		}
	}
 75c:	b8 cf       	rjmp	.-144    	; 0x6ce <ReadOne+0xe>
	return key;		//this should never execute
}
 75e:	0f 90       	pop	r0
 760:	0f 90       	pop	r0
 762:	df 91       	pop	r29
 764:	cf 91       	pop	r28
 766:	08 95       	ret

00000768 <ReadNone>:
//**************************************************************************************************************************************************

//**************************************************************************************************************************************************
//Check if key has been lifted. ie debounce?
void ReadNone (void)
{
 768:	cf 93       	push	r28
 76a:	df 93       	push	r29
 76c:	cd b7       	in	r28, 0x3d	; 61
 76e:	de b7       	in	r29, 0x3e	; 62
	if(keypad3x4==1)
 770:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 774:	81 30       	cpi	r24, 0x01	; 1
 776:	69 f4       	brne	.+26     	; 0x792 <ReadNone+0x2a>
	{
		while((PINC&0x6A)!=0x6A);	//exits when PINC inputs are all high 
 778:	00 00       	nop
 77a:	83 e3       	ldi	r24, 0x33	; 51
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	fc 01       	movw	r30, r24
 780:	80 81       	ld	r24, Z
 782:	88 2f       	mov	r24, r24
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	8a 76       	andi	r24, 0x6A	; 106
 788:	99 27       	eor	r25, r25
 78a:	8a 36       	cpi	r24, 0x6A	; 106
 78c:	91 05       	cpc	r25, r1
 78e:	a9 f7       	brne	.-22     	; 0x77a <ReadNone+0x12>
	else
	{
		while((PINC&0x0F)!=0x0F);	//exits when PINC inputs are all high 
	}
	
}
 790:	0b c0       	rjmp	.+22     	; 0x7a8 <ReadNone+0x40>
	{
		while((PINC&0x6A)!=0x6A);	//exits when PINC inputs are all high 
	}
	else
	{
		while((PINC&0x0F)!=0x0F);	//exits when PINC inputs are all high 
 792:	00 00       	nop
 794:	83 e3       	ldi	r24, 0x33	; 51
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	fc 01       	movw	r30, r24
 79a:	80 81       	ld	r24, Z
 79c:	88 2f       	mov	r24, r24
 79e:	90 e0       	ldi	r25, 0x00	; 0
 7a0:	8f 70       	andi	r24, 0x0F	; 15
 7a2:	99 27       	eor	r25, r25
 7a4:	0f 97       	sbiw	r24, 0x0f	; 15
 7a6:	b1 f7       	brne	.-20     	; 0x794 <ReadNone+0x2c>
	}
	
}
 7a8:	00 00       	nop
 7aa:	df 91       	pop	r29
 7ac:	cf 91       	pop	r28
 7ae:	08 95       	ret

000007b0 <InputPasscode>:
//**************************************************************************************************************************************************

//**************************************************************************************************************************************************
//Combine 6-8 digits into a passcode
uint32_t InputPasscode (void)
{
 7b0:	0f 93       	push	r16
 7b2:	1f 93       	push	r17
 7b4:	cf 93       	push	r28
 7b6:	df 93       	push	r29
 7b8:	cd b7       	in	r28, 0x3d	; 61
 7ba:	de b7       	in	r29, 0x3e	; 62
 7bc:	27 97       	sbiw	r28, 0x07	; 7
 7be:	0f b6       	in	r0, 0x3f	; 63
 7c0:	f8 94       	cli
 7c2:	de bf       	out	0x3e, r29	; 62
 7c4:	0f be       	out	0x3f, r0	; 63
 7c6:	cd bf       	out	0x3d, r28	; 61
	uint32_t passcode = 0;
 7c8:	19 82       	std	Y+1, r1	; 0x01
 7ca:	1a 82       	std	Y+2, r1	; 0x02
 7cc:	1b 82       	std	Y+3, r1	; 0x03
 7ce:	1c 82       	std	Y+4, r1	; 0x04
	for (int i =0; i<8; i++)
 7d0:	1e 82       	std	Y+6, r1	; 0x06
 7d2:	1d 82       	std	Y+5, r1	; 0x05
 7d4:	4d c0       	rjmp	.+154    	; 0x870 <__stack+0x11>
	{
		uint8_t keyValue = ReadOne();	//store digit pressed by user
 7d6:	0e 94 60 03 	call	0x6c0	; 0x6c0 <ReadOne>
 7da:	8f 83       	std	Y+7, r24	; 0x07
		
		if(keyValue==0xF)					//if # is pressed
 7dc:	8f 81       	ldd	r24, Y+7	; 0x07
 7de:	8f 30       	cpi	r24, 0x0F	; 15
 7e0:	29 f4       	brne	.+10     	; 0x7ec <InputPasscode+0x3c>
		{
			return passcode;
 7e2:	89 81       	ldd	r24, Y+1	; 0x01
 7e4:	9a 81       	ldd	r25, Y+2	; 0x02
 7e6:	ab 81       	ldd	r26, Y+3	; 0x03
 7e8:	bc 81       	ldd	r27, Y+4	; 0x04
 7ea:	53 c0       	rjmp	.+166    	; 0x892 <__stack+0x33>
		}
		
		//check if key pressed is a digit
		if(isDigit(keyValue))
 7ec:	8f 81       	ldd	r24, Y+7	; 0x07
 7ee:	0e 94 69 04 	call	0x8d2	; 0x8d2 <isDigit>
 7f2:	88 23       	and	r24, r24
 7f4:	89 f1       	breq	.+98     	; 0x858 <InputPasscode+0xa8>
		{
			PORTB = displayKeys(keyValue);	// output key being pressed to LEDs
 7f6:	08 e3       	ldi	r16, 0x38	; 56
 7f8:	10 e0       	ldi	r17, 0x00	; 0
 7fa:	8f 81       	ldd	r24, Y+7	; 0x07
 7fc:	0e 94 72 01 	call	0x2e4	; 0x2e4 <displayKeys>
 800:	f8 01       	movw	r30, r16
 802:	80 83       	st	Z, r24
			ReadNone();						//waits until finger is lifted off button
 804:	0e 94 b4 03 	call	0x768	; 0x768 <ReadNone>
			PORTB = 0x00;
 808:	88 e3       	ldi	r24, 0x38	; 56
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	fc 01       	movw	r30, r24
 80e:	10 82       	st	Z, r1
			
			passcode = passcode*10 + keyValue;	//add each digit into a long int
 810:	89 81       	ldd	r24, Y+1	; 0x01
 812:	9a 81       	ldd	r25, Y+2	; 0x02
 814:	ab 81       	ldd	r26, Y+3	; 0x03
 816:	bc 81       	ldd	r27, Y+4	; 0x04
 818:	88 0f       	add	r24, r24
 81a:	99 1f       	adc	r25, r25
 81c:	aa 1f       	adc	r26, r26
 81e:	bb 1f       	adc	r27, r27
 820:	9c 01       	movw	r18, r24
 822:	ad 01       	movw	r20, r26
 824:	22 0f       	add	r18, r18
 826:	33 1f       	adc	r19, r19
 828:	44 1f       	adc	r20, r20
 82a:	55 1f       	adc	r21, r21
 82c:	22 0f       	add	r18, r18
 82e:	33 1f       	adc	r19, r19
 830:	44 1f       	adc	r20, r20
 832:	55 1f       	adc	r21, r21
 834:	28 0f       	add	r18, r24
 836:	39 1f       	adc	r19, r25
 838:	4a 1f       	adc	r20, r26
 83a:	5b 1f       	adc	r21, r27
 83c:	8f 81       	ldd	r24, Y+7	; 0x07
 83e:	88 2f       	mov	r24, r24
 840:	90 e0       	ldi	r25, 0x00	; 0
 842:	a0 e0       	ldi	r26, 0x00	; 0
 844:	b0 e0       	ldi	r27, 0x00	; 0
 846:	82 0f       	add	r24, r18
 848:	93 1f       	adc	r25, r19
 84a:	a4 1f       	adc	r26, r20
 84c:	b5 1f       	adc	r27, r21
 84e:	89 83       	std	Y+1, r24	; 0x01
 850:	9a 83       	std	Y+2, r25	; 0x02
 852:	ab 83       	std	Y+3, r26	; 0x03
 854:	bc 83       	std	Y+4, r27	; 0x04
 856:	07 c0       	rjmp	.+14     	; 0x866 <__stack+0x7>
		}
		else
		{
			//not a valid input
			i--;		//dont increment length counter if not valid
 858:	8d 81       	ldd	r24, Y+5	; 0x05
 85a:	9e 81       	ldd	r25, Y+6	; 0x06
 85c:	01 97       	sbiw	r24, 0x01	; 1
 85e:	9e 83       	std	Y+6, r25	; 0x06
 860:	8d 83       	std	Y+5, r24	; 0x05
			displayIncorrect();
 862:	0e 94 4a 01 	call	0x294	; 0x294 <displayIncorrect>
//**************************************************************************************************************************************************
//Combine 6-8 digits into a passcode
uint32_t InputPasscode (void)
{
	uint32_t passcode = 0;
	for (int i =0; i<8; i++)
 866:	8d 81       	ldd	r24, Y+5	; 0x05
 868:	9e 81       	ldd	r25, Y+6	; 0x06
 86a:	01 96       	adiw	r24, 0x01	; 1
 86c:	9e 83       	std	Y+6, r25	; 0x06
 86e:	8d 83       	std	Y+5, r24	; 0x05
 870:	8d 81       	ldd	r24, Y+5	; 0x05
 872:	9e 81       	ldd	r25, Y+6	; 0x06
 874:	08 97       	sbiw	r24, 0x08	; 8
 876:	0c f4       	brge	.+2      	; 0x87a <__stack+0x1b>
 878:	ae cf       	rjmp	.-164    	; 0x7d6 <InputPasscode+0x26>
	}
	/*
	while(!(ReadOne()==0xF));		//wait until reads a *
	return passcode	; */
	
	if((ReadOne()==0xF))		//if next key is a #
 87a:	0e 94 60 03 	call	0x6c0	; 0x6c0 <ReadOne>
 87e:	8f 30       	cpi	r24, 0x0F	; 15
 880:	29 f4       	brne	.+10     	; 0x88c <__stack+0x2d>
	{
		return passcode	;
 882:	89 81       	ldd	r24, Y+1	; 0x01
 884:	9a 81       	ldd	r25, Y+2	; 0x02
 886:	ab 81       	ldd	r26, Y+3	; 0x03
 888:	bc 81       	ldd	r27, Y+4	; 0x04
 88a:	03 c0       	rjmp	.+6      	; 0x892 <__stack+0x33>
	}
	else
	{
		return 0;
 88c:	80 e0       	ldi	r24, 0x00	; 0
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	dc 01       	movw	r26, r24
	}	
}
 892:	bc 01       	movw	r22, r24
 894:	cd 01       	movw	r24, r26
 896:	27 96       	adiw	r28, 0x07	; 7
 898:	0f b6       	in	r0, 0x3f	; 63
 89a:	f8 94       	cli
 89c:	de bf       	out	0x3e, r29	; 62
 89e:	0f be       	out	0x3f, r0	; 63
 8a0:	cd bf       	out	0x3d, r28	; 61
 8a2:	df 91       	pop	r29
 8a4:	cf 91       	pop	r28
 8a6:	1f 91       	pop	r17
 8a8:	0f 91       	pop	r16
 8aa:	08 95       	ret

000008ac <isUser>:
//**************************************************************************************************************************************************

//**************************************************************************************************************************************************
//is the input a letter, a,b,c, or d. returns 1 if a valid user code
uint8_t isUser (uint8_t buttonPressed)
{
 8ac:	cf 93       	push	r28
 8ae:	df 93       	push	r29
 8b0:	1f 92       	push	r1
 8b2:	cd b7       	in	r28, 0x3d	; 61
 8b4:	de b7       	in	r29, 0x3e	; 62
 8b6:	89 83       	std	Y+1, r24	; 0x01
	switch(buttonPressed)
 8b8:	89 81       	ldd	r24, Y+1	; 0x01
 8ba:	88 2f       	mov	r24, r24
 8bc:	90 e0       	ldi	r25, 0x00	; 0
 8be:	0a 97       	sbiw	r24, 0x0a	; 10
 8c0:	04 97       	sbiw	r24, 0x04	; 4
 8c2:	10 f4       	brcc	.+4      	; 0x8c8 <isUser+0x1c>
	{
		case 0x0A:
		case 0x0B:
		case 0x0C:
		case 0x0D:
		return 1;
 8c4:	81 e0       	ldi	r24, 0x01	; 1
 8c6:	01 c0       	rjmp	.+2      	; 0x8ca <isUser+0x1e>
		
		default:	//invalid user code		Set some debug flag here
		return 0;
 8c8:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 8ca:	0f 90       	pop	r0
 8cc:	df 91       	pop	r29
 8ce:	cf 91       	pop	r28
 8d0:	08 95       	ret

000008d2 <isDigit>:
//**************************************************************************************************************************************************

//**************************************************************************************************************************************************
//is the user input a digit. returns 1 if value is a digit
uint8_t isDigit (uint8_t buttonPressed)
{
 8d2:	cf 93       	push	r28
 8d4:	df 93       	push	r29
 8d6:	1f 92       	push	r1
 8d8:	cd b7       	in	r28, 0x3d	; 61
 8da:	de b7       	in	r29, 0x3e	; 62
 8dc:	89 83       	std	Y+1, r24	; 0x01
	switch(buttonPressed)
 8de:	89 81       	ldd	r24, Y+1	; 0x01
 8e0:	88 2f       	mov	r24, r24
 8e2:	90 e0       	ldi	r25, 0x00	; 0
 8e4:	0a 97       	sbiw	r24, 0x0a	; 10
 8e6:	10 f4       	brcc	.+4      	; 0x8ec <isDigit+0x1a>
		case 0x05:
		case 0x06:
		case 0x07:
		case 0x08:
		case 0x09:
		return 1;
 8e8:	81 e0       	ldi	r24, 0x01	; 1
 8ea:	01 c0       	rjmp	.+2      	; 0x8ee <isDigit+0x1c>
		
		default:	//invalid user code		Set some debug flag here
		return 0;
 8ec:	80 e0       	ldi	r24, 0x00	; 0
	}
 8ee:	0f 90       	pop	r0
 8f0:	df 91       	pop	r29
 8f2:	cf 91       	pop	r28
 8f4:	08 95       	ret

000008f6 <main>:

// Global variables
uint8_t debugCode = 0;

int main(void)
{
 8f6:	cf 93       	push	r28
 8f8:	df 93       	push	r29
 8fa:	00 d0       	rcall	.+0      	; 0x8fc <main+0x6>
 8fc:	00 d0       	rcall	.+0      	; 0x8fe <main+0x8>
 8fe:	cd b7       	in	r28, 0x3d	; 61
 900:	de b7       	in	r29, 0x3e	; 62
	// Initialise everything
    initTimers();
 902:	0e 94 4b 03 	call	0x696	; 0x696 <initTimers>
	initLEDs();
 906:	0e 94 09 03 	call	0x612	; 0x612 <initLEDs>
	initKeypad();
 90a:	0e 94 1a 03 	call	0x634	; 0x634 <initKeypad>
	
	storePasscode(12345678, 0xA);		//stores the password 12345678 into user slot A
 90e:	4a e0       	ldi	r20, 0x0A	; 10
 910:	6e e4       	ldi	r22, 0x4E	; 78
 912:	71 e6       	ldi	r23, 0x61	; 97
 914:	8c eb       	ldi	r24, 0xBC	; 188
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	0e 94 14 02 	call	0x428	; 0x428 <storePasscode>
	
    while (1) 
    {

		uint32_t attemptPasscode = InputPasscode();		//read the passcode from the keypad
 91c:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <InputPasscode>
 920:	dc 01       	movw	r26, r24
 922:	cb 01       	movw	r24, r22
 924:	89 83       	std	Y+1, r24	; 0x01
 926:	9a 83       	std	Y+2, r25	; 0x02
 928:	ab 83       	std	Y+3, r26	; 0x03
 92a:	bc 83       	std	Y+4, r27	; 0x04
		
		if(RecallPasscode(0xA)==attemptPasscode)		//check if correct
 92c:	8a e0       	ldi	r24, 0x0A	; 10
 92e:	0e 94 9c 02 	call	0x538	; 0x538 <RecallPasscode>
 932:	9b 01       	movw	r18, r22
 934:	ac 01       	movw	r20, r24
 936:	89 81       	ldd	r24, Y+1	; 0x01
 938:	9a 81       	ldd	r25, Y+2	; 0x02
 93a:	ab 81       	ldd	r26, Y+3	; 0x03
 93c:	bc 81       	ldd	r27, Y+4	; 0x04
 93e:	28 17       	cp	r18, r24
 940:	39 07       	cpc	r19, r25
 942:	4a 07       	cpc	r20, r26
 944:	5b 07       	cpc	r21, r27
 946:	39 f4       	brne	.+14     	; 0x956 <main+0x60>
		{
			delay_ms(100);
 948:	84 e6       	ldi	r24, 0x64	; 100
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
			displayUnlock();
 950:	0e 94 9b 00 	call	0x136	; 0x136 <displayUnlock>
 954:	e3 cf       	rjmp	.-58     	; 0x91c <main+0x26>
		}
		else
		{
			delay_ms(100);
 956:	84 e6       	ldi	r24, 0x64	; 100
 958:	90 e0       	ldi	r25, 0x00	; 0
 95a:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ms>
			displayLock();
 95e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <displayLock>
		}
		
    }
 962:	dc cf       	rjmp	.-72     	; 0x91c <main+0x26>

00000964 <__tablejump2__>:
 964:	ee 0f       	add	r30, r30
 966:	ff 1f       	adc	r31, r31
 968:	05 90       	lpm	r0, Z+
 96a:	f4 91       	lpm	r31, Z
 96c:	e0 2d       	mov	r30, r0
 96e:	09 94       	ijmp

00000970 <_exit>:
 970:	f8 94       	cli

00000972 <__stop_program>:
 972:	ff cf       	rjmp	.-2      	; 0x972 <__stop_program>
